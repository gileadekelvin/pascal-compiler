/*
 * generated by Xtext 2.15.0
 */
grammar InternalPascal;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.compiler.pascal.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.compiler.pascal.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.compiler.pascal.services.PascalGrammarAccess;

}
@parser::members {
	private PascalGrammarAccess grammarAccess;

	public void setGrammarAccess(PascalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRulepascal
entryRulepascal
:
{ before(grammarAccess.getPascalRule()); }
	 rulepascal
{ after(grammarAccess.getPascalRule()); } 
	 EOF 
;

// Rule pascal
rulepascal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPascalAccess().getProgramAssignment()); }
		(rule__Pascal__ProgramAssignment)
		{ after(grammarAccess.getPascalAccess().getProgramAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprogram
entryRuleprogram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleprogram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule program
ruleprogram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprogram_heading_block
entryRuleprogram_heading_block
:
{ before(grammarAccess.getProgram_heading_blockRule()); }
	 ruleprogram_heading_block
{ after(grammarAccess.getProgram_heading_blockRule()); } 
	 EOF 
;

// Rule program_heading_block
ruleprogram_heading_block 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgram_heading_blockAccess().getGroup()); }
		(rule__Program_heading_block__Group__0)
		{ after(grammarAccess.getProgram_heading_blockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleidentifier_list
entryRuleidentifier_list
:
{ before(grammarAccess.getIdentifier_listRule()); }
	 ruleidentifier_list
{ after(grammarAccess.getIdentifier_listRule()); } 
	 EOF 
;

// Rule identifier_list
ruleidentifier_list 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentifier_listAccess().getGroup()); }
		(rule__Identifier_list__Group__0)
		{ after(grammarAccess.getIdentifier_listAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleblock
entryRuleblock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleblock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule block
ruleblock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getHeadingAssignment_0()); }
	(rule__Program__HeadingAssignment_0)
	{ after(grammarAccess.getProgramAccess().getHeadingAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getBlockAssignment_1()); }
	(rule__Program__BlockAssignment_1)
	{ after(grammarAccess.getProgramAccess().getBlockAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getProgramAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program_heading_block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program_heading_block__Group__0__Impl
	rule__Program_heading_block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgram_heading_blockAccess().getProgramKeyword_0()); }
	'program'
	{ after(grammarAccess.getProgram_heading_blockAccess().getProgramKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program_heading_block__Group__1__Impl
	rule__Program_heading_block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgram_heading_blockAccess().getNameAssignment_1()); }
	(rule__Program_heading_block__NameAssignment_1)
	{ after(grammarAccess.getProgram_heading_blockAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program_heading_block__Group__2__Impl
	rule__Program_heading_block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgram_heading_blockAccess().getGroup_2()); }
	(rule__Program_heading_block__Group_2__0)?
	{ after(grammarAccess.getProgram_heading_blockAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program_heading_block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgram_heading_blockAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getProgram_heading_blockAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program_heading_block__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program_heading_block__Group_2__0__Impl
	rule__Program_heading_block__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgram_heading_blockAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getProgram_heading_blockAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program_heading_block__Group_2__1__Impl
	rule__Program_heading_block__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgram_heading_blockAccess().getIdentifiersAssignment_2_1()); }
	(rule__Program_heading_block__IdentifiersAssignment_2_1)
	{ after(grammarAccess.getProgram_heading_blockAccess().getIdentifiersAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program_heading_block__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgram_heading_blockAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getProgram_heading_blockAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Identifier_list__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Identifier_list__Group__0__Impl
	rule__Identifier_list__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier_list__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifier_listAccess().getNamesAssignment_0()); }
	(rule__Identifier_list__NamesAssignment_0)
	{ after(grammarAccess.getIdentifier_listAccess().getNamesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier_list__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Identifier_list__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier_list__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifier_listAccess().getGroup_1()); }
	(rule__Identifier_list__Group_1__0)*
	{ after(grammarAccess.getIdentifier_listAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Identifier_list__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Identifier_list__Group_1__0__Impl
	rule__Identifier_list__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier_list__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifier_listAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getIdentifier_listAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier_list__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Identifier_list__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier_list__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifier_listAccess().getNamesAssignment_1_1()); }
	(rule__Identifier_list__NamesAssignment_1_1)
	{ after(grammarAccess.getIdentifier_listAccess().getNamesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getHelloKeyword_0()); }
	'Hello'
	{ after(grammarAccess.getBlockAccess().getHelloKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getNameAssignment_1()); }
	(rule__Block__NameAssignment_1)
	{ after(grammarAccess.getBlockAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getExclamationMarkKeyword_2()); }
	'!'
	{ after(grammarAccess.getBlockAccess().getExclamationMarkKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getBlockAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pascal__ProgramAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPascalAccess().getProgramProgramParserRuleCall_0()); }
		ruleprogram
		{ after(grammarAccess.getPascalAccess().getProgramProgramParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__HeadingAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getHeadingProgram_heading_blockParserRuleCall_0_0()); }
		ruleprogram_heading_block
		{ after(grammarAccess.getProgramAccess().getHeadingProgram_heading_blockParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__BlockAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getBlockBlockParserRuleCall_1_0()); }
		ruleblock
		{ after(grammarAccess.getProgramAccess().getBlockBlockParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgram_heading_blockAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProgram_heading_blockAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__IdentifiersAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgram_heading_blockAccess().getIdentifiersIdentifier_listParserRuleCall_2_1_0()); }
		ruleidentifier_list
		{ after(grammarAccess.getProgram_heading_blockAccess().getIdentifiersIdentifier_listParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier_list__NamesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifier_listAccess().getNamesIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getIdentifier_listAccess().getNamesIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier_list__NamesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifier_listAccess().getNamesIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getIdentifier_listAccess().getNamesIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getBlockAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
