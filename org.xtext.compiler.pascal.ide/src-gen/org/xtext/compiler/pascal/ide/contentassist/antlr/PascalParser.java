/*
 * generated by Xtext 2.15.0
 */
package org.xtext.compiler.pascal.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.compiler.pascal.ide.contentassist.antlr.internal.InternalPascalParser;
import org.xtext.compiler.pascal.services.PascalGrammarAccess;

public class PascalParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PascalGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PascalGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getProgram_heading_blockAccess().getGroup(), "rule__Program_heading_block__Group__0");
			builder.put(grammarAccess.getProgram_heading_blockAccess().getGroup_2(), "rule__Program_heading_block__Group_2__0");
			builder.put(grammarAccess.getIdentifier_listAccess().getGroup(), "rule__Identifier_list__Group__0");
			builder.put(grammarAccess.getIdentifier_listAccess().getGroup_1(), "rule__Identifier_list__Group_1__0");
			builder.put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
			builder.put(grammarAccess.getPascalAccess().getProgramAssignment(), "rule__Pascal__ProgramAssignment");
			builder.put(grammarAccess.getProgramAccess().getHeadingAssignment_0(), "rule__Program__HeadingAssignment_0");
			builder.put(grammarAccess.getProgramAccess().getBlockAssignment_1(), "rule__Program__BlockAssignment_1");
			builder.put(grammarAccess.getProgram_heading_blockAccess().getNameAssignment_1(), "rule__Program_heading_block__NameAssignment_1");
			builder.put(grammarAccess.getProgram_heading_blockAccess().getIdentifiersAssignment_2_1(), "rule__Program_heading_block__IdentifiersAssignment_2_1");
			builder.put(grammarAccess.getIdentifier_listAccess().getNamesAssignment_0(), "rule__Identifier_list__NamesAssignment_0");
			builder.put(grammarAccess.getIdentifier_listAccess().getNamesAssignment_1_1(), "rule__Identifier_list__NamesAssignment_1_1");
			builder.put(grammarAccess.getBlockAccess().getNameAssignment_1(), "rule__Block__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PascalGrammarAccess grammarAccess;

	@Override
	protected InternalPascalParser createParser() {
		InternalPascalParser result = new InternalPascalParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PascalGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PascalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
