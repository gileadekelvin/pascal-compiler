/*
 * generated by Xtext 2.15.0
 */
package org.xtext.compiler.pascal.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.compiler.pascal.ide.contentassist.antlr.internal.InternalPascalParser;
import org.xtext.compiler.pascal.services.PascalGrammarAccess;

public class PascalParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PascalGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PascalGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBlockAccess().getAlternatives_0(), "rule__Block__Alternatives_0");
			builder.put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getUnlabelled_statementAccess().getAlternatives(), "rule__Unlabelled_statement__Alternatives");
			builder.put(grammarAccess.getSimple_statementAccess().getAlternatives(), "rule__Simple_statement__Alternatives");
			builder.put(grammarAccess.getVariableAccess().getAlternatives_0(), "rule__Variable__Alternatives_0");
			builder.put(grammarAccess.getVariableAccess().getAlternatives_1(), "rule__Variable__Alternatives_1");
			builder.put(grammarAccess.getSigned_factorAccess().getAlternatives_0(), "rule__Signed_factor__Alternatives_0");
			builder.put(grammarAccess.getFactorAccess().getAlternatives(), "rule__Factor__Alternatives");
			builder.put(grammarAccess.getSetAccess().getAlternatives(), "rule__Set__Alternatives");
			builder.put(grammarAccess.getSimple_typeAccess().getAlternatives(), "rule__Simple_type__Alternatives");
			builder.put(grammarAccess.getType_identifierAccess().getAlternatives(), "rule__Type_identifier__Alternatives");
			builder.put(grammarAccess.getType_identifierAccess().getAlternatives_1(), "rule__Type_identifier__Alternatives_1");
			builder.put(grammarAccess.getString_typeAccess().getAlternatives_2(), "rule__String_type__Alternatives_2");
			builder.put(grammarAccess.getUnsigned_constantAccess().getAlternatives(), "rule__Unsigned_constant__Alternatives");
			builder.put(grammarAccess.getUnsigned_numberAccess().getAlternatives(), "rule__Unsigned_number__Alternatives");
			builder.put(grammarAccess.getAdditive_operatorAccess().getAlternatives(), "rule__Additive_operator__Alternatives");
			builder.put(grammarAccess.getMultiplicative_operatorAccess().getAlternatives(), "rule__Multiplicative_operator__Alternatives");
			builder.put(grammarAccess.getRelational_operatorAccess().getAlternatives(), "rule__Relational_operator__Alternatives");
			builder.put(grammarAccess.getBoolAccess().getAlternatives(), "rule__Bool__Alternatives");
			builder.put(grammarAccess.getSignAccess().getAlternatives(), "rule__Sign__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getProgram_heading_blockAccess().getGroup(), "rule__Program_heading_block__Group__0");
			builder.put(grammarAccess.getProgram_heading_blockAccess().getGroup_2(), "rule__Program_heading_block__Group_2__0");
			builder.put(grammarAccess.getIdentifier_listAccess().getGroup(), "rule__Identifier_list__Group__0");
			builder.put(grammarAccess.getIdentifier_listAccess().getGroup_1(), "rule__Identifier_list__Group_1__0");
			builder.put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
			builder.put(grammarAccess.getConstant_definition_partAccess().getGroup(), "rule__Constant_definition_part__Group__0");
			builder.put(grammarAccess.getConstant_definition_partAccess().getGroup_1(), "rule__Constant_definition_part__Group_1__0");
			builder.put(grammarAccess.getConstant_definitionAccess().getGroup(), "rule__Constant_definition__Group__0");
			builder.put(grammarAccess.getConstantAccess().getGroup_1(), "rule__Constant__Group_1__0");
			builder.put(grammarAccess.getConstantAccess().getGroup_3(), "rule__Constant__Group_3__0");
			builder.put(grammarAccess.getVariable_declaration_partAccess().getGroup(), "rule__Variable_declaration_part__Group__0");
			builder.put(grammarAccess.getVariable_declaration_partAccess().getGroup_2(), "rule__Variable_declaration_part__Group_2__0");
			builder.put(grammarAccess.getVariable_declarationAccess().getGroup(), "rule__Variable_declaration__Group__0");
			builder.put(grammarAccess.getCompound_statementAccess().getGroup(), "rule__Compound_statement__Group__0");
			builder.put(grammarAccess.getStatementsAccess().getGroup(), "rule__Statements__Group__0");
			builder.put(grammarAccess.getStatementsAccess().getGroup_1(), "rule__Statements__Group_1__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_0(), "rule__Statement__Group_0__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
			builder.put(grammarAccess.getAssignment_statementAccess().getGroup(), "rule__Assignment_statement__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup_0_0(), "rule__Variable__Group_0_0__0");
			builder.put(grammarAccess.getVariableAccess().getGroup_1_0(), "rule__Variable__Group_1_0__0");
			builder.put(grammarAccess.getVariableAccess().getGroup_1_0_2(), "rule__Variable__Group_1_0_2__0");
			builder.put(grammarAccess.getVariableAccess().getGroup_1_1(), "rule__Variable__Group_1_1__0");
			builder.put(grammarAccess.getVariableAccess().getGroup_1_1_2(), "rule__Variable__Group_1_1_2__0");
			builder.put(grammarAccess.getVariableAccess().getGroup_1_2(), "rule__Variable__Group_1_2__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getSimple_expressionAccess().getGroup(), "rule__Simple_expression__Group__0");
			builder.put(grammarAccess.getSimple_expressionAccess().getGroup_1(), "rule__Simple_expression__Group_1__0");
			builder.put(grammarAccess.getTermAccess().getGroup(), "rule__Term__Group__0");
			builder.put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
			builder.put(grammarAccess.getSigned_factorAccess().getGroup(), "rule__Signed_factor__Group__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_1(), "rule__Factor__Group_1__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_4(), "rule__Factor__Group_4__0");
			builder.put(grammarAccess.getSetAccess().getGroup_0(), "rule__Set__Group_0__0");
			builder.put(grammarAccess.getSetAccess().getGroup_1(), "rule__Set__Group_1__0");
			builder.put(grammarAccess.getElementListAccess().getGroup(), "rule__ElementList__Group__0");
			builder.put(grammarAccess.getElementListAccess().getGroup_1(), "rule__ElementList__Group_1__0");
			builder.put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
			builder.put(grammarAccess.getElementAccess().getGroup_1(), "rule__Element__Group_1__0");
			builder.put(grammarAccess.getScalar_typeAccess().getGroup(), "rule__Scalar_type__Group__0");
			builder.put(grammarAccess.getSubrange_typeAccess().getGroup(), "rule__Subrange_type__Group__0");
			builder.put(grammarAccess.getString_typeAccess().getGroup(), "rule__String_type__Group__0");
			builder.put(grammarAccess.getConstant_chrAccess().getGroup(), "rule__Constant_chr__Group__0");
			builder.put(grammarAccess.getPascalAccess().getProgramAssignment(), "rule__Pascal__ProgramAssignment");
			builder.put(grammarAccess.getProgramAccess().getHeadingAssignment_0(), "rule__Program__HeadingAssignment_0");
			builder.put(grammarAccess.getProgramAccess().getBlockAssignment_1(), "rule__Program__BlockAssignment_1");
			builder.put(grammarAccess.getProgram_heading_blockAccess().getNameAssignment_1(), "rule__Program_heading_block__NameAssignment_1");
			builder.put(grammarAccess.getProgram_heading_blockAccess().getIdentifiersAssignment_2_1(), "rule__Program_heading_block__IdentifiersAssignment_2_1");
			builder.put(grammarAccess.getIdentifier_listAccess().getNamesAssignment_0(), "rule__Identifier_list__NamesAssignment_0");
			builder.put(grammarAccess.getIdentifier_listAccess().getNamesAssignment_1_1(), "rule__Identifier_list__NamesAssignment_1_1");
			builder.put(grammarAccess.getBlockAccess().getConstantpartAssignment_0_0(), "rule__Block__ConstantpartAssignment_0_0");
			builder.put(grammarAccess.getBlockAccess().getVariablepartAssignment_0_1(), "rule__Block__VariablepartAssignment_0_1");
			builder.put(grammarAccess.getBlockAccess().getStatementAssignment_1(), "rule__Block__StatementAssignment_1");
			builder.put(grammarAccess.getConstant_definition_partAccess().getConstantsAssignment_1_0(), "rule__Constant_definition_part__ConstantsAssignment_1_0");
			builder.put(grammarAccess.getConstant_definitionAccess().getNameAssignment_0(), "rule__Constant_definition__NameAssignment_0");
			builder.put(grammarAccess.getConstantAccess().getNamesAssignment_2(), "rule__Constant__NamesAssignment_2");
			builder.put(grammarAccess.getConstantAccess().getNamesAssignment_3_1(), "rule__Constant__NamesAssignment_3_1");
			builder.put(grammarAccess.getConstantAccess().getStringAssignment_4(), "rule__Constant__StringAssignment_4");
			builder.put(grammarAccess.getVariable_declaration_partAccess().getVariableAssignment_1(), "rule__Variable_declaration_part__VariableAssignment_1");
			builder.put(grammarAccess.getVariable_declaration_partAccess().getVariableAssignment_2_1(), "rule__Variable_declaration_part__VariableAssignment_2_1");
			builder.put(grammarAccess.getVariable_declarationAccess().getTypesAssignment_2(), "rule__Variable_declaration__TypesAssignment_2");
			builder.put(grammarAccess.getCompound_statementAccess().getSequenceAssignment_1(), "rule__Compound_statement__SequenceAssignment_1");
			builder.put(grammarAccess.getStatementsAccess().getStatementsAssignment_0(), "rule__Statements__StatementsAssignment_0");
			builder.put(grammarAccess.getStatementsAccess().getStatementsAssignment_1_1(), "rule__Statements__StatementsAssignment_1_1");
			builder.put(grammarAccess.getStatementAccess().getLabelAssignment_0_0(), "rule__Statement__LabelAssignment_0_0");
			builder.put(grammarAccess.getStatementAccess().getStatementAssignment_0_2(), "rule__Statement__StatementAssignment_0_2");
			builder.put(grammarAccess.getStatementAccess().getStatementAssignment_1_1(), "rule__Statement__StatementAssignment_1_1");
			builder.put(grammarAccess.getUnlabelled_statementAccess().getSimpleAssignment_0(), "rule__Unlabelled_statement__SimpleAssignment_0");
			builder.put(grammarAccess.getUnlabelled_statementAccess().getStructuredAssignment_1(), "rule__Unlabelled_statement__StructuredAssignment_1");
			builder.put(grammarAccess.getLabelAccess().getNumberAssignment(), "rule__Label__NumberAssignment");
			builder.put(grammarAccess.getSimple_statementAccess().getAssignmentAssignment_0(), "rule__Simple_statement__AssignmentAssignment_0");
			builder.put(grammarAccess.getSimple_statementAccess().getProcedureAssignment_1(), "rule__Simple_statement__ProcedureAssignment_1");
			builder.put(grammarAccess.getSimple_statementAccess().getGotoAssignment_2(), "rule__Simple_statement__GotoAssignment_2");
			builder.put(grammarAccess.getAssignment_statementAccess().getVariableAssignment_0(), "rule__Assignment_statement__VariableAssignment_0");
			builder.put(grammarAccess.getAssignment_statementAccess().getExpressionAssignment_2(), "rule__Assignment_statement__ExpressionAssignment_2");
			builder.put(grammarAccess.getVariableAccess().getNamesAssignment_0_0_1(), "rule__Variable__NamesAssignment_0_0_1");
			builder.put(grammarAccess.getVariableAccess().getNamesAssignment_0_1(), "rule__Variable__NamesAssignment_0_1");
			builder.put(grammarAccess.getVariableAccess().getExpressionAssignment_1_0_1(), "rule__Variable__ExpressionAssignment_1_0_1");
			builder.put(grammarAccess.getVariableAccess().getExpressionAssignment_1_0_2_1(), "rule__Variable__ExpressionAssignment_1_0_2_1");
			builder.put(grammarAccess.getVariableAccess().getExpressionAssignment_1_1_1(), "rule__Variable__ExpressionAssignment_1_1_1");
			builder.put(grammarAccess.getVariableAccess().getExpressionAssignment_1_1_2_1(), "rule__Variable__ExpressionAssignment_1_1_2_1");
			builder.put(grammarAccess.getVariableAccess().getNamesAssignment_1_2_1(), "rule__Variable__NamesAssignment_1_2_1");
			builder.put(grammarAccess.getExpressionAccess().getExpressionsAssignment_0(), "rule__Expression__ExpressionsAssignment_0");
			builder.put(grammarAccess.getExpressionAccess().getOperatorsAssignment_1_0(), "rule__Expression__OperatorsAssignment_1_0");
			builder.put(grammarAccess.getExpressionAccess().getExpressionsAssignment_1_1(), "rule__Expression__ExpressionsAssignment_1_1");
			builder.put(grammarAccess.getSimple_expressionAccess().getTermsAssignment_0(), "rule__Simple_expression__TermsAssignment_0");
			builder.put(grammarAccess.getSimple_expressionAccess().getOperatorsAssignment_1_0(), "rule__Simple_expression__OperatorsAssignment_1_0");
			builder.put(grammarAccess.getSimple_expressionAccess().getExpressionAssignment_1_1(), "rule__Simple_expression__ExpressionAssignment_1_1");
			builder.put(grammarAccess.getTermAccess().getFactorsAssignment_0(), "rule__Term__FactorsAssignment_0");
			builder.put(grammarAccess.getTermAccess().getOperatorsAssignment_1_0(), "rule__Term__OperatorsAssignment_1_0");
			builder.put(grammarAccess.getTermAccess().getTermsAssignment_1_1(), "rule__Term__TermsAssignment_1_1");
			builder.put(grammarAccess.getSigned_factorAccess().getOperatorsAssignment_0_0(), "rule__Signed_factor__OperatorsAssignment_0_0");
			builder.put(grammarAccess.getSigned_factorAccess().getOperatorsAssignment_0_1(), "rule__Signed_factor__OperatorsAssignment_0_1");
			builder.put(grammarAccess.getSigned_factorAccess().getFactorsAssignment_1(), "rule__Signed_factor__FactorsAssignment_1");
			builder.put(grammarAccess.getFactorAccess().getVariableAssignment_0(), "rule__Factor__VariableAssignment_0");
			builder.put(grammarAccess.getFactorAccess().getExpressionAssignment_1_1(), "rule__Factor__ExpressionAssignment_1_1");
			builder.put(grammarAccess.getFactorAccess().getConstantAssignment_2(), "rule__Factor__ConstantAssignment_2");
			builder.put(grammarAccess.getFactorAccess().getSetAssignment_3(), "rule__Factor__SetAssignment_3");
			builder.put(grammarAccess.getFactorAccess().getFactorAssignment_4_1(), "rule__Factor__FactorAssignment_4_1");
			builder.put(grammarAccess.getFactorAccess().getBooleanAssignment_5(), "rule__Factor__BooleanAssignment_5");
			builder.put(grammarAccess.getSetAccess().getElementsAssignment_0_1(), "rule__Set__ElementsAssignment_0_1");
			builder.put(grammarAccess.getSetAccess().getElementsAssignment_1_1(), "rule__Set__ElementsAssignment_1_1");
			builder.put(grammarAccess.getElementListAccess().getElementsAssignment_0(), "rule__ElementList__ElementsAssignment_0");
			builder.put(grammarAccess.getElementListAccess().getElementsAssignment_1_1(), "rule__ElementList__ElementsAssignment_1_1");
			builder.put(grammarAccess.getElementAccess().getExpressionsAssignment_0(), "rule__Element__ExpressionsAssignment_0");
			builder.put(grammarAccess.getElementAccess().getDotdotAssignment_1_0(), "rule__Element__DotdotAssignment_1_0");
			builder.put(grammarAccess.getElementAccess().getExpressionsAssignment_1_1(), "rule__Element__ExpressionsAssignment_1_1");
			builder.put(grammarAccess.getTypeAccess().getTypeAssignment(), "rule__Type__TypeAssignment");
			builder.put(grammarAccess.getSimple_typeAccess().getTypesAssignment_0(), "rule__Simple_type__TypesAssignment_0");
			builder.put(grammarAccess.getSimple_typeAccess().getTypesAssignment_1(), "rule__Simple_type__TypesAssignment_1");
			builder.put(grammarAccess.getSimple_typeAccess().getTypesAssignment_2(), "rule__Simple_type__TypesAssignment_2");
			builder.put(grammarAccess.getSimple_typeAccess().getTypesAssignment_3(), "rule__Simple_type__TypesAssignment_3");
			builder.put(grammarAccess.getSubrange_typeAccess().getConstantsAssignment_0(), "rule__Subrange_type__ConstantsAssignment_0");
			builder.put(grammarAccess.getSubrange_typeAccess().getConstantsAssignment_2(), "rule__Subrange_type__ConstantsAssignment_2");
			builder.put(grammarAccess.getType_identifierAccess().getNamesAssignment_0(), "rule__Type_identifier__NamesAssignment_0");
			builder.put(grammarAccess.getType_identifierAccess().getTypeAssignment_1_0(), "rule__Type_identifier__TypeAssignment_1_0");
			builder.put(grammarAccess.getType_identifierAccess().getTypeAssignment_1_1(), "rule__Type_identifier__TypeAssignment_1_1");
			builder.put(grammarAccess.getType_identifierAccess().getTypeAssignment_1_2(), "rule__Type_identifier__TypeAssignment_1_2");
			builder.put(grammarAccess.getType_identifierAccess().getTypeAssignment_1_3(), "rule__Type_identifier__TypeAssignment_1_3");
			builder.put(grammarAccess.getType_identifierAccess().getTypeAssignment_1_4(), "rule__Type_identifier__TypeAssignment_1_4");
			builder.put(grammarAccess.getString_typeAccess().getNamesAssignment_2_0(), "rule__String_type__NamesAssignment_2_0");
			builder.put(grammarAccess.getString_typeAccess().getNumberAssignment_2_1(), "rule__String_type__NumberAssignment_2_1");
			builder.put(grammarAccess.getUnsigned_constantAccess().getNumberAssignment_0(), "rule__Unsigned_constant__NumberAssignment_0");
			builder.put(grammarAccess.getUnsigned_constantAccess().getCharAssignment_1(), "rule__Unsigned_constant__CharAssignment_1");
			builder.put(grammarAccess.getUnsigned_constantAccess().getStringAssignment_2(), "rule__Unsigned_constant__StringAssignment_2");
			builder.put(grammarAccess.getUnsigned_constantAccess().getNilAssignment_3(), "rule__Unsigned_constant__NilAssignment_3");
			builder.put(grammarAccess.getUnsigned_numberAccess().getNumbersAssignment_0(), "rule__Unsigned_number__NumbersAssignment_0");
			builder.put(grammarAccess.getUnsigned_numberAccess().getNumbersAssignment_1(), "rule__Unsigned_number__NumbersAssignment_1");
			builder.put(grammarAccess.getConstant_chrAccess().getNumbersAssignment_2(), "rule__Constant_chr__NumbersAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PascalGrammarAccess grammarAccess;

	@Override
	protected InternalPascalParser createParser() {
		InternalPascalParser result = new InternalPascalParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PascalGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PascalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
