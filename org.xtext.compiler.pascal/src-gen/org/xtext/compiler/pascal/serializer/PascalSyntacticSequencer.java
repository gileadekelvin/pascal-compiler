/*
 * generated by Xtext 2.15.0
 */
package org.xtext.compiler.pascal.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.compiler.pascal.services.PascalGrammarAccess;

@SuppressWarnings("all")
public class PascalSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PascalGrammarAccess grammarAccess;
	protected AbstractElementAlias match_case_statement_SemicolonKeyword_5_q;
	protected AbstractElementAlias match_variable_CircumflexAccentKeyword_1_3_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PascalGrammarAccess) access;
		match_case_statement_SemicolonKeyword_5_q = new TokenAlias(false, true, grammarAccess.getCase_statementAccess().getSemicolonKeyword_5());
		match_variable_CircumflexAccentKeyword_1_3_a = new TokenAlias(true, true, grammarAccess.getVariableAccess().getCircumflexAccentKeyword_1_3());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getASSIGNRule())
			return getASSIGNToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDOTDOTRule())
			return getDOTDOTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEQUALRule())
			return getEQUALToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNOTRule())
			return getNOTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFunctionRule())
			return getfunctionToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getProcedureRule())
			return getprocedureToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSignRule())
			return getsignToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ASSIGN: 
	 * 	':='
	 * ;
	 */
	protected String getASSIGNToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":=";
	}
	
	/**
	 * terminal DOTDOT:
	 * 	'..'
	 * ;
	 */
	protected String getDOTDOTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "..";
	}
	
	/**
	 * terminal EQUAL: 
	 * 	'='
	 * ;
	 */
	protected String getEQUALToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * terminal NOT:
	 * 	('N'|'n') ('O'|'o') ('T'|'t')	
	 * ;
	 */
	protected String getNOTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "NOT";
	}
	
	/**
	 * function:
	 * 	'function'
	 * ;
	 */
	protected String getfunctionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "function";
	}
	
	/**
	 * procedure:
	 * 	'procedure'
	 * ;
	 */
	protected String getprocedureToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "procedure";
	}
	
	/**
	 * sign: 
	 * 	 PLUS
	 *    | MINUS
	 * ;
	 */
	protected String getsignToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_case_statement_SemicolonKeyword_5_q.equals(syntax))
				emit_case_statement_SemicolonKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_variable_CircumflexAccentKeyword_1_3_a.equals(syntax))
				emit_variable_CircumflexAccentKeyword_1_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     case_list+=case_list_element (ambiguity) 'else' case_statements=statements
	 *     case_list+=case_list_element (ambiguity) 'end' (rule end)
	 */
	protected void emit_case_statement_SemicolonKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '^'*
	 *
	 * This ambiguous syntax occurs at:
	 *     expression+=expression '.)' (ambiguity) '(.' expression+=expression
	 *     expression+=expression '.)' (ambiguity) '.' names_exp+=ID
	 *     expression+=expression '.)' (ambiguity) '[' indice+=expression
	 *     expression+=expression '.)' (ambiguity) (rule end)
	 *     indice+=expression ']' (ambiguity) '(.' expression+=expression
	 *     indice+=expression ']' (ambiguity) '.' names_exp+=ID
	 *     indice+=expression ']' (ambiguity) '[' indice+=expression
	 *     indice+=expression ']' (ambiguity) (rule end)
	 *     names_exp+=ID (ambiguity) '(.' expression+=expression
	 *     names_exp+=ID (ambiguity) '.' names_exp+=ID
	 *     names_exp+=ID (ambiguity) '[' indice+=expression
	 *     names_exp+=ID (ambiguity) (rule end)
	 *     variable_id=ID (ambiguity) '(.' expression+=expression
	 *     variable_id=ID (ambiguity) '.' names_exp+=ID
	 *     variable_id=ID (ambiguity) '[' indice+=expression
	 *     variable_id=ID (ambiguity) (rule end)
	 */
	protected void emit_variable_CircumflexAccentKeyword_1_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
