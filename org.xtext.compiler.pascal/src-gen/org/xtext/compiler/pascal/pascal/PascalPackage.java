/**
 * generated by Xtext 2.15.0
 */
package org.xtext.compiler.pascal.pascal;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

/**
 * <!-- begin-user-doc -->
 * The <b>Package</b> for the model.
 * It contains accessors for the meta objects to represent
 * <ul>
 *   <li>each class,</li>
 *   <li>each feature of each class,</li>
 *   <li>each enum,</li>
 *   <li>and each data type</li>
 * </ul>
 * <!-- end-user-doc -->
 * @see org.xtext.compiler.pascal.pascal.PascalFactory
 * @model kind="package"
 * @generated
 */
public interface PascalPackage extends EPackage
{
  /**
   * The package name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNAME = "pascal";

  /**
   * The package namespace URI.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_URI = "http://www.xtext.org/compiler/pascal/Pascal";

  /**
   * The package namespace name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_PREFIX = "pascal";

  /**
   * The singleton instance of the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  PascalPackage eINSTANCE = org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl.init();

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.pascalImpl <em>pascal</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.pascalImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getpascal()
   * @generated
   */
  int PASCAL = 0;

  /**
   * The feature id for the '<em><b>Program</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PASCAL__PROGRAM = 0;

  /**
   * The number of structural features of the '<em>pascal</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PASCAL_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.programImpl <em>program</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.programImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprogram()
   * @generated
   */
  int PROGRAM = 1;

  /**
   * The feature id for the '<em><b>Heading</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM__HEADING = 0;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM__BLOCK = 1;

  /**
   * The number of structural features of the '<em>program</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.program_heading_blockImpl <em>program heading block</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.program_heading_blockImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprogram_heading_block()
   * @generated
   */
  int PROGRAM_HEADING_BLOCK = 2;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM_HEADING_BLOCK__NAME = 0;

  /**
   * The feature id for the '<em><b>Identifiers</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM_HEADING_BLOCK__IDENTIFIERS = 1;

  /**
   * The number of structural features of the '<em>program heading block</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM_HEADING_BLOCK_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.variable_declarationImpl <em>variable declaration</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.variable_declarationImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getvariable_declaration()
   * @generated
   */
  int VARIABLE_DECLARATION = 9;

  /**
   * The number of structural features of the '<em>variable declaration</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE_DECLARATION_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.identifier_listImpl <em>identifier list</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.identifier_listImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getidentifier_list()
   * @generated
   */
  int IDENTIFIER_LIST = 3;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IDENTIFIER_LIST__TYPES = VARIABLE_DECLARATION_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IDENTIFIER_LIST__NAMES = VARIABLE_DECLARATION_FEATURE_COUNT + 1;

  /**
   * The number of structural features of the '<em>identifier list</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IDENTIFIER_LIST_FEATURE_COUNT = VARIABLE_DECLARATION_FEATURE_COUNT + 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.blockImpl <em>block</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.blockImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getblock()
   * @generated
   */
  int BLOCK = 4;

  /**
   * The feature id for the '<em><b>Constantpart</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BLOCK__CONSTANTPART = 0;

  /**
   * The feature id for the '<em><b>Variablepart</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BLOCK__VARIABLEPART = 1;

  /**
   * The feature id for the '<em><b>Procedure function part</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BLOCK__PROCEDURE_FUNCTION_PART = 2;

  /**
   * The feature id for the '<em><b>Statement</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BLOCK__STATEMENT = 3;

  /**
   * The number of structural features of the '<em>block</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BLOCK_FEATURE_COUNT = 4;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.constant_definition_partImpl <em>constant definition part</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.constant_definition_partImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconstant_definition_part()
   * @generated
   */
  int CONSTANT_DEFINITION_PART = 5;

  /**
   * The feature id for the '<em><b>Constants</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_DEFINITION_PART__CONSTANTS = 0;

  /**
   * The number of structural features of the '<em>constant definition part</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_DEFINITION_PART_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.constant_definitionImpl <em>constant definition</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.constant_definitionImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconstant_definition()
   * @generated
   */
  int CONSTANT_DEFINITION = 6;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_DEFINITION__NAME = 0;

  /**
   * The number of structural features of the '<em>constant definition</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_DEFINITION_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.constantImpl <em>constant</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.constantImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconstant()
   * @generated
   */
  int CONSTANT = 7;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT__NAME = CONSTANT_DEFINITION__NAME;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT__NAMES = CONSTANT_DEFINITION_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>String</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT__STRING = CONSTANT_DEFINITION_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Numbers</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT__NUMBERS = CONSTANT_DEFINITION_FEATURE_COUNT + 2;

  /**
   * The number of structural features of the '<em>constant</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_FEATURE_COUNT = CONSTANT_DEFINITION_FEATURE_COUNT + 3;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.variable_declaration_partImpl <em>variable declaration part</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.variable_declaration_partImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getvariable_declaration_part()
   * @generated
   */
  int VARIABLE_DECLARATION_PART = 8;

  /**
   * The feature id for the '<em><b>Variable</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE_DECLARATION_PART__VARIABLE = 0;

  /**
   * The number of structural features of the '<em>variable declaration part</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE_DECLARATION_PART_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.compound_statementImpl <em>compound statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.compound_statementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getcompound_statement()
   * @generated
   */
  int COMPOUND_STATEMENT = 10;

  /**
   * The feature id for the '<em><b>Sequence</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPOUND_STATEMENT__SEQUENCE = 0;

  /**
   * The number of structural features of the '<em>compound statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPOUND_STATEMENT_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.statementsImpl <em>statements</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.statementsImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getstatements()
   * @generated
   */
  int STATEMENTS = 11;

  /**
   * The feature id for the '<em><b>Statements</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENTS__STATEMENTS = 0;

  /**
   * The number of structural features of the '<em>statements</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENTS_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.statementImpl <em>statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.statementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getstatement()
   * @generated
   */
  int STATEMENT = 12;

  /**
   * The feature id for the '<em><b>Label</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT__LABEL = 0;

  /**
   * The feature id for the '<em><b>Statement</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT__STATEMENT = 1;

  /**
   * The number of structural features of the '<em>statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.unlabelled_statementImpl <em>unlabelled statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.unlabelled_statementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getunlabelled_statement()
   * @generated
   */
  int UNLABELLED_STATEMENT = 13;

  /**
   * The feature id for the '<em><b>Simple</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNLABELLED_STATEMENT__SIMPLE = 0;

  /**
   * The feature id for the '<em><b>Structured</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNLABELLED_STATEMENT__STRUCTURED = 1;

  /**
   * The number of structural features of the '<em>unlabelled statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNLABELLED_STATEMENT_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.labelImpl <em>label</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.labelImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getlabel()
   * @generated
   */
  int LABEL = 14;

  /**
   * The feature id for the '<em><b>Number</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LABEL__NUMBER = 0;

  /**
   * The number of structural features of the '<em>label</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LABEL_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.simple_statementImpl <em>simple statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.simple_statementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsimple_statement()
   * @generated
   */
  int SIMPLE_STATEMENT = 15;

  /**
   * The feature id for the '<em><b>Assignment</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_STATEMENT__ASSIGNMENT = 0;

  /**
   * The feature id for the '<em><b>Procedure</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_STATEMENT__PROCEDURE = 1;

  /**
   * The feature id for the '<em><b>Goto</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_STATEMENT__GOTO = 2;

  /**
   * The number of structural features of the '<em>simple statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_STATEMENT_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.assignment_statementImpl <em>assignment statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.assignment_statementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getassignment_statement()
   * @generated
   */
  int ASSIGNMENT_STATEMENT = 16;

  /**
   * The feature id for the '<em><b>Variable</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ASSIGNMENT_STATEMENT__VARIABLE = 0;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ASSIGNMENT_STATEMENT__EXPRESSION = 1;

  /**
   * The number of structural features of the '<em>assignment statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ASSIGNMENT_STATEMENT_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.variableImpl <em>variable</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.variableImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getvariable()
   * @generated
   */
  int VARIABLE = 17;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE__NAMES = 0;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE__EXPRESSION = 1;

  /**
   * The number of structural features of the '<em>variable</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.parameter_listImpl <em>parameter list</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.parameter_listImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getparameter_list()
   * @generated
   */
  int PARAMETER_LIST = 36;

  /**
   * The number of structural features of the '<em>parameter list</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PARAMETER_LIST_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.actual_parameterImpl <em>actual parameter</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.actual_parameterImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getactual_parameter()
   * @generated
   */
  int ACTUAL_PARAMETER = 37;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ACTUAL_PARAMETER__TYPES = PARAMETER_LIST_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>actual parameter</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ACTUAL_PARAMETER_FEATURE_COUNT = PARAMETER_LIST_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.expressionImpl <em>expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.expressionImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getexpression()
   * @generated
   */
  int EXPRESSION = 18;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__TYPES = ACTUAL_PARAMETER__TYPES;

  /**
   * The feature id for the '<em><b>Expressions</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__EXPRESSIONS = ACTUAL_PARAMETER_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Operators</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__OPERATORS = ACTUAL_PARAMETER_FEATURE_COUNT + 1;

  /**
   * The number of structural features of the '<em>expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_FEATURE_COUNT = ACTUAL_PARAMETER_FEATURE_COUNT + 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.simple_expressionImpl <em>simple expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.simple_expressionImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsimple_expression()
   * @generated
   */
  int SIMPLE_EXPRESSION = 19;

  /**
   * The feature id for the '<em><b>Terms</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_EXPRESSION__TERMS = 0;

  /**
   * The feature id for the '<em><b>Operators</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_EXPRESSION__OPERATORS = 1;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_EXPRESSION__EXPRESSION = 2;

  /**
   * The number of structural features of the '<em>simple expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_EXPRESSION_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.termImpl <em>term</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.termImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getterm()
   * @generated
   */
  int TERM = 20;

  /**
   * The feature id for the '<em><b>Factors</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TERM__FACTORS = 0;

  /**
   * The feature id for the '<em><b>Operators</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TERM__OPERATORS = 1;

  /**
   * The feature id for the '<em><b>Terms</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TERM__TERMS = 2;

  /**
   * The number of structural features of the '<em>term</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TERM_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.signed_factorImpl <em>signed factor</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.signed_factorImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsigned_factor()
   * @generated
   */
  int SIGNED_FACTOR = 21;

  /**
   * The feature id for the '<em><b>Operators</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIGNED_FACTOR__OPERATORS = 0;

  /**
   * The feature id for the '<em><b>Factors</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIGNED_FACTOR__FACTORS = 1;

  /**
   * The number of structural features of the '<em>signed factor</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIGNED_FACTOR_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.factorImpl <em>factor</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.factorImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfactor()
   * @generated
   */
  int FACTOR = 22;

  /**
   * The feature id for the '<em><b>Variable</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__VARIABLE = 0;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__EXPRESSION = 1;

  /**
   * The feature id for the '<em><b>Constant</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__CONSTANT = 2;

  /**
   * The feature id for the '<em><b>Set</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__SET = 3;

  /**
   * The feature id for the '<em><b>Factor</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__FACTOR = 4;

  /**
   * The feature id for the '<em><b>Boolean</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__BOOLEAN = 5;

  /**
   * The number of structural features of the '<em>factor</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR_FEATURE_COUNT = 6;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.setImpl <em>set</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.setImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getset()
   * @generated
   */
  int SET = 23;

  /**
   * The feature id for the '<em><b>Elements</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SET__ELEMENTS = 0;

  /**
   * The number of structural features of the '<em>set</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SET_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.elementListImpl <em>element List</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.elementListImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getelementList()
   * @generated
   */
  int ELEMENT_LIST = 24;

  /**
   * The feature id for the '<em><b>Elements</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ELEMENT_LIST__ELEMENTS = 0;

  /**
   * The number of structural features of the '<em>element List</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ELEMENT_LIST_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.elementImpl <em>element</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.elementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getelement()
   * @generated
   */
  int ELEMENT = 25;

  /**
   * The feature id for the '<em><b>Expressions</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ELEMENT__EXPRESSIONS = 0;

  /**
   * The feature id for the '<em><b>Dotdot</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ELEMENT__DOTDOT = 1;

  /**
   * The number of structural features of the '<em>element</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ELEMENT_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.type_definitionImpl <em>type definition</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.type_definitionImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype_definition()
   * @generated
   */
  int TYPE_DEFINITION = 41;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_DEFINITION__NAMES = 0;

  /**
   * The number of structural features of the '<em>type definition</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_DEFINITION_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.typeImpl <em>type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype()
   * @generated
   */
  int TYPE = 26;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE__NAMES = TYPE_DEFINITION__NAMES;

  /**
   * The feature id for the '<em><b>Type</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE__TYPE = TYPE_DEFINITION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_FEATURE_COUNT = TYPE_DEFINITION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.simple_typeImpl <em>simple type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.simple_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsimple_type()
   * @generated
   */
  int SIMPLE_TYPE = 27;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_TYPE__TYPES = 0;

  /**
   * The number of structural features of the '<em>simple type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_TYPE_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.scalar_typeImpl <em>scalar type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.scalar_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getscalar_type()
   * @generated
   */
  int SCALAR_TYPE = 28;

  /**
   * The number of structural features of the '<em>scalar type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SCALAR_TYPE_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.subrange_typeImpl <em>subrange type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.subrange_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsubrange_type()
   * @generated
   */
  int SUBRANGE_TYPE = 29;

  /**
   * The feature id for the '<em><b>Constants</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SUBRANGE_TYPE__CONSTANTS = 0;

  /**
   * The number of structural features of the '<em>subrange type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SUBRANGE_TYPE_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.result_typeImpl <em>result type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.result_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getresult_type()
   * @generated
   */
  int RESULT_TYPE = 49;

  /**
   * The number of structural features of the '<em>result type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int RESULT_TYPE_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.type_identifierImpl <em>type identifier</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.type_identifierImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype_identifier()
   * @generated
   */
  int TYPE_IDENTIFIER = 30;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_IDENTIFIER__NAMES = RESULT_TYPE_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Type</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_IDENTIFIER__TYPE = RESULT_TYPE_FEATURE_COUNT + 1;

  /**
   * The number of structural features of the '<em>type identifier</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_IDENTIFIER_FEATURE_COUNT = RESULT_TYPE_FEATURE_COUNT + 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.string_typeImpl <em>string type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.string_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getstring_type()
   * @generated
   */
  int STRING_TYPE = 31;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STRING_TYPE__NAMES = 0;

  /**
   * The feature id for the '<em><b>Number</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STRING_TYPE__NUMBER = 1;

  /**
   * The number of structural features of the '<em>string type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STRING_TYPE_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.unsigned_constantImpl <em>unsigned constant</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.unsigned_constantImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getunsigned_constant()
   * @generated
   */
  int UNSIGNED_CONSTANT = 32;

  /**
   * The feature id for the '<em><b>Number</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_CONSTANT__NUMBER = 0;

  /**
   * The feature id for the '<em><b>Char</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_CONSTANT__CHAR = 1;

  /**
   * The feature id for the '<em><b>String</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_CONSTANT__STRING = 2;

  /**
   * The feature id for the '<em><b>Nil</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_CONSTANT__NIL = 3;

  /**
   * The number of structural features of the '<em>unsigned constant</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_CONSTANT_FEATURE_COUNT = 4;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.unsigned_numberImpl <em>unsigned number</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.unsigned_numberImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getunsigned_number()
   * @generated
   */
  int UNSIGNED_NUMBER = 33;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_NUMBER__NAME = CONSTANT__NAME;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_NUMBER__NAMES = CONSTANT__NAMES;

  /**
   * The feature id for the '<em><b>String</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_NUMBER__STRING = CONSTANT__STRING;

  /**
   * The feature id for the '<em><b>Numbers</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_NUMBER__NUMBERS = CONSTANT__NUMBERS;

  /**
   * The number of structural features of the '<em>unsigned number</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_NUMBER_FEATURE_COUNT = CONSTANT_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.constant_chrImpl <em>constant chr</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.constant_chrImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconstant_chr()
   * @generated
   */
  int CONSTANT_CHR = 34;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_CHR__NAME = CONSTANT__NAME;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_CHR__NAMES = CONSTANT__NAMES;

  /**
   * The feature id for the '<em><b>String</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_CHR__STRING = CONSTANT__STRING;

  /**
   * The feature id for the '<em><b>Numbers</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_CHR__NUMBERS = CONSTANT__NUMBERS;

  /**
   * The number of structural features of the '<em>constant chr</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_CHR_FEATURE_COUNT = CONSTANT_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_statementImpl <em>procedure statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.procedure_statementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_statement()
   * @generated
   */
  int PROCEDURE_STATEMENT = 35;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_STATEMENT__NAMES = 0;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_STATEMENT__TYPES = 1;

  /**
   * The number of structural features of the '<em>procedure statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_STATEMENT_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_and_function_declaration_partImpl <em>procedure and function declaration part</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.procedure_and_function_declaration_partImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_and_function_declaration_part()
   * @generated
   */
  int PROCEDURE_AND_FUNCTION_DECLARATION_PART = 38;

  /**
   * The number of structural features of the '<em>procedure and function declaration part</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_AND_FUNCTION_DECLARATION_PART_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_or_function_declarationImpl <em>procedure or function declaration</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.procedure_or_function_declarationImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_or_function_declaration()
   * @generated
   */
  int PROCEDURE_OR_FUNCTION_DECLARATION = 39;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_OR_FUNCTION_DECLARATION__NAMES = PROCEDURE_AND_FUNCTION_DECLARATION_PART_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_OR_FUNCTION_DECLARATION__BLOCK = PROCEDURE_AND_FUNCTION_DECLARATION_PART_FEATURE_COUNT + 1;

  /**
   * The number of structural features of the '<em>procedure or function declaration</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_OR_FUNCTION_DECLARATION_FEATURE_COUNT = PROCEDURE_AND_FUNCTION_DECLARATION_PART_FEATURE_COUNT + 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_declarationImpl <em>procedure declaration</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.procedure_declarationImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_declaration()
   * @generated
   */
  int PROCEDURE_DECLARATION = 40;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_DECLARATION__NAMES = PROCEDURE_OR_FUNCTION_DECLARATION__NAMES;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_DECLARATION__BLOCK = PROCEDURE_OR_FUNCTION_DECLARATION__BLOCK;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_DECLARATION__TYPES = PROCEDURE_OR_FUNCTION_DECLARATION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>procedure declaration</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_DECLARATION_FEATURE_COUNT = PROCEDURE_OR_FUNCTION_DECLARATION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_typeImpl <em>procedure type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.procedure_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_type()
   * @generated
   */
  int PROCEDURE_TYPE = 42;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_TYPE__NAMES = TYPE_DEFINITION__NAMES;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_TYPE__TYPES = TYPE_DEFINITION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>procedure type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_TYPE_FEATURE_COUNT = TYPE_DEFINITION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.function_declarationImpl <em>function declaration</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.function_declarationImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfunction_declaration()
   * @generated
   */
  int FUNCTION_DECLARATION = 43;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DECLARATION__NAMES = PROCEDURE_OR_FUNCTION_DECLARATION__NAMES;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DECLARATION__BLOCK = PROCEDURE_OR_FUNCTION_DECLARATION__BLOCK;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DECLARATION__TYPES = PROCEDURE_OR_FUNCTION_DECLARATION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>function declaration</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DECLARATION_FEATURE_COUNT = PROCEDURE_OR_FUNCTION_DECLARATION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.function_typeImpl <em>function type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.function_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfunction_type()
   * @generated
   */
  int FUNCTION_TYPE = 44;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_TYPE__NAMES = TYPE_DEFINITION__NAMES;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_TYPE__TYPES = TYPE_DEFINITION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>function type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_TYPE_FEATURE_COUNT = TYPE_DEFINITION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.function_designatorImpl <em>function designator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.function_designatorImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfunction_designator()
   * @generated
   */
  int FUNCTION_DESIGNATOR = 45;

  /**
   * The feature id for the '<em><b>Variable</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DESIGNATOR__VARIABLE = FACTOR__VARIABLE;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DESIGNATOR__EXPRESSION = FACTOR__EXPRESSION;

  /**
   * The feature id for the '<em><b>Constant</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DESIGNATOR__CONSTANT = FACTOR__CONSTANT;

  /**
   * The feature id for the '<em><b>Set</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DESIGNATOR__SET = FACTOR__SET;

  /**
   * The feature id for the '<em><b>Factor</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DESIGNATOR__FACTOR = FACTOR__FACTOR;

  /**
   * The feature id for the '<em><b>Boolean</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DESIGNATOR__BOOLEAN = FACTOR__BOOLEAN;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DESIGNATOR__NAMES = FACTOR_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DESIGNATOR__TYPES = FACTOR_FEATURE_COUNT + 1;

  /**
   * The number of structural features of the '<em>function designator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DESIGNATOR_FEATURE_COUNT = FACTOR_FEATURE_COUNT + 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.formal_parameter_listImpl <em>formal parameter list</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.formal_parameter_listImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getformal_parameter_list()
   * @generated
   */
  int FORMAL_PARAMETER_LIST = 46;

  /**
   * The number of structural features of the '<em>formal parameter list</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FORMAL_PARAMETER_LIST_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.formal_parameter_sectionImpl <em>formal parameter section</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.formal_parameter_sectionImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getformal_parameter_section()
   * @generated
   */
  int FORMAL_PARAMETER_SECTION = 47;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FORMAL_PARAMETER_SECTION__TYPES = FORMAL_PARAMETER_LIST_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>formal parameter section</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FORMAL_PARAMETER_SECTION_FEATURE_COUNT = FORMAL_PARAMETER_LIST_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.parameter_groupImpl <em>parameter group</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.parameter_groupImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getparameter_group()
   * @generated
   */
  int PARAMETER_GROUP = 48;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PARAMETER_GROUP__TYPES = FORMAL_PARAMETER_SECTION__TYPES;

  /**
   * The number of structural features of the '<em>parameter group</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PARAMETER_GROUP_FEATURE_COUNT = FORMAL_PARAMETER_SECTION_FEATURE_COUNT + 0;


  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.pascal <em>pascal</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>pascal</em>'.
   * @see org.xtext.compiler.pascal.pascal.pascal
   * @generated
   */
  EClass getpascal();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.pascal#getProgram <em>Program</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Program</em>'.
   * @see org.xtext.compiler.pascal.pascal.pascal#getProgram()
   * @see #getpascal()
   * @generated
   */
  EReference getpascal_Program();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.program <em>program</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>program</em>'.
   * @see org.xtext.compiler.pascal.pascal.program
   * @generated
   */
  EClass getprogram();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.program#getHeading <em>Heading</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Heading</em>'.
   * @see org.xtext.compiler.pascal.pascal.program#getHeading()
   * @see #getprogram()
   * @generated
   */
  EReference getprogram_Heading();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.program#getBlock <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Block</em>'.
   * @see org.xtext.compiler.pascal.pascal.program#getBlock()
   * @see #getprogram()
   * @generated
   */
  EReference getprogram_Block();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.program_heading_block <em>program heading block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>program heading block</em>'.
   * @see org.xtext.compiler.pascal.pascal.program_heading_block
   * @generated
   */
  EClass getprogram_heading_block();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.program_heading_block#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see org.xtext.compiler.pascal.pascal.program_heading_block#getName()
   * @see #getprogram_heading_block()
   * @generated
   */
  EAttribute getprogram_heading_block_Name();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.program_heading_block#getIdentifiers <em>Identifiers</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Identifiers</em>'.
   * @see org.xtext.compiler.pascal.pascal.program_heading_block#getIdentifiers()
   * @see #getprogram_heading_block()
   * @generated
   */
  EReference getprogram_heading_block_Identifiers();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.identifier_list <em>identifier list</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>identifier list</em>'.
   * @see org.xtext.compiler.pascal.pascal.identifier_list
   * @generated
   */
  EClass getidentifier_list();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.identifier_list#getNames <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Names</em>'.
   * @see org.xtext.compiler.pascal.pascal.identifier_list#getNames()
   * @see #getidentifier_list()
   * @generated
   */
  EAttribute getidentifier_list_Names();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.block <em>block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>block</em>'.
   * @see org.xtext.compiler.pascal.pascal.block
   * @generated
   */
  EClass getblock();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.block#getConstantpart <em>Constantpart</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Constantpart</em>'.
   * @see org.xtext.compiler.pascal.pascal.block#getConstantpart()
   * @see #getblock()
   * @generated
   */
  EReference getblock_Constantpart();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.block#getVariablepart <em>Variablepart</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Variablepart</em>'.
   * @see org.xtext.compiler.pascal.pascal.block#getVariablepart()
   * @see #getblock()
   * @generated
   */
  EReference getblock_Variablepart();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.block#getProcedure_function_part <em>Procedure function part</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Procedure function part</em>'.
   * @see org.xtext.compiler.pascal.pascal.block#getProcedure_function_part()
   * @see #getblock()
   * @generated
   */
  EReference getblock_Procedure_function_part();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.block#getStatement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.block#getStatement()
   * @see #getblock()
   * @generated
   */
  EReference getblock_Statement();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.constant_definition_part <em>constant definition part</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>constant definition part</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant_definition_part
   * @generated
   */
  EClass getconstant_definition_part();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.constant_definition_part#getConstants <em>Constants</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Constants</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant_definition_part#getConstants()
   * @see #getconstant_definition_part()
   * @generated
   */
  EReference getconstant_definition_part_Constants();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.constant_definition <em>constant definition</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>constant definition</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant_definition
   * @generated
   */
  EClass getconstant_definition();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.constant_definition#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant_definition#getName()
   * @see #getconstant_definition()
   * @generated
   */
  EAttribute getconstant_definition_Name();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.constant <em>constant</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>constant</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant
   * @generated
   */
  EClass getconstant();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.constant#getNames <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Names</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant#getNames()
   * @see #getconstant()
   * @generated
   */
  EAttribute getconstant_Names();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.constant#getString <em>String</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>String</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant#getString()
   * @see #getconstant()
   * @generated
   */
  EAttribute getconstant_String();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.constant#getNumbers <em>Numbers</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Numbers</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant#getNumbers()
   * @see #getconstant()
   * @generated
   */
  EAttribute getconstant_Numbers();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.variable_declaration_part <em>variable declaration part</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>variable declaration part</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable_declaration_part
   * @generated
   */
  EClass getvariable_declaration_part();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.variable_declaration_part#getVariable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Variable</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable_declaration_part#getVariable()
   * @see #getvariable_declaration_part()
   * @generated
   */
  EReference getvariable_declaration_part_Variable();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.variable_declaration <em>variable declaration</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>variable declaration</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable_declaration
   * @generated
   */
  EClass getvariable_declaration();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.compound_statement <em>compound statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>compound statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.compound_statement
   * @generated
   */
  EClass getcompound_statement();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.compound_statement#getSequence <em>Sequence</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Sequence</em>'.
   * @see org.xtext.compiler.pascal.pascal.compound_statement#getSequence()
   * @see #getcompound_statement()
   * @generated
   */
  EReference getcompound_statement_Sequence();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.statements <em>statements</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>statements</em>'.
   * @see org.xtext.compiler.pascal.pascal.statements
   * @generated
   */
  EClass getstatements();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.statements#getStatements <em>Statements</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Statements</em>'.
   * @see org.xtext.compiler.pascal.pascal.statements#getStatements()
   * @see #getstatements()
   * @generated
   */
  EReference getstatements_Statements();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.statement <em>statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.statement
   * @generated
   */
  EClass getstatement();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.statement#getLabel <em>Label</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Label</em>'.
   * @see org.xtext.compiler.pascal.pascal.statement#getLabel()
   * @see #getstatement()
   * @generated
   */
  EReference getstatement_Label();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.statement#getStatement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.statement#getStatement()
   * @see #getstatement()
   * @generated
   */
  EReference getstatement_Statement();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.unlabelled_statement <em>unlabelled statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>unlabelled statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.unlabelled_statement
   * @generated
   */
  EClass getunlabelled_statement();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.unlabelled_statement#getSimple <em>Simple</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Simple</em>'.
   * @see org.xtext.compiler.pascal.pascal.unlabelled_statement#getSimple()
   * @see #getunlabelled_statement()
   * @generated
   */
  EReference getunlabelled_statement_Simple();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.unlabelled_statement#getStructured <em>Structured</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Structured</em>'.
   * @see org.xtext.compiler.pascal.pascal.unlabelled_statement#getStructured()
   * @see #getunlabelled_statement()
   * @generated
   */
  EAttribute getunlabelled_statement_Structured();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.label <em>label</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>label</em>'.
   * @see org.xtext.compiler.pascal.pascal.label
   * @generated
   */
  EClass getlabel();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.label#getNumber <em>Number</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Number</em>'.
   * @see org.xtext.compiler.pascal.pascal.label#getNumber()
   * @see #getlabel()
   * @generated
   */
  EAttribute getlabel_Number();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.simple_statement <em>simple statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>simple statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_statement
   * @generated
   */
  EClass getsimple_statement();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.simple_statement#getAssignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Assignment</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_statement#getAssignment()
   * @see #getsimple_statement()
   * @generated
   */
  EReference getsimple_statement_Assignment();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.simple_statement#getProcedure <em>Procedure</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Procedure</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_statement#getProcedure()
   * @see #getsimple_statement()
   * @generated
   */
  EReference getsimple_statement_Procedure();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.simple_statement#getGoto <em>Goto</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Goto</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_statement#getGoto()
   * @see #getsimple_statement()
   * @generated
   */
  EAttribute getsimple_statement_Goto();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.assignment_statement <em>assignment statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>assignment statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.assignment_statement
   * @generated
   */
  EClass getassignment_statement();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.assignment_statement#getVariable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Variable</em>'.
   * @see org.xtext.compiler.pascal.pascal.assignment_statement#getVariable()
   * @see #getassignment_statement()
   * @generated
   */
  EReference getassignment_statement_Variable();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.assignment_statement#getExpression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expression</em>'.
   * @see org.xtext.compiler.pascal.pascal.assignment_statement#getExpression()
   * @see #getassignment_statement()
   * @generated
   */
  EReference getassignment_statement_Expression();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.variable <em>variable</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>variable</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable
   * @generated
   */
  EClass getvariable();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.variable#getNames <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Names</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable#getNames()
   * @see #getvariable()
   * @generated
   */
  EAttribute getvariable_Names();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.variable#getExpression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Expression</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable#getExpression()
   * @see #getvariable()
   * @generated
   */
  EReference getvariable_Expression();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.expression <em>expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>expression</em>'.
   * @see org.xtext.compiler.pascal.pascal.expression
   * @generated
   */
  EClass getexpression();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.expression#getExpressions <em>Expressions</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Expressions</em>'.
   * @see org.xtext.compiler.pascal.pascal.expression#getExpressions()
   * @see #getexpression()
   * @generated
   */
  EReference getexpression_Expressions();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.expression#getOperators <em>Operators</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Operators</em>'.
   * @see org.xtext.compiler.pascal.pascal.expression#getOperators()
   * @see #getexpression()
   * @generated
   */
  EAttribute getexpression_Operators();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.simple_expression <em>simple expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>simple expression</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_expression
   * @generated
   */
  EClass getsimple_expression();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.simple_expression#getTerms <em>Terms</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Terms</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_expression#getTerms()
   * @see #getsimple_expression()
   * @generated
   */
  EReference getsimple_expression_Terms();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.simple_expression#getOperators <em>Operators</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Operators</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_expression#getOperators()
   * @see #getsimple_expression()
   * @generated
   */
  EAttribute getsimple_expression_Operators();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.simple_expression#getExpression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Expression</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_expression#getExpression()
   * @see #getsimple_expression()
   * @generated
   */
  EReference getsimple_expression_Expression();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.term <em>term</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>term</em>'.
   * @see org.xtext.compiler.pascal.pascal.term
   * @generated
   */
  EClass getterm();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.term#getFactors <em>Factors</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Factors</em>'.
   * @see org.xtext.compiler.pascal.pascal.term#getFactors()
   * @see #getterm()
   * @generated
   */
  EReference getterm_Factors();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.term#getOperators <em>Operators</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Operators</em>'.
   * @see org.xtext.compiler.pascal.pascal.term#getOperators()
   * @see #getterm()
   * @generated
   */
  EAttribute getterm_Operators();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.term#getTerms <em>Terms</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Terms</em>'.
   * @see org.xtext.compiler.pascal.pascal.term#getTerms()
   * @see #getterm()
   * @generated
   */
  EReference getterm_Terms();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.signed_factor <em>signed factor</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>signed factor</em>'.
   * @see org.xtext.compiler.pascal.pascal.signed_factor
   * @generated
   */
  EClass getsigned_factor();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.signed_factor#getOperators <em>Operators</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Operators</em>'.
   * @see org.xtext.compiler.pascal.pascal.signed_factor#getOperators()
   * @see #getsigned_factor()
   * @generated
   */
  EAttribute getsigned_factor_Operators();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.signed_factor#getFactors <em>Factors</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Factors</em>'.
   * @see org.xtext.compiler.pascal.pascal.signed_factor#getFactors()
   * @see #getsigned_factor()
   * @generated
   */
  EReference getsigned_factor_Factors();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.factor <em>factor</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>factor</em>'.
   * @see org.xtext.compiler.pascal.pascal.factor
   * @generated
   */
  EClass getfactor();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.factor#getVariable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Variable</em>'.
   * @see org.xtext.compiler.pascal.pascal.factor#getVariable()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Variable();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.factor#getExpression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expression</em>'.
   * @see org.xtext.compiler.pascal.pascal.factor#getExpression()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Expression();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.factor#getConstant <em>Constant</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Constant</em>'.
   * @see org.xtext.compiler.pascal.pascal.factor#getConstant()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Constant();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.factor#getSet <em>Set</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Set</em>'.
   * @see org.xtext.compiler.pascal.pascal.factor#getSet()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Set();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.factor#getFactor <em>Factor</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Factor</em>'.
   * @see org.xtext.compiler.pascal.pascal.factor#getFactor()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Factor();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.factor#getBoolean <em>Boolean</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Boolean</em>'.
   * @see org.xtext.compiler.pascal.pascal.factor#getBoolean()
   * @see #getfactor()
   * @generated
   */
  EAttribute getfactor_Boolean();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.set <em>set</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>set</em>'.
   * @see org.xtext.compiler.pascal.pascal.set
   * @generated
   */
  EClass getset();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.set#getElements <em>Elements</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Elements</em>'.
   * @see org.xtext.compiler.pascal.pascal.set#getElements()
   * @see #getset()
   * @generated
   */
  EReference getset_Elements();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.elementList <em>element List</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>element List</em>'.
   * @see org.xtext.compiler.pascal.pascal.elementList
   * @generated
   */
  EClass getelementList();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.elementList#getElements <em>Elements</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Elements</em>'.
   * @see org.xtext.compiler.pascal.pascal.elementList#getElements()
   * @see #getelementList()
   * @generated
   */
  EReference getelementList_Elements();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.element <em>element</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>element</em>'.
   * @see org.xtext.compiler.pascal.pascal.element
   * @generated
   */
  EClass getelement();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.element#getExpressions <em>Expressions</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Expressions</em>'.
   * @see org.xtext.compiler.pascal.pascal.element#getExpressions()
   * @see #getelement()
   * @generated
   */
  EReference getelement_Expressions();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.element#getDotdot <em>Dotdot</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Dotdot</em>'.
   * @see org.xtext.compiler.pascal.pascal.element#getDotdot()
   * @see #getelement()
   * @generated
   */
  EAttribute getelement_Dotdot();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.type <em>type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>type</em>'.
   * @see org.xtext.compiler.pascal.pascal.type
   * @generated
   */
  EClass gettype();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.type#getType <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Type</em>'.
   * @see org.xtext.compiler.pascal.pascal.type#getType()
   * @see #gettype()
   * @generated
   */
  EReference gettype_Type();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.simple_type <em>simple type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>simple type</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_type
   * @generated
   */
  EClass getsimple_type();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.simple_type#getTypes <em>Types</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Types</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_type#getTypes()
   * @see #getsimple_type()
   * @generated
   */
  EReference getsimple_type_Types();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.scalar_type <em>scalar type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>scalar type</em>'.
   * @see org.xtext.compiler.pascal.pascal.scalar_type
   * @generated
   */
  EClass getscalar_type();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.subrange_type <em>subrange type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>subrange type</em>'.
   * @see org.xtext.compiler.pascal.pascal.subrange_type
   * @generated
   */
  EClass getsubrange_type();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.subrange_type#getConstants <em>Constants</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Constants</em>'.
   * @see org.xtext.compiler.pascal.pascal.subrange_type#getConstants()
   * @see #getsubrange_type()
   * @generated
   */
  EReference getsubrange_type_Constants();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.type_identifier <em>type identifier</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>type identifier</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_identifier
   * @generated
   */
  EClass gettype_identifier();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.type_identifier#getNames <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Names</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_identifier#getNames()
   * @see #gettype_identifier()
   * @generated
   */
  EAttribute gettype_identifier_Names();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.type_identifier#getType <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Type</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_identifier#getType()
   * @see #gettype_identifier()
   * @generated
   */
  EAttribute gettype_identifier_Type();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.string_type <em>string type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>string type</em>'.
   * @see org.xtext.compiler.pascal.pascal.string_type
   * @generated
   */
  EClass getstring_type();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.string_type#getNames <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Names</em>'.
   * @see org.xtext.compiler.pascal.pascal.string_type#getNames()
   * @see #getstring_type()
   * @generated
   */
  EAttribute getstring_type_Names();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.string_type#getNumber <em>Number</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Number</em>'.
   * @see org.xtext.compiler.pascal.pascal.string_type#getNumber()
   * @see #getstring_type()
   * @generated
   */
  EReference getstring_type_Number();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.unsigned_constant <em>unsigned constant</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>unsigned constant</em>'.
   * @see org.xtext.compiler.pascal.pascal.unsigned_constant
   * @generated
   */
  EClass getunsigned_constant();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.unsigned_constant#getNumber <em>Number</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Number</em>'.
   * @see org.xtext.compiler.pascal.pascal.unsigned_constant#getNumber()
   * @see #getunsigned_constant()
   * @generated
   */
  EReference getunsigned_constant_Number();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.unsigned_constant#getChar <em>Char</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Char</em>'.
   * @see org.xtext.compiler.pascal.pascal.unsigned_constant#getChar()
   * @see #getunsigned_constant()
   * @generated
   */
  EReference getunsigned_constant_Char();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.unsigned_constant#getString <em>String</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>String</em>'.
   * @see org.xtext.compiler.pascal.pascal.unsigned_constant#getString()
   * @see #getunsigned_constant()
   * @generated
   */
  EAttribute getunsigned_constant_String();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.unsigned_constant#getNil <em>Nil</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Nil</em>'.
   * @see org.xtext.compiler.pascal.pascal.unsigned_constant#getNil()
   * @see #getunsigned_constant()
   * @generated
   */
  EAttribute getunsigned_constant_Nil();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.unsigned_number <em>unsigned number</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>unsigned number</em>'.
   * @see org.xtext.compiler.pascal.pascal.unsigned_number
   * @generated
   */
  EClass getunsigned_number();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.constant_chr <em>constant chr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>constant chr</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant_chr
   * @generated
   */
  EClass getconstant_chr();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.procedure_statement <em>procedure statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>procedure statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_statement
   * @generated
   */
  EClass getprocedure_statement();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.procedure_statement#getNames <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Names</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_statement#getNames()
   * @see #getprocedure_statement()
   * @generated
   */
  EAttribute getprocedure_statement_Names();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.procedure_statement#getTypes <em>Types</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Types</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_statement#getTypes()
   * @see #getprocedure_statement()
   * @generated
   */
  EReference getprocedure_statement_Types();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.parameter_list <em>parameter list</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>parameter list</em>'.
   * @see org.xtext.compiler.pascal.pascal.parameter_list
   * @generated
   */
  EClass getparameter_list();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.actual_parameter <em>actual parameter</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>actual parameter</em>'.
   * @see org.xtext.compiler.pascal.pascal.actual_parameter
   * @generated
   */
  EClass getactual_parameter();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.actual_parameter#getTypes <em>Types</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Types</em>'.
   * @see org.xtext.compiler.pascal.pascal.actual_parameter#getTypes()
   * @see #getactual_parameter()
   * @generated
   */
  EReference getactual_parameter_Types();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.procedure_and_function_declaration_part <em>procedure and function declaration part</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>procedure and function declaration part</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_and_function_declaration_part
   * @generated
   */
  EClass getprocedure_and_function_declaration_part();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.procedure_or_function_declaration <em>procedure or function declaration</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>procedure or function declaration</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_or_function_declaration
   * @generated
   */
  EClass getprocedure_or_function_declaration();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.procedure_or_function_declaration#getNames <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Names</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_or_function_declaration#getNames()
   * @see #getprocedure_or_function_declaration()
   * @generated
   */
  EAttribute getprocedure_or_function_declaration_Names();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.procedure_or_function_declaration#getBlock <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Block</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_or_function_declaration#getBlock()
   * @see #getprocedure_or_function_declaration()
   * @generated
   */
  EReference getprocedure_or_function_declaration_Block();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.procedure_declaration <em>procedure declaration</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>procedure declaration</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_declaration
   * @generated
   */
  EClass getprocedure_declaration();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.procedure_declaration#getTypes <em>Types</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Types</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_declaration#getTypes()
   * @see #getprocedure_declaration()
   * @generated
   */
  EReference getprocedure_declaration_Types();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.type_definition <em>type definition</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>type definition</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_definition
   * @generated
   */
  EClass gettype_definition();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.type_definition#getNames <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Names</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_definition#getNames()
   * @see #gettype_definition()
   * @generated
   */
  EAttribute gettype_definition_Names();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.procedure_type <em>procedure type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>procedure type</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_type
   * @generated
   */
  EClass getprocedure_type();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.procedure_type#getTypes <em>Types</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Types</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_type#getTypes()
   * @see #getprocedure_type()
   * @generated
   */
  EReference getprocedure_type_Types();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.function_declaration <em>function declaration</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>function declaration</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_declaration
   * @generated
   */
  EClass getfunction_declaration();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.function_declaration#getTypes <em>Types</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Types</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_declaration#getTypes()
   * @see #getfunction_declaration()
   * @generated
   */
  EReference getfunction_declaration_Types();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.function_type <em>function type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>function type</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_type
   * @generated
   */
  EClass getfunction_type();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.function_type#getTypes <em>Types</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Types</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_type#getTypes()
   * @see #getfunction_type()
   * @generated
   */
  EReference getfunction_type_Types();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.function_designator <em>function designator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>function designator</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_designator
   * @generated
   */
  EClass getfunction_designator();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.function_designator#getNames <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Names</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_designator#getNames()
   * @see #getfunction_designator()
   * @generated
   */
  EAttribute getfunction_designator_Names();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.function_designator#getTypes <em>Types</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Types</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_designator#getTypes()
   * @see #getfunction_designator()
   * @generated
   */
  EReference getfunction_designator_Types();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.formal_parameter_list <em>formal parameter list</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>formal parameter list</em>'.
   * @see org.xtext.compiler.pascal.pascal.formal_parameter_list
   * @generated
   */
  EClass getformal_parameter_list();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.formal_parameter_section <em>formal parameter section</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>formal parameter section</em>'.
   * @see org.xtext.compiler.pascal.pascal.formal_parameter_section
   * @generated
   */
  EClass getformal_parameter_section();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.formal_parameter_section#getTypes <em>Types</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Types</em>'.
   * @see org.xtext.compiler.pascal.pascal.formal_parameter_section#getTypes()
   * @see #getformal_parameter_section()
   * @generated
   */
  EReference getformal_parameter_section_Types();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.parameter_group <em>parameter group</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>parameter group</em>'.
   * @see org.xtext.compiler.pascal.pascal.parameter_group
   * @generated
   */
  EClass getparameter_group();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.result_type <em>result type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>result type</em>'.
   * @see org.xtext.compiler.pascal.pascal.result_type
   * @generated
   */
  EClass getresult_type();

  /**
   * Returns the factory that creates the instances of the model.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the factory that creates the instances of the model.
   * @generated
   */
  PascalFactory getPascalFactory();

  /**
   * <!-- begin-user-doc -->
   * Defines literals for the meta objects that represent
   * <ul>
   *   <li>each class,</li>
   *   <li>each feature of each class,</li>
   *   <li>each enum,</li>
   *   <li>and each data type</li>
   * </ul>
   * <!-- end-user-doc -->
   * @generated
   */
  interface Literals
  {
    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.pascalImpl <em>pascal</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.pascalImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getpascal()
     * @generated
     */
    EClass PASCAL = eINSTANCE.getpascal();

    /**
     * The meta object literal for the '<em><b>Program</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PASCAL__PROGRAM = eINSTANCE.getpascal_Program();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.programImpl <em>program</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.programImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprogram()
     * @generated
     */
    EClass PROGRAM = eINSTANCE.getprogram();

    /**
     * The meta object literal for the '<em><b>Heading</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROGRAM__HEADING = eINSTANCE.getprogram_Heading();

    /**
     * The meta object literal for the '<em><b>Block</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROGRAM__BLOCK = eINSTANCE.getprogram_Block();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.program_heading_blockImpl <em>program heading block</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.program_heading_blockImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprogram_heading_block()
     * @generated
     */
    EClass PROGRAM_HEADING_BLOCK = eINSTANCE.getprogram_heading_block();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute PROGRAM_HEADING_BLOCK__NAME = eINSTANCE.getprogram_heading_block_Name();

    /**
     * The meta object literal for the '<em><b>Identifiers</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROGRAM_HEADING_BLOCK__IDENTIFIERS = eINSTANCE.getprogram_heading_block_Identifiers();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.identifier_listImpl <em>identifier list</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.identifier_listImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getidentifier_list()
     * @generated
     */
    EClass IDENTIFIER_LIST = eINSTANCE.getidentifier_list();

    /**
     * The meta object literal for the '<em><b>Names</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute IDENTIFIER_LIST__NAMES = eINSTANCE.getidentifier_list_Names();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.blockImpl <em>block</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.blockImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getblock()
     * @generated
     */
    EClass BLOCK = eINSTANCE.getblock();

    /**
     * The meta object literal for the '<em><b>Constantpart</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference BLOCK__CONSTANTPART = eINSTANCE.getblock_Constantpart();

    /**
     * The meta object literal for the '<em><b>Variablepart</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference BLOCK__VARIABLEPART = eINSTANCE.getblock_Variablepart();

    /**
     * The meta object literal for the '<em><b>Procedure function part</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference BLOCK__PROCEDURE_FUNCTION_PART = eINSTANCE.getblock_Procedure_function_part();

    /**
     * The meta object literal for the '<em><b>Statement</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference BLOCK__STATEMENT = eINSTANCE.getblock_Statement();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.constant_definition_partImpl <em>constant definition part</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.constant_definition_partImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconstant_definition_part()
     * @generated
     */
    EClass CONSTANT_DEFINITION_PART = eINSTANCE.getconstant_definition_part();

    /**
     * The meta object literal for the '<em><b>Constants</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CONSTANT_DEFINITION_PART__CONSTANTS = eINSTANCE.getconstant_definition_part_Constants();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.constant_definitionImpl <em>constant definition</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.constant_definitionImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconstant_definition()
     * @generated
     */
    EClass CONSTANT_DEFINITION = eINSTANCE.getconstant_definition();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute CONSTANT_DEFINITION__NAME = eINSTANCE.getconstant_definition_Name();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.constantImpl <em>constant</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.constantImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconstant()
     * @generated
     */
    EClass CONSTANT = eINSTANCE.getconstant();

    /**
     * The meta object literal for the '<em><b>Names</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute CONSTANT__NAMES = eINSTANCE.getconstant_Names();

    /**
     * The meta object literal for the '<em><b>String</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute CONSTANT__STRING = eINSTANCE.getconstant_String();

    /**
     * The meta object literal for the '<em><b>Numbers</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute CONSTANT__NUMBERS = eINSTANCE.getconstant_Numbers();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.variable_declaration_partImpl <em>variable declaration part</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.variable_declaration_partImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getvariable_declaration_part()
     * @generated
     */
    EClass VARIABLE_DECLARATION_PART = eINSTANCE.getvariable_declaration_part();

    /**
     * The meta object literal for the '<em><b>Variable</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference VARIABLE_DECLARATION_PART__VARIABLE = eINSTANCE.getvariable_declaration_part_Variable();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.variable_declarationImpl <em>variable declaration</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.variable_declarationImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getvariable_declaration()
     * @generated
     */
    EClass VARIABLE_DECLARATION = eINSTANCE.getvariable_declaration();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.compound_statementImpl <em>compound statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.compound_statementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getcompound_statement()
     * @generated
     */
    EClass COMPOUND_STATEMENT = eINSTANCE.getcompound_statement();

    /**
     * The meta object literal for the '<em><b>Sequence</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference COMPOUND_STATEMENT__SEQUENCE = eINSTANCE.getcompound_statement_Sequence();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.statementsImpl <em>statements</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.statementsImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getstatements()
     * @generated
     */
    EClass STATEMENTS = eINSTANCE.getstatements();

    /**
     * The meta object literal for the '<em><b>Statements</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference STATEMENTS__STATEMENTS = eINSTANCE.getstatements_Statements();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.statementImpl <em>statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.statementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getstatement()
     * @generated
     */
    EClass STATEMENT = eINSTANCE.getstatement();

    /**
     * The meta object literal for the '<em><b>Label</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference STATEMENT__LABEL = eINSTANCE.getstatement_Label();

    /**
     * The meta object literal for the '<em><b>Statement</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference STATEMENT__STATEMENT = eINSTANCE.getstatement_Statement();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.unlabelled_statementImpl <em>unlabelled statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.unlabelled_statementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getunlabelled_statement()
     * @generated
     */
    EClass UNLABELLED_STATEMENT = eINSTANCE.getunlabelled_statement();

    /**
     * The meta object literal for the '<em><b>Simple</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference UNLABELLED_STATEMENT__SIMPLE = eINSTANCE.getunlabelled_statement_Simple();

    /**
     * The meta object literal for the '<em><b>Structured</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute UNLABELLED_STATEMENT__STRUCTURED = eINSTANCE.getunlabelled_statement_Structured();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.labelImpl <em>label</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.labelImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getlabel()
     * @generated
     */
    EClass LABEL = eINSTANCE.getlabel();

    /**
     * The meta object literal for the '<em><b>Number</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute LABEL__NUMBER = eINSTANCE.getlabel_Number();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.simple_statementImpl <em>simple statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.simple_statementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsimple_statement()
     * @generated
     */
    EClass SIMPLE_STATEMENT = eINSTANCE.getsimple_statement();

    /**
     * The meta object literal for the '<em><b>Assignment</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIMPLE_STATEMENT__ASSIGNMENT = eINSTANCE.getsimple_statement_Assignment();

    /**
     * The meta object literal for the '<em><b>Procedure</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIMPLE_STATEMENT__PROCEDURE = eINSTANCE.getsimple_statement_Procedure();

    /**
     * The meta object literal for the '<em><b>Goto</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SIMPLE_STATEMENT__GOTO = eINSTANCE.getsimple_statement_Goto();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.assignment_statementImpl <em>assignment statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.assignment_statementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getassignment_statement()
     * @generated
     */
    EClass ASSIGNMENT_STATEMENT = eINSTANCE.getassignment_statement();

    /**
     * The meta object literal for the '<em><b>Variable</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ASSIGNMENT_STATEMENT__VARIABLE = eINSTANCE.getassignment_statement_Variable();

    /**
     * The meta object literal for the '<em><b>Expression</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ASSIGNMENT_STATEMENT__EXPRESSION = eINSTANCE.getassignment_statement_Expression();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.variableImpl <em>variable</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.variableImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getvariable()
     * @generated
     */
    EClass VARIABLE = eINSTANCE.getvariable();

    /**
     * The meta object literal for the '<em><b>Names</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute VARIABLE__NAMES = eINSTANCE.getvariable_Names();

    /**
     * The meta object literal for the '<em><b>Expression</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference VARIABLE__EXPRESSION = eINSTANCE.getvariable_Expression();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.expressionImpl <em>expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.expressionImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getexpression()
     * @generated
     */
    EClass EXPRESSION = eINSTANCE.getexpression();

    /**
     * The meta object literal for the '<em><b>Expressions</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPRESSION__EXPRESSIONS = eINSTANCE.getexpression_Expressions();

    /**
     * The meta object literal for the '<em><b>Operators</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute EXPRESSION__OPERATORS = eINSTANCE.getexpression_Operators();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.simple_expressionImpl <em>simple expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.simple_expressionImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsimple_expression()
     * @generated
     */
    EClass SIMPLE_EXPRESSION = eINSTANCE.getsimple_expression();

    /**
     * The meta object literal for the '<em><b>Terms</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIMPLE_EXPRESSION__TERMS = eINSTANCE.getsimple_expression_Terms();

    /**
     * The meta object literal for the '<em><b>Operators</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SIMPLE_EXPRESSION__OPERATORS = eINSTANCE.getsimple_expression_Operators();

    /**
     * The meta object literal for the '<em><b>Expression</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIMPLE_EXPRESSION__EXPRESSION = eINSTANCE.getsimple_expression_Expression();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.termImpl <em>term</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.termImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getterm()
     * @generated
     */
    EClass TERM = eINSTANCE.getterm();

    /**
     * The meta object literal for the '<em><b>Factors</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference TERM__FACTORS = eINSTANCE.getterm_Factors();

    /**
     * The meta object literal for the '<em><b>Operators</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute TERM__OPERATORS = eINSTANCE.getterm_Operators();

    /**
     * The meta object literal for the '<em><b>Terms</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference TERM__TERMS = eINSTANCE.getterm_Terms();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.signed_factorImpl <em>signed factor</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.signed_factorImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsigned_factor()
     * @generated
     */
    EClass SIGNED_FACTOR = eINSTANCE.getsigned_factor();

    /**
     * The meta object literal for the '<em><b>Operators</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SIGNED_FACTOR__OPERATORS = eINSTANCE.getsigned_factor_Operators();

    /**
     * The meta object literal for the '<em><b>Factors</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIGNED_FACTOR__FACTORS = eINSTANCE.getsigned_factor_Factors();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.factorImpl <em>factor</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.factorImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfactor()
     * @generated
     */
    EClass FACTOR = eINSTANCE.getfactor();

    /**
     * The meta object literal for the '<em><b>Variable</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__VARIABLE = eINSTANCE.getfactor_Variable();

    /**
     * The meta object literal for the '<em><b>Expression</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__EXPRESSION = eINSTANCE.getfactor_Expression();

    /**
     * The meta object literal for the '<em><b>Constant</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__CONSTANT = eINSTANCE.getfactor_Constant();

    /**
     * The meta object literal for the '<em><b>Set</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__SET = eINSTANCE.getfactor_Set();

    /**
     * The meta object literal for the '<em><b>Factor</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__FACTOR = eINSTANCE.getfactor_Factor();

    /**
     * The meta object literal for the '<em><b>Boolean</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute FACTOR__BOOLEAN = eINSTANCE.getfactor_Boolean();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.setImpl <em>set</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.setImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getset()
     * @generated
     */
    EClass SET = eINSTANCE.getset();

    /**
     * The meta object literal for the '<em><b>Elements</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SET__ELEMENTS = eINSTANCE.getset_Elements();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.elementListImpl <em>element List</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.elementListImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getelementList()
     * @generated
     */
    EClass ELEMENT_LIST = eINSTANCE.getelementList();

    /**
     * The meta object literal for the '<em><b>Elements</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ELEMENT_LIST__ELEMENTS = eINSTANCE.getelementList_Elements();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.elementImpl <em>element</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.elementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getelement()
     * @generated
     */
    EClass ELEMENT = eINSTANCE.getelement();

    /**
     * The meta object literal for the '<em><b>Expressions</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ELEMENT__EXPRESSIONS = eINSTANCE.getelement_Expressions();

    /**
     * The meta object literal for the '<em><b>Dotdot</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute ELEMENT__DOTDOT = eINSTANCE.getelement_Dotdot();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.typeImpl <em>type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype()
     * @generated
     */
    EClass TYPE = eINSTANCE.gettype();

    /**
     * The meta object literal for the '<em><b>Type</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference TYPE__TYPE = eINSTANCE.gettype_Type();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.simple_typeImpl <em>simple type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.simple_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsimple_type()
     * @generated
     */
    EClass SIMPLE_TYPE = eINSTANCE.getsimple_type();

    /**
     * The meta object literal for the '<em><b>Types</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIMPLE_TYPE__TYPES = eINSTANCE.getsimple_type_Types();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.scalar_typeImpl <em>scalar type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.scalar_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getscalar_type()
     * @generated
     */
    EClass SCALAR_TYPE = eINSTANCE.getscalar_type();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.subrange_typeImpl <em>subrange type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.subrange_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsubrange_type()
     * @generated
     */
    EClass SUBRANGE_TYPE = eINSTANCE.getsubrange_type();

    /**
     * The meta object literal for the '<em><b>Constants</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SUBRANGE_TYPE__CONSTANTS = eINSTANCE.getsubrange_type_Constants();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.type_identifierImpl <em>type identifier</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.type_identifierImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype_identifier()
     * @generated
     */
    EClass TYPE_IDENTIFIER = eINSTANCE.gettype_identifier();

    /**
     * The meta object literal for the '<em><b>Names</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute TYPE_IDENTIFIER__NAMES = eINSTANCE.gettype_identifier_Names();

    /**
     * The meta object literal for the '<em><b>Type</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute TYPE_IDENTIFIER__TYPE = eINSTANCE.gettype_identifier_Type();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.string_typeImpl <em>string type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.string_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getstring_type()
     * @generated
     */
    EClass STRING_TYPE = eINSTANCE.getstring_type();

    /**
     * The meta object literal for the '<em><b>Names</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute STRING_TYPE__NAMES = eINSTANCE.getstring_type_Names();

    /**
     * The meta object literal for the '<em><b>Number</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference STRING_TYPE__NUMBER = eINSTANCE.getstring_type_Number();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.unsigned_constantImpl <em>unsigned constant</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.unsigned_constantImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getunsigned_constant()
     * @generated
     */
    EClass UNSIGNED_CONSTANT = eINSTANCE.getunsigned_constant();

    /**
     * The meta object literal for the '<em><b>Number</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference UNSIGNED_CONSTANT__NUMBER = eINSTANCE.getunsigned_constant_Number();

    /**
     * The meta object literal for the '<em><b>Char</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference UNSIGNED_CONSTANT__CHAR = eINSTANCE.getunsigned_constant_Char();

    /**
     * The meta object literal for the '<em><b>String</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute UNSIGNED_CONSTANT__STRING = eINSTANCE.getunsigned_constant_String();

    /**
     * The meta object literal for the '<em><b>Nil</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute UNSIGNED_CONSTANT__NIL = eINSTANCE.getunsigned_constant_Nil();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.unsigned_numberImpl <em>unsigned number</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.unsigned_numberImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getunsigned_number()
     * @generated
     */
    EClass UNSIGNED_NUMBER = eINSTANCE.getunsigned_number();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.constant_chrImpl <em>constant chr</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.constant_chrImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconstant_chr()
     * @generated
     */
    EClass CONSTANT_CHR = eINSTANCE.getconstant_chr();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_statementImpl <em>procedure statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.procedure_statementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_statement()
     * @generated
     */
    EClass PROCEDURE_STATEMENT = eINSTANCE.getprocedure_statement();

    /**
     * The meta object literal for the '<em><b>Names</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute PROCEDURE_STATEMENT__NAMES = eINSTANCE.getprocedure_statement_Names();

    /**
     * The meta object literal for the '<em><b>Types</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROCEDURE_STATEMENT__TYPES = eINSTANCE.getprocedure_statement_Types();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.parameter_listImpl <em>parameter list</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.parameter_listImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getparameter_list()
     * @generated
     */
    EClass PARAMETER_LIST = eINSTANCE.getparameter_list();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.actual_parameterImpl <em>actual parameter</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.actual_parameterImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getactual_parameter()
     * @generated
     */
    EClass ACTUAL_PARAMETER = eINSTANCE.getactual_parameter();

    /**
     * The meta object literal for the '<em><b>Types</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ACTUAL_PARAMETER__TYPES = eINSTANCE.getactual_parameter_Types();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_and_function_declaration_partImpl <em>procedure and function declaration part</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.procedure_and_function_declaration_partImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_and_function_declaration_part()
     * @generated
     */
    EClass PROCEDURE_AND_FUNCTION_DECLARATION_PART = eINSTANCE.getprocedure_and_function_declaration_part();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_or_function_declarationImpl <em>procedure or function declaration</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.procedure_or_function_declarationImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_or_function_declaration()
     * @generated
     */
    EClass PROCEDURE_OR_FUNCTION_DECLARATION = eINSTANCE.getprocedure_or_function_declaration();

    /**
     * The meta object literal for the '<em><b>Names</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute PROCEDURE_OR_FUNCTION_DECLARATION__NAMES = eINSTANCE.getprocedure_or_function_declaration_Names();

    /**
     * The meta object literal for the '<em><b>Block</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROCEDURE_OR_FUNCTION_DECLARATION__BLOCK = eINSTANCE.getprocedure_or_function_declaration_Block();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_declarationImpl <em>procedure declaration</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.procedure_declarationImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_declaration()
     * @generated
     */
    EClass PROCEDURE_DECLARATION = eINSTANCE.getprocedure_declaration();

    /**
     * The meta object literal for the '<em><b>Types</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROCEDURE_DECLARATION__TYPES = eINSTANCE.getprocedure_declaration_Types();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.type_definitionImpl <em>type definition</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.type_definitionImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype_definition()
     * @generated
     */
    EClass TYPE_DEFINITION = eINSTANCE.gettype_definition();

    /**
     * The meta object literal for the '<em><b>Names</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute TYPE_DEFINITION__NAMES = eINSTANCE.gettype_definition_Names();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_typeImpl <em>procedure type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.procedure_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_type()
     * @generated
     */
    EClass PROCEDURE_TYPE = eINSTANCE.getprocedure_type();

    /**
     * The meta object literal for the '<em><b>Types</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROCEDURE_TYPE__TYPES = eINSTANCE.getprocedure_type_Types();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.function_declarationImpl <em>function declaration</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.function_declarationImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfunction_declaration()
     * @generated
     */
    EClass FUNCTION_DECLARATION = eINSTANCE.getfunction_declaration();

    /**
     * The meta object literal for the '<em><b>Types</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FUNCTION_DECLARATION__TYPES = eINSTANCE.getfunction_declaration_Types();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.function_typeImpl <em>function type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.function_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfunction_type()
     * @generated
     */
    EClass FUNCTION_TYPE = eINSTANCE.getfunction_type();

    /**
     * The meta object literal for the '<em><b>Types</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FUNCTION_TYPE__TYPES = eINSTANCE.getfunction_type_Types();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.function_designatorImpl <em>function designator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.function_designatorImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfunction_designator()
     * @generated
     */
    EClass FUNCTION_DESIGNATOR = eINSTANCE.getfunction_designator();

    /**
     * The meta object literal for the '<em><b>Names</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute FUNCTION_DESIGNATOR__NAMES = eINSTANCE.getfunction_designator_Names();

    /**
     * The meta object literal for the '<em><b>Types</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FUNCTION_DESIGNATOR__TYPES = eINSTANCE.getfunction_designator_Types();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.formal_parameter_listImpl <em>formal parameter list</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.formal_parameter_listImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getformal_parameter_list()
     * @generated
     */
    EClass FORMAL_PARAMETER_LIST = eINSTANCE.getformal_parameter_list();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.formal_parameter_sectionImpl <em>formal parameter section</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.formal_parameter_sectionImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getformal_parameter_section()
     * @generated
     */
    EClass FORMAL_PARAMETER_SECTION = eINSTANCE.getformal_parameter_section();

    /**
     * The meta object literal for the '<em><b>Types</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FORMAL_PARAMETER_SECTION__TYPES = eINSTANCE.getformal_parameter_section_Types();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.parameter_groupImpl <em>parameter group</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.parameter_groupImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getparameter_group()
     * @generated
     */
    EClass PARAMETER_GROUP = eINSTANCE.getparameter_group();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.result_typeImpl <em>result type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.result_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getresult_type()
     * @generated
     */
    EClass RESULT_TYPE = eINSTANCE.getresult_type();

  }

} //PascalPackage
