/**
 * generated by Xtext 2.15.0
 */
package org.xtext.compiler.pascal.pascal;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

/**
 * <!-- begin-user-doc -->
 * The <b>Package</b> for the model.
 * It contains accessors for the meta objects to represent
 * <ul>
 *   <li>each class,</li>
 *   <li>each feature of each class,</li>
 *   <li>each enum,</li>
 *   <li>and each data type</li>
 * </ul>
 * <!-- end-user-doc -->
 * @see org.xtext.compiler.pascal.pascal.PascalFactory
 * @model kind="package"
 * @generated
 */
public interface PascalPackage extends EPackage
{
  /**
   * The package name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNAME = "pascal";

  /**
   * The package namespace URI.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_URI = "http://www.xtext.org/compiler/pascal/Pascal";

  /**
   * The package namespace name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_PREFIX = "pascal";

  /**
   * The singleton instance of the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  PascalPackage eINSTANCE = org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl.init();

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.pascalImpl <em>pascal</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.pascalImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getpascal()
   * @generated
   */
  int PASCAL = 0;

  /**
   * The feature id for the '<em><b>Program</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PASCAL__PROGRAM = 0;

  /**
   * The number of structural features of the '<em>pascal</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PASCAL_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.programImpl <em>program</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.programImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprogram()
   * @generated
   */
  int PROGRAM = 1;

  /**
   * The feature id for the '<em><b>Heading</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM__HEADING = 0;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM__BLOCK = 1;

  /**
   * The number of structural features of the '<em>program</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.program_heading_blockImpl <em>program heading block</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.program_heading_blockImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprogram_heading_block()
   * @generated
   */
  int PROGRAM_HEADING_BLOCK = 2;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM_HEADING_BLOCK__NAME = 0;

  /**
   * The number of structural features of the '<em>program heading block</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM_HEADING_BLOCK_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.identifier_listImpl <em>identifier list</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.identifier_listImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getidentifier_list()
   * @generated
   */
  int IDENTIFIER_LIST = 3;

  /**
   * The feature id for the '<em><b>Names</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IDENTIFIER_LIST__NAMES = 0;

  /**
   * The number of structural features of the '<em>identifier list</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IDENTIFIER_LIST_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.identifierImpl <em>identifier</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.identifierImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getidentifier()
   * @generated
   */
  int IDENTIFIER = 4;

  /**
   * The feature id for the '<em><b>Id</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IDENTIFIER__ID = 0;

  /**
   * The number of structural features of the '<em>identifier</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IDENTIFIER_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.blockImpl <em>block</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.blockImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getblock()
   * @generated
   */
  int BLOCK = 5;

  /**
   * The feature id for the '<em><b>Constantpart</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BLOCK__CONSTANTPART = 0;

  /**
   * The feature id for the '<em><b>Type part</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BLOCK__TYPE_PART = 1;

  /**
   * The feature id for the '<em><b>Variablepart</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BLOCK__VARIABLEPART = 2;

  /**
   * The feature id for the '<em><b>Procedure function part</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BLOCK__PROCEDURE_FUNCTION_PART = 3;

  /**
   * The feature id for the '<em><b>Statement</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BLOCK__STATEMENT = 4;

  /**
   * The number of structural features of the '<em>block</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BLOCK_FEATURE_COUNT = 5;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.constant_definition_partImpl <em>constant definition part</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.constant_definition_partImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconstant_definition_part()
   * @generated
   */
  int CONSTANT_DEFINITION_PART = 6;

  /**
   * The feature id for the '<em><b>Constants</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_DEFINITION_PART__CONSTANTS = 0;

  /**
   * The number of structural features of the '<em>constant definition part</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_DEFINITION_PART_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.constant_definitionImpl <em>constant definition</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.constant_definitionImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconstant_definition()
   * @generated
   */
  int CONSTANT_DEFINITION = 7;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_DEFINITION__NAME = 0;

  /**
   * The number of structural features of the '<em>constant definition</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_DEFINITION_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.constantImpl <em>constant</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.constantImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconstant()
   * @generated
   */
  int CONSTANT = 8;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT__NAME = CONSTANT_DEFINITION__NAME;

  /**
   * The feature id for the '<em><b>Uns number</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT__UNS_NUMBER = CONSTANT_DEFINITION_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Sig number</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT__SIG_NUMBER = CONSTANT_DEFINITION_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Name id</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT__NAME_ID = CONSTANT_DEFINITION_FEATURE_COUNT + 2;

  /**
   * The feature id for the '<em><b>Sig name id</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT__SIG_NAME_ID = CONSTANT_DEFINITION_FEATURE_COUNT + 3;

  /**
   * The feature id for the '<em><b>String</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT__STRING = CONSTANT_DEFINITION_FEATURE_COUNT + 4;

  /**
   * The feature id for the '<em><b>Booltype</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT__BOOLTYPE = CONSTANT_DEFINITION_FEATURE_COUNT + 5;

  /**
   * The number of structural features of the '<em>constant</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_FEATURE_COUNT = CONSTANT_DEFINITION_FEATURE_COUNT + 6;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.type_definition_partImpl <em>type definition part</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.type_definition_partImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype_definition_part()
   * @generated
   */
  int TYPE_DEFINITION_PART = 9;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_DEFINITION_PART__TYPES = 0;

  /**
   * The number of structural features of the '<em>type definition part</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_DEFINITION_PART_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.type_definitionImpl <em>type definition</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.type_definitionImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype_definition()
   * @generated
   */
  int TYPE_DEFINITION = 10;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_DEFINITION__NAME = 0;

  /**
   * The feature id for the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_DEFINITION__TYPE = 1;

  /**
   * The number of structural features of the '<em>type definition</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_DEFINITION_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.variable_declaration_partImpl <em>variable declaration part</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.variable_declaration_partImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getvariable_declaration_part()
   * @generated
   */
  int VARIABLE_DECLARATION_PART = 11;

  /**
   * The feature id for the '<em><b>Variable</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE_DECLARATION_PART__VARIABLE = 0;

  /**
   * The number of structural features of the '<em>variable declaration part</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE_DECLARATION_PART_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.variable_declarationImpl <em>variable declaration</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.variable_declarationImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getvariable_declaration()
   * @generated
   */
  int VARIABLE_DECLARATION = 12;

  /**
   * The feature id for the '<em><b>List names</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE_DECLARATION__LIST_NAMES = 0;

  /**
   * The feature id for the '<em><b>Type variable</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE_DECLARATION__TYPE_VARIABLE = 1;

  /**
   * The number of structural features of the '<em>variable declaration</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE_DECLARATION_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.compound_statementImpl <em>compound statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.compound_statementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getcompound_statement()
   * @generated
   */
  int COMPOUND_STATEMENT = 13;

  /**
   * The feature id for the '<em><b>Sequence</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPOUND_STATEMENT__SEQUENCE = 0;

  /**
   * The number of structural features of the '<em>compound statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPOUND_STATEMENT_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.statementsImpl <em>statements</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.statementsImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getstatements()
   * @generated
   */
  int STATEMENTS = 14;

  /**
   * The feature id for the '<em><b>Statements</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENTS__STATEMENTS = 0;

  /**
   * The number of structural features of the '<em>statements</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENTS_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.statementImpl <em>statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.statementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getstatement()
   * @generated
   */
  int STATEMENT = 15;

  /**
   * The feature id for the '<em><b>Statement</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT__STATEMENT = 0;

  /**
   * The number of structural features of the '<em>statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.unlabelled_statementImpl <em>unlabelled statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.unlabelled_statementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getunlabelled_statement()
   * @generated
   */
  int UNLABELLED_STATEMENT = 16;

  /**
   * The feature id for the '<em><b>Simple</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNLABELLED_STATEMENT__SIMPLE = 0;

  /**
   * The feature id for the '<em><b>Structured</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNLABELLED_STATEMENT__STRUCTURED = 1;

  /**
   * The number of structural features of the '<em>unlabelled statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNLABELLED_STATEMENT_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.simple_statementImpl <em>simple statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.simple_statementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsimple_statement()
   * @generated
   */
  int SIMPLE_STATEMENT = 17;

  /**
   * The feature id for the '<em><b>Assignment</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_STATEMENT__ASSIGNMENT = 0;

  /**
   * The feature id for the '<em><b>Procedure</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_STATEMENT__PROCEDURE = 1;

  /**
   * The number of structural features of the '<em>simple statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_STATEMENT_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.assignment_statementImpl <em>assignment statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.assignment_statementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getassignment_statement()
   * @generated
   */
  int ASSIGNMENT_STATEMENT = 18;

  /**
   * The feature id for the '<em><b>Declared variable</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ASSIGNMENT_STATEMENT__DECLARED_VARIABLE = 0;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ASSIGNMENT_STATEMENT__EXPRESSION = 1;

  /**
   * The number of structural features of the '<em>assignment statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ASSIGNMENT_STATEMENT_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.variableImpl <em>variable</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.variableImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getvariable()
   * @generated
   */
  int VARIABLE = 19;

  /**
   * The feature id for the '<em><b>Variable id</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE__VARIABLE_ID = 0;

  /**
   * The feature id for the '<em><b>Indice</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE__INDICE = 1;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE__EXPRESSION = 2;

  /**
   * The feature id for the '<em><b>Names exp</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE__NAMES_EXP = 3;

  /**
   * The number of structural features of the '<em>variable</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE_FEATURE_COUNT = 4;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.expressionImpl <em>expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.expressionImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getexpression()
   * @generated
   */
  int EXPRESSION = 20;

  /**
   * The feature id for the '<em><b>Simple</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__SIMPLE = 0;

  /**
   * The number of structural features of the '<em>expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.simple_expressionImpl <em>simple expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.simple_expressionImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsimple_expression()
   * @generated
   */
  int SIMPLE_EXPRESSION = 21;

  /**
   * The feature id for the '<em><b>Term exp</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_EXPRESSION__TERM_EXP = 0;

  /**
   * The feature id for the '<em><b>Operator</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_EXPRESSION__OPERATOR = 1;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_EXPRESSION__EXPRESSION = 2;

  /**
   * The number of structural features of the '<em>simple expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_EXPRESSION_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.termImpl <em>term</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.termImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getterm()
   * @generated
   */
  int TERM = 22;

  /**
   * The feature id for the '<em><b>Factor</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TERM__FACTOR = 0;

  /**
   * The feature id for the '<em><b>Operator</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TERM__OPERATOR = 1;

  /**
   * The feature id for the '<em><b>Term2</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TERM__TERM2 = 2;

  /**
   * The number of structural features of the '<em>term</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TERM_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.signed_factorImpl <em>signed factor</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.signed_factorImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsigned_factor()
   * @generated
   */
  int SIGNED_FACTOR = 23;

  /**
   * The feature id for the '<em><b>Signal</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIGNED_FACTOR__SIGNAL = 0;

  /**
   * The feature id for the '<em><b>Factor</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIGNED_FACTOR__FACTOR = 1;

  /**
   * The number of structural features of the '<em>signed factor</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIGNED_FACTOR_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.factorImpl <em>factor</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.factorImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfactor()
   * @generated
   */
  int FACTOR = 24;

  /**
   * The feature id for the '<em><b>Variable</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__VARIABLE = 0;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__EXPRESSION = 1;

  /**
   * The feature id for the '<em><b>Function</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__FUNCTION = 2;

  /**
   * The feature id for the '<em><b>Constant</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__CONSTANT = 3;

  /**
   * The feature id for the '<em><b>Not factor</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__NOT_FACTOR = 4;

  /**
   * The feature id for the '<em><b>Bool factor</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR__BOOL_FACTOR = 5;

  /**
   * The number of structural features of the '<em>factor</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FACTOR_FEATURE_COUNT = 6;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.component_typeImpl <em>component type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.component_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getcomponent_type()
   * @generated
   */
  int COMPONENT_TYPE = 34;

  /**
   * The number of structural features of the '<em>component type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPONENT_TYPE_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.typeImpl <em>type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype()
   * @generated
   */
  int TYPE = 25;

  /**
   * The feature id for the '<em><b>Simple</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE__SIMPLE = COMPONENT_TYPE_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Structured</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE__STRUCTURED = COMPONENT_TYPE_FEATURE_COUNT + 1;

  /**
   * The number of structural features of the '<em>type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_FEATURE_COUNT = COMPONENT_TYPE_FEATURE_COUNT + 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.simple_typeImpl <em>simple type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.simple_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsimple_type()
   * @generated
   */
  int SIMPLE_TYPE = 26;

  /**
   * The feature id for the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_TYPE__TYPE = 0;

  /**
   * The feature id for the '<em><b>Subrange type</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_TYPE__SUBRANGE_TYPE = 1;

  /**
   * The number of structural features of the '<em>simple type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_TYPE_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.subrange_typeImpl <em>subrange type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.subrange_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsubrange_type()
   * @generated
   */
  int SUBRANGE_TYPE = 27;

  /**
   * The feature id for the '<em><b>Constant Init</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SUBRANGE_TYPE__CONSTANT_INIT = 0;

  /**
   * The feature id for the '<em><b>Constant Final</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SUBRANGE_TYPE__CONSTANT_FINAL = 1;

  /**
   * The number of structural features of the '<em>subrange type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SUBRANGE_TYPE_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.structured_typeImpl <em>structured type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.structured_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getstructured_type()
   * @generated
   */
  int STRUCTURED_TYPE = 28;

  /**
   * The feature id for the '<em><b>Unpacked</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STRUCTURED_TYPE__UNPACKED = 0;

  /**
   * The number of structural features of the '<em>structured type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STRUCTURED_TYPE_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.unpacked_structured_typeImpl <em>unpacked structured type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.unpacked_structured_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getunpacked_structured_type()
   * @generated
   */
  int UNPACKED_STRUCTURED_TYPE = 29;

  /**
   * The feature id for the '<em><b>Static array</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNPACKED_STRUCTURED_TYPE__STATIC_ARRAY = 0;

  /**
   * The feature id for the '<em><b>Dynamic</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNPACKED_STRUCTURED_TYPE__DYNAMIC = 1;

  /**
   * The number of structural features of the '<em>unpacked structured type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNPACKED_STRUCTURED_TYPE_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.dynamic_array_typeImpl <em>dynamic array type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.dynamic_array_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getdynamic_array_type()
   * @generated
   */
  int DYNAMIC_ARRAY_TYPE = 30;

  /**
   * The feature id for the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DYNAMIC_ARRAY_TYPE__TYPE = 0;

  /**
   * The number of structural features of the '<em>dynamic array type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DYNAMIC_ARRAY_TYPE_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.array_typeImpl <em>array type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.array_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getarray_type()
   * @generated
   */
  int ARRAY_TYPE = 31;

  /**
   * The feature id for the '<em><b>Type l</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ARRAY_TYPE__TYPE_L = 0;

  /**
   * The feature id for the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ARRAY_TYPE__TYPE = 1;

  /**
   * The number of structural features of the '<em>array type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ARRAY_TYPE_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.type_listImpl <em>type list</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.type_listImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype_list()
   * @generated
   */
  int TYPE_LIST = 32;

  /**
   * The feature id for the '<em><b>Indexes</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_LIST__INDEXES = 0;

  /**
   * The number of structural features of the '<em>type list</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_LIST_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.index_typeImpl <em>index type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.index_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getindex_type()
   * @generated
   */
  int INDEX_TYPE = 33;

  /**
   * The feature id for the '<em><b>Content</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int INDEX_TYPE__CONTENT = 0;

  /**
   * The number of structural features of the '<em>index type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int INDEX_TYPE_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.result_typeImpl <em>result type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.result_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getresult_type()
   * @generated
   */
  int RESULT_TYPE = 56;

  /**
   * The number of structural features of the '<em>result type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int RESULT_TYPE_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.type_identifierImpl <em>type identifier</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.type_identifierImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype_identifier()
   * @generated
   */
  int TYPE_IDENTIFIER = 35;

  /**
   * The feature id for the '<em><b>Id</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_IDENTIFIER__ID = RESULT_TYPE_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Boolean</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_IDENTIFIER__BOOLEAN = RESULT_TYPE_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Integer</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_IDENTIFIER__INTEGER = RESULT_TYPE_FEATURE_COUNT + 2;

  /**
   * The feature id for the '<em><b>String</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_IDENTIFIER__STRING = RESULT_TYPE_FEATURE_COUNT + 3;

  /**
   * The number of structural features of the '<em>type identifier</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TYPE_IDENTIFIER_FEATURE_COUNT = RESULT_TYPE_FEATURE_COUNT + 4;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.unsigned_constantImpl <em>unsigned constant</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.unsigned_constantImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getunsigned_constant()
   * @generated
   */
  int UNSIGNED_CONSTANT = 36;

  /**
   * The feature id for the '<em><b>Number</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_CONSTANT__NUMBER = 0;

  /**
   * The feature id for the '<em><b>String</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_CONSTANT__STRING = 1;

  /**
   * The feature id for the '<em><b>Nil</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_CONSTANT__NIL = 2;

  /**
   * The number of structural features of the '<em>unsigned constant</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_CONSTANT_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.unsigned_numberImpl <em>unsigned number</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.unsigned_numberImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getunsigned_number()
   * @generated
   */
  int UNSIGNED_NUMBER = 37;

  /**
   * The feature id for the '<em><b>Numbers</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_NUMBER__NUMBERS = 0;

  /**
   * The number of structural features of the '<em>unsigned number</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNSIGNED_NUMBER_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_statementImpl <em>procedure statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.procedure_statementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_statement()
   * @generated
   */
  int PROCEDURE_STATEMENT = 38;

  /**
   * The feature id for the '<em><b>Name id</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_STATEMENT__NAME_ID = 0;

  /**
   * The feature id for the '<em><b>Parameters</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_STATEMENT__PARAMETERS = 1;

  /**
   * The number of structural features of the '<em>procedure statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_STATEMENT_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.parameter_listImpl <em>parameter list</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.parameter_listImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getparameter_list()
   * @generated
   */
  int PARAMETER_LIST = 39;

  /**
   * The feature id for the '<em><b>Parameters</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PARAMETER_LIST__PARAMETERS = 0;

  /**
   * The number of structural features of the '<em>parameter list</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PARAMETER_LIST_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.actual_parameterImpl <em>actual parameter</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.actual_parameterImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getactual_parameter()
   * @generated
   */
  int ACTUAL_PARAMETER = 40;

  /**
   * The feature id for the '<em><b>Content</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ACTUAL_PARAMETER__CONTENT = 0;

  /**
   * The number of structural features of the '<em>actual parameter</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ACTUAL_PARAMETER_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.structured_statementImpl <em>structured statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.structured_statementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getstructured_statement()
   * @generated
   */
  int STRUCTURED_STATEMENT = 41;

  /**
   * The feature id for the '<em><b>Compound stat</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STRUCTURED_STATEMENT__COMPOUND_STAT = 0;

  /**
   * The feature id for the '<em><b>Conditional stat</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STRUCTURED_STATEMENT__CONDITIONAL_STAT = 1;

  /**
   * The number of structural features of the '<em>structured statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STRUCTURED_STATEMENT_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.conditional_statementImpl <em>conditional statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.conditional_statementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconditional_statement()
   * @generated
   */
  int CONDITIONAL_STATEMENT = 42;

  /**
   * The feature id for the '<em><b>Cond statements</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONDITIONAL_STATEMENT__COND_STATEMENTS = 0;

  /**
   * The number of structural features of the '<em>conditional statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONDITIONAL_STATEMENT_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.case_statementImpl <em>case statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.case_statementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getcase_statement()
   * @generated
   */
  int CASE_STATEMENT = 43;

  /**
   * The feature id for the '<em><b>Exp</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CASE_STATEMENT__EXP = 0;

  /**
   * The feature id for the '<em><b>Case list</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CASE_STATEMENT__CASE_LIST = 1;

  /**
   * The feature id for the '<em><b>Case statements</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CASE_STATEMENT__CASE_STATEMENTS = 2;

  /**
   * The number of structural features of the '<em>case statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CASE_STATEMENT_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.case_list_elementImpl <em>case list element</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.case_list_elementImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getcase_list_element()
   * @generated
   */
  int CASE_LIST_ELEMENT = 44;

  /**
   * The feature id for the '<em><b>Consts</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CASE_LIST_ELEMENT__CONSTS = 0;

  /**
   * The feature id for the '<em><b>Case statement</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CASE_LIST_ELEMENT__CASE_STATEMENT = 1;

  /**
   * The number of structural features of the '<em>case list element</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CASE_LIST_ELEMENT_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.const_listImpl <em>const list</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.const_listImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconst_list()
   * @generated
   */
  int CONST_LIST = 45;

  /**
   * The feature id for the '<em><b>Constants</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONST_LIST__CONSTANTS = 0;

  /**
   * The number of structural features of the '<em>const list</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONST_LIST_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_and_function_declaration_partImpl <em>procedure and function declaration part</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.procedure_and_function_declaration_partImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_and_function_declaration_part()
   * @generated
   */
  int PROCEDURE_AND_FUNCTION_DECLARATION_PART = 46;

  /**
   * The feature id for the '<em><b>Subroutine</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_AND_FUNCTION_DECLARATION_PART__SUBROUTINE = 0;

  /**
   * The number of structural features of the '<em>procedure and function declaration part</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_AND_FUNCTION_DECLARATION_PART_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_or_function_declarationImpl <em>procedure or function declaration</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.procedure_or_function_declarationImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_or_function_declaration()
   * @generated
   */
  int PROCEDURE_OR_FUNCTION_DECLARATION = 47;

  /**
   * The feature id for the '<em><b>Proc</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_OR_FUNCTION_DECLARATION__PROC = 0;

  /**
   * The feature id for the '<em><b>Func</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_OR_FUNCTION_DECLARATION__FUNC = 1;

  /**
   * The number of structural features of the '<em>procedure or function declaration</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_OR_FUNCTION_DECLARATION_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_declarationImpl <em>procedure declaration</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.procedure_declarationImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_declaration()
   * @generated
   */
  int PROCEDURE_DECLARATION = 48;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_DECLARATION__NAMES = 0;

  /**
   * The feature id for the '<em><b>Parameters</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_DECLARATION__PARAMETERS = 1;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_DECLARATION__BLOCK = 2;

  /**
   * The number of structural features of the '<em>procedure declaration</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_DECLARATION_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_typeImpl <em>procedure type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.procedure_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_type()
   * @generated
   */
  int PROCEDURE_TYPE = 49;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_TYPE__TYPES = 0;

  /**
   * The number of structural features of the '<em>procedure type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROCEDURE_TYPE_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.function_declarationImpl <em>function declaration</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.function_declarationImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfunction_declaration()
   * @generated
   */
  int FUNCTION_DECLARATION = 50;

  /**
   * The feature id for the '<em><b>Names</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DECLARATION__NAMES = 0;

  /**
   * The feature id for the '<em><b>Parameters</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DECLARATION__PARAMETERS = 1;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DECLARATION__TYPES = 2;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DECLARATION__BLOCK = 3;

  /**
   * The number of structural features of the '<em>function declaration</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DECLARATION_FEATURE_COUNT = 4;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.function_typeImpl <em>function type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.function_typeImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfunction_type()
   * @generated
   */
  int FUNCTION_TYPE = 51;

  /**
   * The feature id for the '<em><b>Parameters</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_TYPE__PARAMETERS = 0;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_TYPE__TYPES = 1;

  /**
   * The number of structural features of the '<em>function type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_TYPE_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.function_designatorImpl <em>function designator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.function_designatorImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfunction_designator()
   * @generated
   */
  int FUNCTION_DESIGNATOR = 52;

  /**
   * The feature id for the '<em><b>Name function</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DESIGNATOR__NAME_FUNCTION = 0;

  /**
   * The feature id for the '<em><b>Parameters</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DESIGNATOR__PARAMETERS = 1;

  /**
   * The number of structural features of the '<em>function designator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DESIGNATOR_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.formal_parameter_listImpl <em>formal parameter list</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.formal_parameter_listImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getformal_parameter_list()
   * @generated
   */
  int FORMAL_PARAMETER_LIST = 53;

  /**
   * The feature id for the '<em><b>Parameters</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FORMAL_PARAMETER_LIST__PARAMETERS = 0;

  /**
   * The number of structural features of the '<em>formal parameter list</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FORMAL_PARAMETER_LIST_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.formal_parameter_sectionImpl <em>formal parameter section</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.formal_parameter_sectionImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getformal_parameter_section()
   * @generated
   */
  int FORMAL_PARAMETER_SECTION = 54;

  /**
   * The feature id for the '<em><b>Parameters</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FORMAL_PARAMETER_SECTION__PARAMETERS = 0;

  /**
   * The number of structural features of the '<em>formal parameter section</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FORMAL_PARAMETER_SECTION_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.compiler.pascal.pascal.impl.parameter_groupImpl <em>parameter group</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.compiler.pascal.pascal.impl.parameter_groupImpl
   * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getparameter_group()
   * @generated
   */
  int PARAMETER_GROUP = 55;

  /**
   * The feature id for the '<em><b>Names</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PARAMETER_GROUP__NAMES = 0;

  /**
   * The feature id for the '<em><b>Types</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PARAMETER_GROUP__TYPES = 1;

  /**
   * The number of structural features of the '<em>parameter group</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PARAMETER_GROUP_FEATURE_COUNT = 2;


  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.pascal <em>pascal</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>pascal</em>'.
   * @see org.xtext.compiler.pascal.pascal.pascal
   * @generated
   */
  EClass getpascal();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.pascal#getProgram <em>Program</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Program</em>'.
   * @see org.xtext.compiler.pascal.pascal.pascal#getProgram()
   * @see #getpascal()
   * @generated
   */
  EReference getpascal_Program();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.program <em>program</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>program</em>'.
   * @see org.xtext.compiler.pascal.pascal.program
   * @generated
   */
  EClass getprogram();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.program#getHeading <em>Heading</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Heading</em>'.
   * @see org.xtext.compiler.pascal.pascal.program#getHeading()
   * @see #getprogram()
   * @generated
   */
  EReference getprogram_Heading();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.program#getBlock <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Block</em>'.
   * @see org.xtext.compiler.pascal.pascal.program#getBlock()
   * @see #getprogram()
   * @generated
   */
  EReference getprogram_Block();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.program_heading_block <em>program heading block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>program heading block</em>'.
   * @see org.xtext.compiler.pascal.pascal.program_heading_block
   * @generated
   */
  EClass getprogram_heading_block();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.program_heading_block#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see org.xtext.compiler.pascal.pascal.program_heading_block#getName()
   * @see #getprogram_heading_block()
   * @generated
   */
  EAttribute getprogram_heading_block_Name();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.identifier_list <em>identifier list</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>identifier list</em>'.
   * @see org.xtext.compiler.pascal.pascal.identifier_list
   * @generated
   */
  EClass getidentifier_list();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.identifier_list#getNames <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Names</em>'.
   * @see org.xtext.compiler.pascal.pascal.identifier_list#getNames()
   * @see #getidentifier_list()
   * @generated
   */
  EReference getidentifier_list_Names();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.identifier <em>identifier</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>identifier</em>'.
   * @see org.xtext.compiler.pascal.pascal.identifier
   * @generated
   */
  EClass getidentifier();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.identifier#getId <em>Id</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Id</em>'.
   * @see org.xtext.compiler.pascal.pascal.identifier#getId()
   * @see #getidentifier()
   * @generated
   */
  EAttribute getidentifier_Id();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.block <em>block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>block</em>'.
   * @see org.xtext.compiler.pascal.pascal.block
   * @generated
   */
  EClass getblock();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.block#getConstantpart <em>Constantpart</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Constantpart</em>'.
   * @see org.xtext.compiler.pascal.pascal.block#getConstantpart()
   * @see #getblock()
   * @generated
   */
  EReference getblock_Constantpart();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.block#getType_part <em>Type part</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Type part</em>'.
   * @see org.xtext.compiler.pascal.pascal.block#getType_part()
   * @see #getblock()
   * @generated
   */
  EReference getblock_Type_part();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.block#getVariablepart <em>Variablepart</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Variablepart</em>'.
   * @see org.xtext.compiler.pascal.pascal.block#getVariablepart()
   * @see #getblock()
   * @generated
   */
  EReference getblock_Variablepart();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.block#getProcedure_function_part <em>Procedure function part</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Procedure function part</em>'.
   * @see org.xtext.compiler.pascal.pascal.block#getProcedure_function_part()
   * @see #getblock()
   * @generated
   */
  EReference getblock_Procedure_function_part();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.block#getStatement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.block#getStatement()
   * @see #getblock()
   * @generated
   */
  EReference getblock_Statement();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.constant_definition_part <em>constant definition part</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>constant definition part</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant_definition_part
   * @generated
   */
  EClass getconstant_definition_part();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.constant_definition_part#getConstants <em>Constants</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Constants</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant_definition_part#getConstants()
   * @see #getconstant_definition_part()
   * @generated
   */
  EReference getconstant_definition_part_Constants();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.constant_definition <em>constant definition</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>constant definition</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant_definition
   * @generated
   */
  EClass getconstant_definition();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.constant_definition#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant_definition#getName()
   * @see #getconstant_definition()
   * @generated
   */
  EAttribute getconstant_definition_Name();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.constant <em>constant</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>constant</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant
   * @generated
   */
  EClass getconstant();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.constant#getUns_number <em>Uns number</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Uns number</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant#getUns_number()
   * @see #getconstant()
   * @generated
   */
  EReference getconstant_Uns_number();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.constant#getSig_number <em>Sig number</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Sig number</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant#getSig_number()
   * @see #getconstant()
   * @generated
   */
  EReference getconstant_Sig_number();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.constant#getName_id <em>Name id</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name id</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant#getName_id()
   * @see #getconstant()
   * @generated
   */
  EAttribute getconstant_Name_id();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.constant#getSig_name_id <em>Sig name id</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Sig name id</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant#getSig_name_id()
   * @see #getconstant()
   * @generated
   */
  EAttribute getconstant_Sig_name_id();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.constant#getString <em>String</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>String</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant#getString()
   * @see #getconstant()
   * @generated
   */
  EAttribute getconstant_String();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.constant#getBooltype <em>Booltype</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Booltype</em>'.
   * @see org.xtext.compiler.pascal.pascal.constant#getBooltype()
   * @see #getconstant()
   * @generated
   */
  EAttribute getconstant_Booltype();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.type_definition_part <em>type definition part</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>type definition part</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_definition_part
   * @generated
   */
  EClass gettype_definition_part();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.type_definition_part#getTypes <em>Types</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Types</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_definition_part#getTypes()
   * @see #gettype_definition_part()
   * @generated
   */
  EReference gettype_definition_part_Types();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.type_definition <em>type definition</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>type definition</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_definition
   * @generated
   */
  EClass gettype_definition();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.type_definition#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_definition#getName()
   * @see #gettype_definition()
   * @generated
   */
  EAttribute gettype_definition_Name();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.type_definition#getType <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Type</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_definition#getType()
   * @see #gettype_definition()
   * @generated
   */
  EReference gettype_definition_Type();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.variable_declaration_part <em>variable declaration part</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>variable declaration part</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable_declaration_part
   * @generated
   */
  EClass getvariable_declaration_part();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.variable_declaration_part#getVariable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Variable</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable_declaration_part#getVariable()
   * @see #getvariable_declaration_part()
   * @generated
   */
  EReference getvariable_declaration_part_Variable();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.variable_declaration <em>variable declaration</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>variable declaration</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable_declaration
   * @generated
   */
  EClass getvariable_declaration();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.variable_declaration#getList_names <em>List names</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>List names</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable_declaration#getList_names()
   * @see #getvariable_declaration()
   * @generated
   */
  EReference getvariable_declaration_List_names();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.variable_declaration#getType_variable <em>Type variable</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Type variable</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable_declaration#getType_variable()
   * @see #getvariable_declaration()
   * @generated
   */
  EReference getvariable_declaration_Type_variable();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.compound_statement <em>compound statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>compound statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.compound_statement
   * @generated
   */
  EClass getcompound_statement();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.compound_statement#getSequence <em>Sequence</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Sequence</em>'.
   * @see org.xtext.compiler.pascal.pascal.compound_statement#getSequence()
   * @see #getcompound_statement()
   * @generated
   */
  EReference getcompound_statement_Sequence();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.statements <em>statements</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>statements</em>'.
   * @see org.xtext.compiler.pascal.pascal.statements
   * @generated
   */
  EClass getstatements();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.statements#getStatements <em>Statements</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Statements</em>'.
   * @see org.xtext.compiler.pascal.pascal.statements#getStatements()
   * @see #getstatements()
   * @generated
   */
  EReference getstatements_Statements();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.statement <em>statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.statement
   * @generated
   */
  EClass getstatement();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.statement#getStatement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.statement#getStatement()
   * @see #getstatement()
   * @generated
   */
  EReference getstatement_Statement();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.unlabelled_statement <em>unlabelled statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>unlabelled statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.unlabelled_statement
   * @generated
   */
  EClass getunlabelled_statement();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.unlabelled_statement#getSimple <em>Simple</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Simple</em>'.
   * @see org.xtext.compiler.pascal.pascal.unlabelled_statement#getSimple()
   * @see #getunlabelled_statement()
   * @generated
   */
  EReference getunlabelled_statement_Simple();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.unlabelled_statement#getStructured <em>Structured</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Structured</em>'.
   * @see org.xtext.compiler.pascal.pascal.unlabelled_statement#getStructured()
   * @see #getunlabelled_statement()
   * @generated
   */
  EReference getunlabelled_statement_Structured();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.simple_statement <em>simple statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>simple statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_statement
   * @generated
   */
  EClass getsimple_statement();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.simple_statement#getAssignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Assignment</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_statement#getAssignment()
   * @see #getsimple_statement()
   * @generated
   */
  EReference getsimple_statement_Assignment();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.simple_statement#getProcedure <em>Procedure</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Procedure</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_statement#getProcedure()
   * @see #getsimple_statement()
   * @generated
   */
  EReference getsimple_statement_Procedure();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.assignment_statement <em>assignment statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>assignment statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.assignment_statement
   * @generated
   */
  EClass getassignment_statement();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.assignment_statement#getDeclared_variable <em>Declared variable</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Declared variable</em>'.
   * @see org.xtext.compiler.pascal.pascal.assignment_statement#getDeclared_variable()
   * @see #getassignment_statement()
   * @generated
   */
  EReference getassignment_statement_Declared_variable();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.assignment_statement#getExpression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expression</em>'.
   * @see org.xtext.compiler.pascal.pascal.assignment_statement#getExpression()
   * @see #getassignment_statement()
   * @generated
   */
  EReference getassignment_statement_Expression();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.variable <em>variable</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>variable</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable
   * @generated
   */
  EClass getvariable();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.variable#getVariable_id <em>Variable id</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Variable id</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable#getVariable_id()
   * @see #getvariable()
   * @generated
   */
  EAttribute getvariable_Variable_id();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.variable#getIndice <em>Indice</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Indice</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable#getIndice()
   * @see #getvariable()
   * @generated
   */
  EReference getvariable_Indice();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.variable#getExpression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Expression</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable#getExpression()
   * @see #getvariable()
   * @generated
   */
  EReference getvariable_Expression();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.compiler.pascal.pascal.variable#getNames_exp <em>Names exp</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Names exp</em>'.
   * @see org.xtext.compiler.pascal.pascal.variable#getNames_exp()
   * @see #getvariable()
   * @generated
   */
  EAttribute getvariable_Names_exp();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.expression <em>expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>expression</em>'.
   * @see org.xtext.compiler.pascal.pascal.expression
   * @generated
   */
  EClass getexpression();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.expression#getSimple <em>Simple</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Simple</em>'.
   * @see org.xtext.compiler.pascal.pascal.expression#getSimple()
   * @see #getexpression()
   * @generated
   */
  EReference getexpression_Simple();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.simple_expression <em>simple expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>simple expression</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_expression
   * @generated
   */
  EClass getsimple_expression();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.simple_expression#getTerm_exp <em>Term exp</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Term exp</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_expression#getTerm_exp()
   * @see #getsimple_expression()
   * @generated
   */
  EReference getsimple_expression_Term_exp();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.simple_expression#getOperator <em>Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Operator</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_expression#getOperator()
   * @see #getsimple_expression()
   * @generated
   */
  EAttribute getsimple_expression_Operator();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.simple_expression#getExpression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expression</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_expression#getExpression()
   * @see #getsimple_expression()
   * @generated
   */
  EReference getsimple_expression_Expression();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.term <em>term</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>term</em>'.
   * @see org.xtext.compiler.pascal.pascal.term
   * @generated
   */
  EClass getterm();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.term#getFactor <em>Factor</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Factor</em>'.
   * @see org.xtext.compiler.pascal.pascal.term#getFactor()
   * @see #getterm()
   * @generated
   */
  EReference getterm_Factor();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.term#getOperator <em>Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Operator</em>'.
   * @see org.xtext.compiler.pascal.pascal.term#getOperator()
   * @see #getterm()
   * @generated
   */
  EAttribute getterm_Operator();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.term#getTerm2 <em>Term2</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Term2</em>'.
   * @see org.xtext.compiler.pascal.pascal.term#getTerm2()
   * @see #getterm()
   * @generated
   */
  EReference getterm_Term2();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.signed_factor <em>signed factor</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>signed factor</em>'.
   * @see org.xtext.compiler.pascal.pascal.signed_factor
   * @generated
   */
  EClass getsigned_factor();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.signed_factor#getSignal <em>Signal</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Signal</em>'.
   * @see org.xtext.compiler.pascal.pascal.signed_factor#getSignal()
   * @see #getsigned_factor()
   * @generated
   */
  EAttribute getsigned_factor_Signal();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.signed_factor#getFactor <em>Factor</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Factor</em>'.
   * @see org.xtext.compiler.pascal.pascal.signed_factor#getFactor()
   * @see #getsigned_factor()
   * @generated
   */
  EReference getsigned_factor_Factor();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.factor <em>factor</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>factor</em>'.
   * @see org.xtext.compiler.pascal.pascal.factor
   * @generated
   */
  EClass getfactor();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.factor#getVariable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Variable</em>'.
   * @see org.xtext.compiler.pascal.pascal.factor#getVariable()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Variable();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.factor#getExpression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expression</em>'.
   * @see org.xtext.compiler.pascal.pascal.factor#getExpression()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Expression();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.factor#getFunction <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Function</em>'.
   * @see org.xtext.compiler.pascal.pascal.factor#getFunction()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Function();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.factor#getConstant <em>Constant</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Constant</em>'.
   * @see org.xtext.compiler.pascal.pascal.factor#getConstant()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Constant();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.factor#getNot_factor <em>Not factor</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Not factor</em>'.
   * @see org.xtext.compiler.pascal.pascal.factor#getNot_factor()
   * @see #getfactor()
   * @generated
   */
  EReference getfactor_Not_factor();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.factor#getBool_factor <em>Bool factor</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Bool factor</em>'.
   * @see org.xtext.compiler.pascal.pascal.factor#getBool_factor()
   * @see #getfactor()
   * @generated
   */
  EAttribute getfactor_Bool_factor();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.type <em>type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>type</em>'.
   * @see org.xtext.compiler.pascal.pascal.type
   * @generated
   */
  EClass gettype();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.type#getSimple <em>Simple</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Simple</em>'.
   * @see org.xtext.compiler.pascal.pascal.type#getSimple()
   * @see #gettype()
   * @generated
   */
  EReference gettype_Simple();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.type#getStructured <em>Structured</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Structured</em>'.
   * @see org.xtext.compiler.pascal.pascal.type#getStructured()
   * @see #gettype()
   * @generated
   */
  EReference gettype_Structured();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.simple_type <em>simple type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>simple type</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_type
   * @generated
   */
  EClass getsimple_type();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.simple_type#getType <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Type</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_type#getType()
   * @see #getsimple_type()
   * @generated
   */
  EReference getsimple_type_Type();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.simple_type#getSubrange_type <em>Subrange type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Subrange type</em>'.
   * @see org.xtext.compiler.pascal.pascal.simple_type#getSubrange_type()
   * @see #getsimple_type()
   * @generated
   */
  EReference getsimple_type_Subrange_type();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.subrange_type <em>subrange type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>subrange type</em>'.
   * @see org.xtext.compiler.pascal.pascal.subrange_type
   * @generated
   */
  EClass getsubrange_type();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.subrange_type#getConstantInit <em>Constant Init</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Constant Init</em>'.
   * @see org.xtext.compiler.pascal.pascal.subrange_type#getConstantInit()
   * @see #getsubrange_type()
   * @generated
   */
  EReference getsubrange_type_ConstantInit();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.subrange_type#getConstantFinal <em>Constant Final</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Constant Final</em>'.
   * @see org.xtext.compiler.pascal.pascal.subrange_type#getConstantFinal()
   * @see #getsubrange_type()
   * @generated
   */
  EReference getsubrange_type_ConstantFinal();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.structured_type <em>structured type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>structured type</em>'.
   * @see org.xtext.compiler.pascal.pascal.structured_type
   * @generated
   */
  EClass getstructured_type();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.structured_type#getUnpacked <em>Unpacked</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Unpacked</em>'.
   * @see org.xtext.compiler.pascal.pascal.structured_type#getUnpacked()
   * @see #getstructured_type()
   * @generated
   */
  EReference getstructured_type_Unpacked();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.unpacked_structured_type <em>unpacked structured type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>unpacked structured type</em>'.
   * @see org.xtext.compiler.pascal.pascal.unpacked_structured_type
   * @generated
   */
  EClass getunpacked_structured_type();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.unpacked_structured_type#getStatic_array <em>Static array</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Static array</em>'.
   * @see org.xtext.compiler.pascal.pascal.unpacked_structured_type#getStatic_array()
   * @see #getunpacked_structured_type()
   * @generated
   */
  EReference getunpacked_structured_type_Static_array();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.unpacked_structured_type#getDynamic <em>Dynamic</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Dynamic</em>'.
   * @see org.xtext.compiler.pascal.pascal.unpacked_structured_type#getDynamic()
   * @see #getunpacked_structured_type()
   * @generated
   */
  EReference getunpacked_structured_type_Dynamic();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.dynamic_array_type <em>dynamic array type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>dynamic array type</em>'.
   * @see org.xtext.compiler.pascal.pascal.dynamic_array_type
   * @generated
   */
  EClass getdynamic_array_type();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.dynamic_array_type#getType <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Type</em>'.
   * @see org.xtext.compiler.pascal.pascal.dynamic_array_type#getType()
   * @see #getdynamic_array_type()
   * @generated
   */
  EReference getdynamic_array_type_Type();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.array_type <em>array type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>array type</em>'.
   * @see org.xtext.compiler.pascal.pascal.array_type
   * @generated
   */
  EClass getarray_type();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.array_type#getType_l <em>Type l</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Type l</em>'.
   * @see org.xtext.compiler.pascal.pascal.array_type#getType_l()
   * @see #getarray_type()
   * @generated
   */
  EReference getarray_type_Type_l();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.array_type#getType <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Type</em>'.
   * @see org.xtext.compiler.pascal.pascal.array_type#getType()
   * @see #getarray_type()
   * @generated
   */
  EReference getarray_type_Type();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.type_list <em>type list</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>type list</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_list
   * @generated
   */
  EClass gettype_list();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.type_list#getIndexes <em>Indexes</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Indexes</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_list#getIndexes()
   * @see #gettype_list()
   * @generated
   */
  EReference gettype_list_Indexes();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.index_type <em>index type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>index type</em>'.
   * @see org.xtext.compiler.pascal.pascal.index_type
   * @generated
   */
  EClass getindex_type();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.index_type#getContent <em>Content</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Content</em>'.
   * @see org.xtext.compiler.pascal.pascal.index_type#getContent()
   * @see #getindex_type()
   * @generated
   */
  EReference getindex_type_Content();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.component_type <em>component type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>component type</em>'.
   * @see org.xtext.compiler.pascal.pascal.component_type
   * @generated
   */
  EClass getcomponent_type();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.type_identifier <em>type identifier</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>type identifier</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_identifier
   * @generated
   */
  EClass gettype_identifier();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.type_identifier#getId <em>Id</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Id</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_identifier#getId()
   * @see #gettype_identifier()
   * @generated
   */
  EAttribute gettype_identifier_Id();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.type_identifier#getBoolean <em>Boolean</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Boolean</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_identifier#getBoolean()
   * @see #gettype_identifier()
   * @generated
   */
  EAttribute gettype_identifier_Boolean();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.type_identifier#getInteger <em>Integer</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Integer</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_identifier#getInteger()
   * @see #gettype_identifier()
   * @generated
   */
  EAttribute gettype_identifier_Integer();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.type_identifier#getString <em>String</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>String</em>'.
   * @see org.xtext.compiler.pascal.pascal.type_identifier#getString()
   * @see #gettype_identifier()
   * @generated
   */
  EAttribute gettype_identifier_String();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.unsigned_constant <em>unsigned constant</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>unsigned constant</em>'.
   * @see org.xtext.compiler.pascal.pascal.unsigned_constant
   * @generated
   */
  EClass getunsigned_constant();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.unsigned_constant#getNumber <em>Number</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Number</em>'.
   * @see org.xtext.compiler.pascal.pascal.unsigned_constant#getNumber()
   * @see #getunsigned_constant()
   * @generated
   */
  EReference getunsigned_constant_Number();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.unsigned_constant#getString <em>String</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>String</em>'.
   * @see org.xtext.compiler.pascal.pascal.unsigned_constant#getString()
   * @see #getunsigned_constant()
   * @generated
   */
  EAttribute getunsigned_constant_String();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.unsigned_constant#getNil <em>Nil</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Nil</em>'.
   * @see org.xtext.compiler.pascal.pascal.unsigned_constant#getNil()
   * @see #getunsigned_constant()
   * @generated
   */
  EAttribute getunsigned_constant_Nil();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.unsigned_number <em>unsigned number</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>unsigned number</em>'.
   * @see org.xtext.compiler.pascal.pascal.unsigned_number
   * @generated
   */
  EClass getunsigned_number();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.unsigned_number#getNumbers <em>Numbers</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Numbers</em>'.
   * @see org.xtext.compiler.pascal.pascal.unsigned_number#getNumbers()
   * @see #getunsigned_number()
   * @generated
   */
  EAttribute getunsigned_number_Numbers();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.procedure_statement <em>procedure statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>procedure statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_statement
   * @generated
   */
  EClass getprocedure_statement();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.procedure_statement#getName_id <em>Name id</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name id</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_statement#getName_id()
   * @see #getprocedure_statement()
   * @generated
   */
  EAttribute getprocedure_statement_Name_id();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.procedure_statement#getParameters <em>Parameters</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Parameters</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_statement#getParameters()
   * @see #getprocedure_statement()
   * @generated
   */
  EReference getprocedure_statement_Parameters();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.parameter_list <em>parameter list</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>parameter list</em>'.
   * @see org.xtext.compiler.pascal.pascal.parameter_list
   * @generated
   */
  EClass getparameter_list();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.parameter_list#getParameters <em>Parameters</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Parameters</em>'.
   * @see org.xtext.compiler.pascal.pascal.parameter_list#getParameters()
   * @see #getparameter_list()
   * @generated
   */
  EReference getparameter_list_Parameters();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.actual_parameter <em>actual parameter</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>actual parameter</em>'.
   * @see org.xtext.compiler.pascal.pascal.actual_parameter
   * @generated
   */
  EClass getactual_parameter();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.actual_parameter#getContent <em>Content</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Content</em>'.
   * @see org.xtext.compiler.pascal.pascal.actual_parameter#getContent()
   * @see #getactual_parameter()
   * @generated
   */
  EReference getactual_parameter_Content();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.structured_statement <em>structured statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>structured statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.structured_statement
   * @generated
   */
  EClass getstructured_statement();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.structured_statement#getCompound_stat <em>Compound stat</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Compound stat</em>'.
   * @see org.xtext.compiler.pascal.pascal.structured_statement#getCompound_stat()
   * @see #getstructured_statement()
   * @generated
   */
  EReference getstructured_statement_Compound_stat();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.structured_statement#getConditional_stat <em>Conditional stat</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Conditional stat</em>'.
   * @see org.xtext.compiler.pascal.pascal.structured_statement#getConditional_stat()
   * @see #getstructured_statement()
   * @generated
   */
  EReference getstructured_statement_Conditional_stat();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.conditional_statement <em>conditional statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>conditional statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.conditional_statement
   * @generated
   */
  EClass getconditional_statement();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.conditional_statement#getCond_statements <em>Cond statements</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Cond statements</em>'.
   * @see org.xtext.compiler.pascal.pascal.conditional_statement#getCond_statements()
   * @see #getconditional_statement()
   * @generated
   */
  EReference getconditional_statement_Cond_statements();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.case_statement <em>case statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>case statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.case_statement
   * @generated
   */
  EClass getcase_statement();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.case_statement#getExp <em>Exp</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Exp</em>'.
   * @see org.xtext.compiler.pascal.pascal.case_statement#getExp()
   * @see #getcase_statement()
   * @generated
   */
  EReference getcase_statement_Exp();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.case_statement#getCase_list <em>Case list</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Case list</em>'.
   * @see org.xtext.compiler.pascal.pascal.case_statement#getCase_list()
   * @see #getcase_statement()
   * @generated
   */
  EReference getcase_statement_Case_list();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.case_statement#getCase_statements <em>Case statements</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Case statements</em>'.
   * @see org.xtext.compiler.pascal.pascal.case_statement#getCase_statements()
   * @see #getcase_statement()
   * @generated
   */
  EReference getcase_statement_Case_statements();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.case_list_element <em>case list element</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>case list element</em>'.
   * @see org.xtext.compiler.pascal.pascal.case_list_element
   * @generated
   */
  EClass getcase_list_element();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.case_list_element#getConsts <em>Consts</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Consts</em>'.
   * @see org.xtext.compiler.pascal.pascal.case_list_element#getConsts()
   * @see #getcase_list_element()
   * @generated
   */
  EReference getcase_list_element_Consts();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.case_list_element#getCase_statement <em>Case statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Case statement</em>'.
   * @see org.xtext.compiler.pascal.pascal.case_list_element#getCase_statement()
   * @see #getcase_list_element()
   * @generated
   */
  EReference getcase_list_element_Case_statement();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.const_list <em>const list</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>const list</em>'.
   * @see org.xtext.compiler.pascal.pascal.const_list
   * @generated
   */
  EClass getconst_list();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.const_list#getConstants <em>Constants</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Constants</em>'.
   * @see org.xtext.compiler.pascal.pascal.const_list#getConstants()
   * @see #getconst_list()
   * @generated
   */
  EReference getconst_list_Constants();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.procedure_and_function_declaration_part <em>procedure and function declaration part</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>procedure and function declaration part</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_and_function_declaration_part
   * @generated
   */
  EClass getprocedure_and_function_declaration_part();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.procedure_and_function_declaration_part#getSubroutine <em>Subroutine</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Subroutine</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_and_function_declaration_part#getSubroutine()
   * @see #getprocedure_and_function_declaration_part()
   * @generated
   */
  EReference getprocedure_and_function_declaration_part_Subroutine();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.procedure_or_function_declaration <em>procedure or function declaration</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>procedure or function declaration</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_or_function_declaration
   * @generated
   */
  EClass getprocedure_or_function_declaration();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.procedure_or_function_declaration#getProc <em>Proc</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Proc</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_or_function_declaration#getProc()
   * @see #getprocedure_or_function_declaration()
   * @generated
   */
  EReference getprocedure_or_function_declaration_Proc();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.procedure_or_function_declaration#getFunc <em>Func</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Func</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_or_function_declaration#getFunc()
   * @see #getprocedure_or_function_declaration()
   * @generated
   */
  EReference getprocedure_or_function_declaration_Func();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.procedure_declaration <em>procedure declaration</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>procedure declaration</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_declaration
   * @generated
   */
  EClass getprocedure_declaration();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.procedure_declaration#getNames <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Names</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_declaration#getNames()
   * @see #getprocedure_declaration()
   * @generated
   */
  EAttribute getprocedure_declaration_Names();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.procedure_declaration#getParameters <em>Parameters</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Parameters</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_declaration#getParameters()
   * @see #getprocedure_declaration()
   * @generated
   */
  EReference getprocedure_declaration_Parameters();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.procedure_declaration#getBlock <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Block</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_declaration#getBlock()
   * @see #getprocedure_declaration()
   * @generated
   */
  EReference getprocedure_declaration_Block();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.procedure_type <em>procedure type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>procedure type</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_type
   * @generated
   */
  EClass getprocedure_type();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.procedure_type#getTypes <em>Types</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Types</em>'.
   * @see org.xtext.compiler.pascal.pascal.procedure_type#getTypes()
   * @see #getprocedure_type()
   * @generated
   */
  EReference getprocedure_type_Types();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.function_declaration <em>function declaration</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>function declaration</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_declaration
   * @generated
   */
  EClass getfunction_declaration();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.function_declaration#getNames <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Names</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_declaration#getNames()
   * @see #getfunction_declaration()
   * @generated
   */
  EAttribute getfunction_declaration_Names();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.function_declaration#getParameters <em>Parameters</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Parameters</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_declaration#getParameters()
   * @see #getfunction_declaration()
   * @generated
   */
  EReference getfunction_declaration_Parameters();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.function_declaration#getTypes <em>Types</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Types</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_declaration#getTypes()
   * @see #getfunction_declaration()
   * @generated
   */
  EReference getfunction_declaration_Types();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.function_declaration#getBlock <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Block</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_declaration#getBlock()
   * @see #getfunction_declaration()
   * @generated
   */
  EReference getfunction_declaration_Block();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.function_type <em>function type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>function type</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_type
   * @generated
   */
  EClass getfunction_type();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.function_type#getParameters <em>Parameters</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Parameters</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_type#getParameters()
   * @see #getfunction_type()
   * @generated
   */
  EReference getfunction_type_Parameters();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.function_type#getTypes <em>Types</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Types</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_type#getTypes()
   * @see #getfunction_type()
   * @generated
   */
  EReference getfunction_type_Types();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.function_designator <em>function designator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>function designator</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_designator
   * @generated
   */
  EClass getfunction_designator();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.compiler.pascal.pascal.function_designator#getName_function <em>Name function</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name function</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_designator#getName_function()
   * @see #getfunction_designator()
   * @generated
   */
  EAttribute getfunction_designator_Name_function();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.function_designator#getParameters <em>Parameters</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Parameters</em>'.
   * @see org.xtext.compiler.pascal.pascal.function_designator#getParameters()
   * @see #getfunction_designator()
   * @generated
   */
  EReference getfunction_designator_Parameters();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.formal_parameter_list <em>formal parameter list</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>formal parameter list</em>'.
   * @see org.xtext.compiler.pascal.pascal.formal_parameter_list
   * @generated
   */
  EClass getformal_parameter_list();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.formal_parameter_list#getParameters <em>Parameters</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Parameters</em>'.
   * @see org.xtext.compiler.pascal.pascal.formal_parameter_list#getParameters()
   * @see #getformal_parameter_list()
   * @generated
   */
  EReference getformal_parameter_list_Parameters();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.formal_parameter_section <em>formal parameter section</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>formal parameter section</em>'.
   * @see org.xtext.compiler.pascal.pascal.formal_parameter_section
   * @generated
   */
  EClass getformal_parameter_section();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.compiler.pascal.pascal.formal_parameter_section#getParameters <em>Parameters</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Parameters</em>'.
   * @see org.xtext.compiler.pascal.pascal.formal_parameter_section#getParameters()
   * @see #getformal_parameter_section()
   * @generated
   */
  EReference getformal_parameter_section_Parameters();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.parameter_group <em>parameter group</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>parameter group</em>'.
   * @see org.xtext.compiler.pascal.pascal.parameter_group
   * @generated
   */
  EClass getparameter_group();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.parameter_group#getNames <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Names</em>'.
   * @see org.xtext.compiler.pascal.pascal.parameter_group#getNames()
   * @see #getparameter_group()
   * @generated
   */
  EReference getparameter_group_Names();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.compiler.pascal.pascal.parameter_group#getTypes <em>Types</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Types</em>'.
   * @see org.xtext.compiler.pascal.pascal.parameter_group#getTypes()
   * @see #getparameter_group()
   * @generated
   */
  EReference getparameter_group_Types();

  /**
   * Returns the meta object for class '{@link org.xtext.compiler.pascal.pascal.result_type <em>result type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>result type</em>'.
   * @see org.xtext.compiler.pascal.pascal.result_type
   * @generated
   */
  EClass getresult_type();

  /**
   * Returns the factory that creates the instances of the model.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the factory that creates the instances of the model.
   * @generated
   */
  PascalFactory getPascalFactory();

  /**
   * <!-- begin-user-doc -->
   * Defines literals for the meta objects that represent
   * <ul>
   *   <li>each class,</li>
   *   <li>each feature of each class,</li>
   *   <li>each enum,</li>
   *   <li>and each data type</li>
   * </ul>
   * <!-- end-user-doc -->
   * @generated
   */
  interface Literals
  {
    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.pascalImpl <em>pascal</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.pascalImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getpascal()
     * @generated
     */
    EClass PASCAL = eINSTANCE.getpascal();

    /**
     * The meta object literal for the '<em><b>Program</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PASCAL__PROGRAM = eINSTANCE.getpascal_Program();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.programImpl <em>program</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.programImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprogram()
     * @generated
     */
    EClass PROGRAM = eINSTANCE.getprogram();

    /**
     * The meta object literal for the '<em><b>Heading</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROGRAM__HEADING = eINSTANCE.getprogram_Heading();

    /**
     * The meta object literal for the '<em><b>Block</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROGRAM__BLOCK = eINSTANCE.getprogram_Block();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.program_heading_blockImpl <em>program heading block</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.program_heading_blockImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprogram_heading_block()
     * @generated
     */
    EClass PROGRAM_HEADING_BLOCK = eINSTANCE.getprogram_heading_block();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute PROGRAM_HEADING_BLOCK__NAME = eINSTANCE.getprogram_heading_block_Name();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.identifier_listImpl <em>identifier list</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.identifier_listImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getidentifier_list()
     * @generated
     */
    EClass IDENTIFIER_LIST = eINSTANCE.getidentifier_list();

    /**
     * The meta object literal for the '<em><b>Names</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference IDENTIFIER_LIST__NAMES = eINSTANCE.getidentifier_list_Names();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.identifierImpl <em>identifier</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.identifierImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getidentifier()
     * @generated
     */
    EClass IDENTIFIER = eINSTANCE.getidentifier();

    /**
     * The meta object literal for the '<em><b>Id</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute IDENTIFIER__ID = eINSTANCE.getidentifier_Id();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.blockImpl <em>block</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.blockImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getblock()
     * @generated
     */
    EClass BLOCK = eINSTANCE.getblock();

    /**
     * The meta object literal for the '<em><b>Constantpart</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference BLOCK__CONSTANTPART = eINSTANCE.getblock_Constantpart();

    /**
     * The meta object literal for the '<em><b>Type part</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference BLOCK__TYPE_PART = eINSTANCE.getblock_Type_part();

    /**
     * The meta object literal for the '<em><b>Variablepart</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference BLOCK__VARIABLEPART = eINSTANCE.getblock_Variablepart();

    /**
     * The meta object literal for the '<em><b>Procedure function part</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference BLOCK__PROCEDURE_FUNCTION_PART = eINSTANCE.getblock_Procedure_function_part();

    /**
     * The meta object literal for the '<em><b>Statement</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference BLOCK__STATEMENT = eINSTANCE.getblock_Statement();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.constant_definition_partImpl <em>constant definition part</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.constant_definition_partImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconstant_definition_part()
     * @generated
     */
    EClass CONSTANT_DEFINITION_PART = eINSTANCE.getconstant_definition_part();

    /**
     * The meta object literal for the '<em><b>Constants</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CONSTANT_DEFINITION_PART__CONSTANTS = eINSTANCE.getconstant_definition_part_Constants();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.constant_definitionImpl <em>constant definition</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.constant_definitionImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconstant_definition()
     * @generated
     */
    EClass CONSTANT_DEFINITION = eINSTANCE.getconstant_definition();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute CONSTANT_DEFINITION__NAME = eINSTANCE.getconstant_definition_Name();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.constantImpl <em>constant</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.constantImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconstant()
     * @generated
     */
    EClass CONSTANT = eINSTANCE.getconstant();

    /**
     * The meta object literal for the '<em><b>Uns number</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CONSTANT__UNS_NUMBER = eINSTANCE.getconstant_Uns_number();

    /**
     * The meta object literal for the '<em><b>Sig number</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CONSTANT__SIG_NUMBER = eINSTANCE.getconstant_Sig_number();

    /**
     * The meta object literal for the '<em><b>Name id</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute CONSTANT__NAME_ID = eINSTANCE.getconstant_Name_id();

    /**
     * The meta object literal for the '<em><b>Sig name id</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute CONSTANT__SIG_NAME_ID = eINSTANCE.getconstant_Sig_name_id();

    /**
     * The meta object literal for the '<em><b>String</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute CONSTANT__STRING = eINSTANCE.getconstant_String();

    /**
     * The meta object literal for the '<em><b>Booltype</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute CONSTANT__BOOLTYPE = eINSTANCE.getconstant_Booltype();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.type_definition_partImpl <em>type definition part</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.type_definition_partImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype_definition_part()
     * @generated
     */
    EClass TYPE_DEFINITION_PART = eINSTANCE.gettype_definition_part();

    /**
     * The meta object literal for the '<em><b>Types</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference TYPE_DEFINITION_PART__TYPES = eINSTANCE.gettype_definition_part_Types();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.type_definitionImpl <em>type definition</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.type_definitionImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype_definition()
     * @generated
     */
    EClass TYPE_DEFINITION = eINSTANCE.gettype_definition();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute TYPE_DEFINITION__NAME = eINSTANCE.gettype_definition_Name();

    /**
     * The meta object literal for the '<em><b>Type</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference TYPE_DEFINITION__TYPE = eINSTANCE.gettype_definition_Type();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.variable_declaration_partImpl <em>variable declaration part</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.variable_declaration_partImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getvariable_declaration_part()
     * @generated
     */
    EClass VARIABLE_DECLARATION_PART = eINSTANCE.getvariable_declaration_part();

    /**
     * The meta object literal for the '<em><b>Variable</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference VARIABLE_DECLARATION_PART__VARIABLE = eINSTANCE.getvariable_declaration_part_Variable();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.variable_declarationImpl <em>variable declaration</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.variable_declarationImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getvariable_declaration()
     * @generated
     */
    EClass VARIABLE_DECLARATION = eINSTANCE.getvariable_declaration();

    /**
     * The meta object literal for the '<em><b>List names</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference VARIABLE_DECLARATION__LIST_NAMES = eINSTANCE.getvariable_declaration_List_names();

    /**
     * The meta object literal for the '<em><b>Type variable</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference VARIABLE_DECLARATION__TYPE_VARIABLE = eINSTANCE.getvariable_declaration_Type_variable();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.compound_statementImpl <em>compound statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.compound_statementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getcompound_statement()
     * @generated
     */
    EClass COMPOUND_STATEMENT = eINSTANCE.getcompound_statement();

    /**
     * The meta object literal for the '<em><b>Sequence</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference COMPOUND_STATEMENT__SEQUENCE = eINSTANCE.getcompound_statement_Sequence();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.statementsImpl <em>statements</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.statementsImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getstatements()
     * @generated
     */
    EClass STATEMENTS = eINSTANCE.getstatements();

    /**
     * The meta object literal for the '<em><b>Statements</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference STATEMENTS__STATEMENTS = eINSTANCE.getstatements_Statements();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.statementImpl <em>statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.statementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getstatement()
     * @generated
     */
    EClass STATEMENT = eINSTANCE.getstatement();

    /**
     * The meta object literal for the '<em><b>Statement</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference STATEMENT__STATEMENT = eINSTANCE.getstatement_Statement();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.unlabelled_statementImpl <em>unlabelled statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.unlabelled_statementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getunlabelled_statement()
     * @generated
     */
    EClass UNLABELLED_STATEMENT = eINSTANCE.getunlabelled_statement();

    /**
     * The meta object literal for the '<em><b>Simple</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference UNLABELLED_STATEMENT__SIMPLE = eINSTANCE.getunlabelled_statement_Simple();

    /**
     * The meta object literal for the '<em><b>Structured</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference UNLABELLED_STATEMENT__STRUCTURED = eINSTANCE.getunlabelled_statement_Structured();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.simple_statementImpl <em>simple statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.simple_statementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsimple_statement()
     * @generated
     */
    EClass SIMPLE_STATEMENT = eINSTANCE.getsimple_statement();

    /**
     * The meta object literal for the '<em><b>Assignment</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIMPLE_STATEMENT__ASSIGNMENT = eINSTANCE.getsimple_statement_Assignment();

    /**
     * The meta object literal for the '<em><b>Procedure</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIMPLE_STATEMENT__PROCEDURE = eINSTANCE.getsimple_statement_Procedure();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.assignment_statementImpl <em>assignment statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.assignment_statementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getassignment_statement()
     * @generated
     */
    EClass ASSIGNMENT_STATEMENT = eINSTANCE.getassignment_statement();

    /**
     * The meta object literal for the '<em><b>Declared variable</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ASSIGNMENT_STATEMENT__DECLARED_VARIABLE = eINSTANCE.getassignment_statement_Declared_variable();

    /**
     * The meta object literal for the '<em><b>Expression</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ASSIGNMENT_STATEMENT__EXPRESSION = eINSTANCE.getassignment_statement_Expression();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.variableImpl <em>variable</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.variableImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getvariable()
     * @generated
     */
    EClass VARIABLE = eINSTANCE.getvariable();

    /**
     * The meta object literal for the '<em><b>Variable id</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute VARIABLE__VARIABLE_ID = eINSTANCE.getvariable_Variable_id();

    /**
     * The meta object literal for the '<em><b>Indice</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference VARIABLE__INDICE = eINSTANCE.getvariable_Indice();

    /**
     * The meta object literal for the '<em><b>Expression</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference VARIABLE__EXPRESSION = eINSTANCE.getvariable_Expression();

    /**
     * The meta object literal for the '<em><b>Names exp</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute VARIABLE__NAMES_EXP = eINSTANCE.getvariable_Names_exp();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.expressionImpl <em>expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.expressionImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getexpression()
     * @generated
     */
    EClass EXPRESSION = eINSTANCE.getexpression();

    /**
     * The meta object literal for the '<em><b>Simple</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPRESSION__SIMPLE = eINSTANCE.getexpression_Simple();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.simple_expressionImpl <em>simple expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.simple_expressionImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsimple_expression()
     * @generated
     */
    EClass SIMPLE_EXPRESSION = eINSTANCE.getsimple_expression();

    /**
     * The meta object literal for the '<em><b>Term exp</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIMPLE_EXPRESSION__TERM_EXP = eINSTANCE.getsimple_expression_Term_exp();

    /**
     * The meta object literal for the '<em><b>Operator</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SIMPLE_EXPRESSION__OPERATOR = eINSTANCE.getsimple_expression_Operator();

    /**
     * The meta object literal for the '<em><b>Expression</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIMPLE_EXPRESSION__EXPRESSION = eINSTANCE.getsimple_expression_Expression();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.termImpl <em>term</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.termImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getterm()
     * @generated
     */
    EClass TERM = eINSTANCE.getterm();

    /**
     * The meta object literal for the '<em><b>Factor</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference TERM__FACTOR = eINSTANCE.getterm_Factor();

    /**
     * The meta object literal for the '<em><b>Operator</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute TERM__OPERATOR = eINSTANCE.getterm_Operator();

    /**
     * The meta object literal for the '<em><b>Term2</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference TERM__TERM2 = eINSTANCE.getterm_Term2();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.signed_factorImpl <em>signed factor</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.signed_factorImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsigned_factor()
     * @generated
     */
    EClass SIGNED_FACTOR = eINSTANCE.getsigned_factor();

    /**
     * The meta object literal for the '<em><b>Signal</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute SIGNED_FACTOR__SIGNAL = eINSTANCE.getsigned_factor_Signal();

    /**
     * The meta object literal for the '<em><b>Factor</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIGNED_FACTOR__FACTOR = eINSTANCE.getsigned_factor_Factor();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.factorImpl <em>factor</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.factorImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfactor()
     * @generated
     */
    EClass FACTOR = eINSTANCE.getfactor();

    /**
     * The meta object literal for the '<em><b>Variable</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__VARIABLE = eINSTANCE.getfactor_Variable();

    /**
     * The meta object literal for the '<em><b>Expression</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__EXPRESSION = eINSTANCE.getfactor_Expression();

    /**
     * The meta object literal for the '<em><b>Function</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__FUNCTION = eINSTANCE.getfactor_Function();

    /**
     * The meta object literal for the '<em><b>Constant</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__CONSTANT = eINSTANCE.getfactor_Constant();

    /**
     * The meta object literal for the '<em><b>Not factor</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FACTOR__NOT_FACTOR = eINSTANCE.getfactor_Not_factor();

    /**
     * The meta object literal for the '<em><b>Bool factor</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute FACTOR__BOOL_FACTOR = eINSTANCE.getfactor_Bool_factor();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.typeImpl <em>type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype()
     * @generated
     */
    EClass TYPE = eINSTANCE.gettype();

    /**
     * The meta object literal for the '<em><b>Simple</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference TYPE__SIMPLE = eINSTANCE.gettype_Simple();

    /**
     * The meta object literal for the '<em><b>Structured</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference TYPE__STRUCTURED = eINSTANCE.gettype_Structured();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.simple_typeImpl <em>simple type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.simple_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsimple_type()
     * @generated
     */
    EClass SIMPLE_TYPE = eINSTANCE.getsimple_type();

    /**
     * The meta object literal for the '<em><b>Type</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIMPLE_TYPE__TYPE = eINSTANCE.getsimple_type_Type();

    /**
     * The meta object literal for the '<em><b>Subrange type</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SIMPLE_TYPE__SUBRANGE_TYPE = eINSTANCE.getsimple_type_Subrange_type();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.subrange_typeImpl <em>subrange type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.subrange_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getsubrange_type()
     * @generated
     */
    EClass SUBRANGE_TYPE = eINSTANCE.getsubrange_type();

    /**
     * The meta object literal for the '<em><b>Constant Init</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SUBRANGE_TYPE__CONSTANT_INIT = eINSTANCE.getsubrange_type_ConstantInit();

    /**
     * The meta object literal for the '<em><b>Constant Final</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SUBRANGE_TYPE__CONSTANT_FINAL = eINSTANCE.getsubrange_type_ConstantFinal();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.structured_typeImpl <em>structured type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.structured_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getstructured_type()
     * @generated
     */
    EClass STRUCTURED_TYPE = eINSTANCE.getstructured_type();

    /**
     * The meta object literal for the '<em><b>Unpacked</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference STRUCTURED_TYPE__UNPACKED = eINSTANCE.getstructured_type_Unpacked();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.unpacked_structured_typeImpl <em>unpacked structured type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.unpacked_structured_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getunpacked_structured_type()
     * @generated
     */
    EClass UNPACKED_STRUCTURED_TYPE = eINSTANCE.getunpacked_structured_type();

    /**
     * The meta object literal for the '<em><b>Static array</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference UNPACKED_STRUCTURED_TYPE__STATIC_ARRAY = eINSTANCE.getunpacked_structured_type_Static_array();

    /**
     * The meta object literal for the '<em><b>Dynamic</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference UNPACKED_STRUCTURED_TYPE__DYNAMIC = eINSTANCE.getunpacked_structured_type_Dynamic();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.dynamic_array_typeImpl <em>dynamic array type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.dynamic_array_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getdynamic_array_type()
     * @generated
     */
    EClass DYNAMIC_ARRAY_TYPE = eINSTANCE.getdynamic_array_type();

    /**
     * The meta object literal for the '<em><b>Type</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference DYNAMIC_ARRAY_TYPE__TYPE = eINSTANCE.getdynamic_array_type_Type();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.array_typeImpl <em>array type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.array_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getarray_type()
     * @generated
     */
    EClass ARRAY_TYPE = eINSTANCE.getarray_type();

    /**
     * The meta object literal for the '<em><b>Type l</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ARRAY_TYPE__TYPE_L = eINSTANCE.getarray_type_Type_l();

    /**
     * The meta object literal for the '<em><b>Type</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ARRAY_TYPE__TYPE = eINSTANCE.getarray_type_Type();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.type_listImpl <em>type list</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.type_listImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype_list()
     * @generated
     */
    EClass TYPE_LIST = eINSTANCE.gettype_list();

    /**
     * The meta object literal for the '<em><b>Indexes</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference TYPE_LIST__INDEXES = eINSTANCE.gettype_list_Indexes();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.index_typeImpl <em>index type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.index_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getindex_type()
     * @generated
     */
    EClass INDEX_TYPE = eINSTANCE.getindex_type();

    /**
     * The meta object literal for the '<em><b>Content</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference INDEX_TYPE__CONTENT = eINSTANCE.getindex_type_Content();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.component_typeImpl <em>component type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.component_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getcomponent_type()
     * @generated
     */
    EClass COMPONENT_TYPE = eINSTANCE.getcomponent_type();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.type_identifierImpl <em>type identifier</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.type_identifierImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#gettype_identifier()
     * @generated
     */
    EClass TYPE_IDENTIFIER = eINSTANCE.gettype_identifier();

    /**
     * The meta object literal for the '<em><b>Id</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute TYPE_IDENTIFIER__ID = eINSTANCE.gettype_identifier_Id();

    /**
     * The meta object literal for the '<em><b>Boolean</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute TYPE_IDENTIFIER__BOOLEAN = eINSTANCE.gettype_identifier_Boolean();

    /**
     * The meta object literal for the '<em><b>Integer</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute TYPE_IDENTIFIER__INTEGER = eINSTANCE.gettype_identifier_Integer();

    /**
     * The meta object literal for the '<em><b>String</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute TYPE_IDENTIFIER__STRING = eINSTANCE.gettype_identifier_String();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.unsigned_constantImpl <em>unsigned constant</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.unsigned_constantImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getunsigned_constant()
     * @generated
     */
    EClass UNSIGNED_CONSTANT = eINSTANCE.getunsigned_constant();

    /**
     * The meta object literal for the '<em><b>Number</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference UNSIGNED_CONSTANT__NUMBER = eINSTANCE.getunsigned_constant_Number();

    /**
     * The meta object literal for the '<em><b>String</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute UNSIGNED_CONSTANT__STRING = eINSTANCE.getunsigned_constant_String();

    /**
     * The meta object literal for the '<em><b>Nil</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute UNSIGNED_CONSTANT__NIL = eINSTANCE.getunsigned_constant_Nil();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.unsigned_numberImpl <em>unsigned number</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.unsigned_numberImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getunsigned_number()
     * @generated
     */
    EClass UNSIGNED_NUMBER = eINSTANCE.getunsigned_number();

    /**
     * The meta object literal for the '<em><b>Numbers</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute UNSIGNED_NUMBER__NUMBERS = eINSTANCE.getunsigned_number_Numbers();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_statementImpl <em>procedure statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.procedure_statementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_statement()
     * @generated
     */
    EClass PROCEDURE_STATEMENT = eINSTANCE.getprocedure_statement();

    /**
     * The meta object literal for the '<em><b>Name id</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute PROCEDURE_STATEMENT__NAME_ID = eINSTANCE.getprocedure_statement_Name_id();

    /**
     * The meta object literal for the '<em><b>Parameters</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROCEDURE_STATEMENT__PARAMETERS = eINSTANCE.getprocedure_statement_Parameters();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.parameter_listImpl <em>parameter list</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.parameter_listImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getparameter_list()
     * @generated
     */
    EClass PARAMETER_LIST = eINSTANCE.getparameter_list();

    /**
     * The meta object literal for the '<em><b>Parameters</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PARAMETER_LIST__PARAMETERS = eINSTANCE.getparameter_list_Parameters();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.actual_parameterImpl <em>actual parameter</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.actual_parameterImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getactual_parameter()
     * @generated
     */
    EClass ACTUAL_PARAMETER = eINSTANCE.getactual_parameter();

    /**
     * The meta object literal for the '<em><b>Content</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ACTUAL_PARAMETER__CONTENT = eINSTANCE.getactual_parameter_Content();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.structured_statementImpl <em>structured statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.structured_statementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getstructured_statement()
     * @generated
     */
    EClass STRUCTURED_STATEMENT = eINSTANCE.getstructured_statement();

    /**
     * The meta object literal for the '<em><b>Compound stat</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference STRUCTURED_STATEMENT__COMPOUND_STAT = eINSTANCE.getstructured_statement_Compound_stat();

    /**
     * The meta object literal for the '<em><b>Conditional stat</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference STRUCTURED_STATEMENT__CONDITIONAL_STAT = eINSTANCE.getstructured_statement_Conditional_stat();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.conditional_statementImpl <em>conditional statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.conditional_statementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconditional_statement()
     * @generated
     */
    EClass CONDITIONAL_STATEMENT = eINSTANCE.getconditional_statement();

    /**
     * The meta object literal for the '<em><b>Cond statements</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CONDITIONAL_STATEMENT__COND_STATEMENTS = eINSTANCE.getconditional_statement_Cond_statements();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.case_statementImpl <em>case statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.case_statementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getcase_statement()
     * @generated
     */
    EClass CASE_STATEMENT = eINSTANCE.getcase_statement();

    /**
     * The meta object literal for the '<em><b>Exp</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CASE_STATEMENT__EXP = eINSTANCE.getcase_statement_Exp();

    /**
     * The meta object literal for the '<em><b>Case list</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CASE_STATEMENT__CASE_LIST = eINSTANCE.getcase_statement_Case_list();

    /**
     * The meta object literal for the '<em><b>Case statements</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CASE_STATEMENT__CASE_STATEMENTS = eINSTANCE.getcase_statement_Case_statements();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.case_list_elementImpl <em>case list element</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.case_list_elementImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getcase_list_element()
     * @generated
     */
    EClass CASE_LIST_ELEMENT = eINSTANCE.getcase_list_element();

    /**
     * The meta object literal for the '<em><b>Consts</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CASE_LIST_ELEMENT__CONSTS = eINSTANCE.getcase_list_element_Consts();

    /**
     * The meta object literal for the '<em><b>Case statement</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CASE_LIST_ELEMENT__CASE_STATEMENT = eINSTANCE.getcase_list_element_Case_statement();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.const_listImpl <em>const list</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.const_listImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getconst_list()
     * @generated
     */
    EClass CONST_LIST = eINSTANCE.getconst_list();

    /**
     * The meta object literal for the '<em><b>Constants</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CONST_LIST__CONSTANTS = eINSTANCE.getconst_list_Constants();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_and_function_declaration_partImpl <em>procedure and function declaration part</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.procedure_and_function_declaration_partImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_and_function_declaration_part()
     * @generated
     */
    EClass PROCEDURE_AND_FUNCTION_DECLARATION_PART = eINSTANCE.getprocedure_and_function_declaration_part();

    /**
     * The meta object literal for the '<em><b>Subroutine</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROCEDURE_AND_FUNCTION_DECLARATION_PART__SUBROUTINE = eINSTANCE.getprocedure_and_function_declaration_part_Subroutine();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_or_function_declarationImpl <em>procedure or function declaration</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.procedure_or_function_declarationImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_or_function_declaration()
     * @generated
     */
    EClass PROCEDURE_OR_FUNCTION_DECLARATION = eINSTANCE.getprocedure_or_function_declaration();

    /**
     * The meta object literal for the '<em><b>Proc</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROCEDURE_OR_FUNCTION_DECLARATION__PROC = eINSTANCE.getprocedure_or_function_declaration_Proc();

    /**
     * The meta object literal for the '<em><b>Func</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROCEDURE_OR_FUNCTION_DECLARATION__FUNC = eINSTANCE.getprocedure_or_function_declaration_Func();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_declarationImpl <em>procedure declaration</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.procedure_declarationImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_declaration()
     * @generated
     */
    EClass PROCEDURE_DECLARATION = eINSTANCE.getprocedure_declaration();

    /**
     * The meta object literal for the '<em><b>Names</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute PROCEDURE_DECLARATION__NAMES = eINSTANCE.getprocedure_declaration_Names();

    /**
     * The meta object literal for the '<em><b>Parameters</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROCEDURE_DECLARATION__PARAMETERS = eINSTANCE.getprocedure_declaration_Parameters();

    /**
     * The meta object literal for the '<em><b>Block</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROCEDURE_DECLARATION__BLOCK = eINSTANCE.getprocedure_declaration_Block();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.procedure_typeImpl <em>procedure type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.procedure_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getprocedure_type()
     * @generated
     */
    EClass PROCEDURE_TYPE = eINSTANCE.getprocedure_type();

    /**
     * The meta object literal for the '<em><b>Types</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROCEDURE_TYPE__TYPES = eINSTANCE.getprocedure_type_Types();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.function_declarationImpl <em>function declaration</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.function_declarationImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfunction_declaration()
     * @generated
     */
    EClass FUNCTION_DECLARATION = eINSTANCE.getfunction_declaration();

    /**
     * The meta object literal for the '<em><b>Names</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute FUNCTION_DECLARATION__NAMES = eINSTANCE.getfunction_declaration_Names();

    /**
     * The meta object literal for the '<em><b>Parameters</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FUNCTION_DECLARATION__PARAMETERS = eINSTANCE.getfunction_declaration_Parameters();

    /**
     * The meta object literal for the '<em><b>Types</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FUNCTION_DECLARATION__TYPES = eINSTANCE.getfunction_declaration_Types();

    /**
     * The meta object literal for the '<em><b>Block</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FUNCTION_DECLARATION__BLOCK = eINSTANCE.getfunction_declaration_Block();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.function_typeImpl <em>function type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.function_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfunction_type()
     * @generated
     */
    EClass FUNCTION_TYPE = eINSTANCE.getfunction_type();

    /**
     * The meta object literal for the '<em><b>Parameters</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FUNCTION_TYPE__PARAMETERS = eINSTANCE.getfunction_type_Parameters();

    /**
     * The meta object literal for the '<em><b>Types</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FUNCTION_TYPE__TYPES = eINSTANCE.getfunction_type_Types();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.function_designatorImpl <em>function designator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.function_designatorImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getfunction_designator()
     * @generated
     */
    EClass FUNCTION_DESIGNATOR = eINSTANCE.getfunction_designator();

    /**
     * The meta object literal for the '<em><b>Name function</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute FUNCTION_DESIGNATOR__NAME_FUNCTION = eINSTANCE.getfunction_designator_Name_function();

    /**
     * The meta object literal for the '<em><b>Parameters</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FUNCTION_DESIGNATOR__PARAMETERS = eINSTANCE.getfunction_designator_Parameters();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.formal_parameter_listImpl <em>formal parameter list</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.formal_parameter_listImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getformal_parameter_list()
     * @generated
     */
    EClass FORMAL_PARAMETER_LIST = eINSTANCE.getformal_parameter_list();

    /**
     * The meta object literal for the '<em><b>Parameters</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FORMAL_PARAMETER_LIST__PARAMETERS = eINSTANCE.getformal_parameter_list_Parameters();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.formal_parameter_sectionImpl <em>formal parameter section</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.formal_parameter_sectionImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getformal_parameter_section()
     * @generated
     */
    EClass FORMAL_PARAMETER_SECTION = eINSTANCE.getformal_parameter_section();

    /**
     * The meta object literal for the '<em><b>Parameters</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FORMAL_PARAMETER_SECTION__PARAMETERS = eINSTANCE.getformal_parameter_section_Parameters();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.parameter_groupImpl <em>parameter group</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.parameter_groupImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getparameter_group()
     * @generated
     */
    EClass PARAMETER_GROUP = eINSTANCE.getparameter_group();

    /**
     * The meta object literal for the '<em><b>Names</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PARAMETER_GROUP__NAMES = eINSTANCE.getparameter_group_Names();

    /**
     * The meta object literal for the '<em><b>Types</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PARAMETER_GROUP__TYPES = eINSTANCE.getparameter_group_Types();

    /**
     * The meta object literal for the '{@link org.xtext.compiler.pascal.pascal.impl.result_typeImpl <em>result type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.compiler.pascal.pascal.impl.result_typeImpl
     * @see org.xtext.compiler.pascal.pascal.impl.PascalPackageImpl#getresult_type()
     * @generated
     */
    EClass RESULT_TYPE = eINSTANCE.getresult_type();

  }

} //PascalPackage
