/**
 * generated by Xtext 2.14.0.RC1
 */
package org.xtext.compiler.pascal.pascal.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.compiler.pascal.pascal.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PascalFactoryImpl extends EFactoryImpl implements PascalFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PascalFactory init()
  {
    try
    {
      PascalFactory thePascalFactory = (PascalFactory)EPackage.Registry.INSTANCE.getEFactory(PascalPackage.eNS_URI);
      if (thePascalFactory != null)
      {
        return thePascalFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PascalFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PascalFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PascalPackage.PASCAL: return createpascal();
      case PascalPackage.PROGRAM: return createprogram();
      case PascalPackage.PROGRAM_HEADING_BLOCK: return createprogram_heading_block();
      case PascalPackage.IDENTIFIER_LIST: return createidentifier_list();
      case PascalPackage.BLOCK: return createblock();
      case PascalPackage.CONSTANT_DEFINITION_PART: return createconstant_definition_part();
      case PascalPackage.CONSTANT_DEFINITION: return createconstant_definition();
      case PascalPackage.CONSTANT: return createconstant();
      case PascalPackage.VARIABLE_DECLARATION_PART: return createvariable_declaration_part();
      case PascalPackage.VARIABLE_DECLARATION: return createvariable_declaration();
      case PascalPackage.COMPOUND_STATEMENT: return createcompound_statement();
      case PascalPackage.STATEMENTS: return createstatements();
      case PascalPackage.STATEMENT: return createstatement();
      case PascalPackage.UNLABELLED_STATEMENT: return createunlabelled_statement();
      case PascalPackage.LABEL: return createlabel();
      case PascalPackage.SIMPLE_STATEMENT: return createsimple_statement();
      case PascalPackage.ASSIGNMENT_STATEMENT: return createassignment_statement();
      case PascalPackage.VARIABLE: return createvariable();
      case PascalPackage.EXPRESSION: return createexpression();
      case PascalPackage.SIMPLE_EXPRESSION: return createsimple_expression();
      case PascalPackage.TERM: return createterm();
      case PascalPackage.SIGNED_FACTOR: return createsigned_factor();
      case PascalPackage.FACTOR: return createfactor();
      case PascalPackage.SET: return createset();
      case PascalPackage.ELEMENT_LIST: return createelementList();
      case PascalPackage.ELEMENT: return createelement();
      case PascalPackage.TYPE: return createtype();
      case PascalPackage.SIMPLE_TYPE: return createsimple_type();
      case PascalPackage.SCALAR_TYPE: return createscalar_type();
      case PascalPackage.SUBRANGE_TYPE: return createsubrange_type();
      case PascalPackage.TYPE_IDENTIFIER: return createtype_identifier();
      case PascalPackage.STRING_TYPE: return createstring_type();
      case PascalPackage.UNSIGNED_CONSTANT: return createunsigned_constant();
      case PascalPackage.UNSIGNED_NUMBER: return createunsigned_number();
      case PascalPackage.CONSTANT_CHR: return createconstant_chr();
      case PascalPackage.PROCEDURE_STATEMENT: return createprocedure_statement();
      case PascalPackage.PARAMETER_LIST: return createparameter_list();
      case PascalPackage.ACTUAL_PARAMETER: return createactual_parameter();
      case PascalPackage.PROCEDURE_AND_FUNCTION_DECLARATION_PART: return createprocedure_and_function_declaration_part();
      case PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION: return createprocedure_or_function_declaration();
      case PascalPackage.PROCEDURE_DECLARATION: return createprocedure_declaration();
      case PascalPackage.TYPE_DEFINITION: return createtype_definition();
      case PascalPackage.PROCEDURE_TYPE: return createprocedure_type();
      case PascalPackage.FUNCTION_DECLARATION: return createfunction_declaration();
      case PascalPackage.FUNCTION_TYPE: return createfunction_type();
      case PascalPackage.FORMAL_PARAMETER_LIST: return createformal_parameter_list();
      case PascalPackage.FORMAL_PARAMETER_SECTION: return createformal_parameter_section();
      case PascalPackage.PARAMETER_GROUP: return createparameter_group();
      case PascalPackage.RESULT_TYPE: return createresult_type();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public pascal createpascal()
  {
    pascalImpl pascal = new pascalImpl();
    return pascal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public program createprogram()
  {
    programImpl program = new programImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public program_heading_block createprogram_heading_block()
  {
    program_heading_blockImpl program_heading_block = new program_heading_blockImpl();
    return program_heading_block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public identifier_list createidentifier_list()
  {
    identifier_listImpl identifier_list = new identifier_listImpl();
    return identifier_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public block createblock()
  {
    blockImpl block = new blockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public constant_definition_part createconstant_definition_part()
  {
    constant_definition_partImpl constant_definition_part = new constant_definition_partImpl();
    return constant_definition_part;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public constant_definition createconstant_definition()
  {
    constant_definitionImpl constant_definition = new constant_definitionImpl();
    return constant_definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public constant createconstant()
  {
    constantImpl constant = new constantImpl();
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public variable_declaration_part createvariable_declaration_part()
  {
    variable_declaration_partImpl variable_declaration_part = new variable_declaration_partImpl();
    return variable_declaration_part;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public variable_declaration createvariable_declaration()
  {
    variable_declarationImpl variable_declaration = new variable_declarationImpl();
    return variable_declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public compound_statement createcompound_statement()
  {
    compound_statementImpl compound_statement = new compound_statementImpl();
    return compound_statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public statements createstatements()
  {
    statementsImpl statements = new statementsImpl();
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public statement createstatement()
  {
    statementImpl statement = new statementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public unlabelled_statement createunlabelled_statement()
  {
    unlabelled_statementImpl unlabelled_statement = new unlabelled_statementImpl();
    return unlabelled_statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public label createlabel()
  {
    labelImpl label = new labelImpl();
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public simple_statement createsimple_statement()
  {
    simple_statementImpl simple_statement = new simple_statementImpl();
    return simple_statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public assignment_statement createassignment_statement()
  {
    assignment_statementImpl assignment_statement = new assignment_statementImpl();
    return assignment_statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public variable createvariable()
  {
    variableImpl variable = new variableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expression createexpression()
  {
    expressionImpl expression = new expressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public simple_expression createsimple_expression()
  {
    simple_expressionImpl simple_expression = new simple_expressionImpl();
    return simple_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public term createterm()
  {
    termImpl term = new termImpl();
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public signed_factor createsigned_factor()
  {
    signed_factorImpl signed_factor = new signed_factorImpl();
    return signed_factor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public factor createfactor()
  {
    factorImpl factor = new factorImpl();
    return factor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public set createset()
  {
    setImpl set = new setImpl();
    return set;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public elementList createelementList()
  {
    elementListImpl elementList = new elementListImpl();
    return elementList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public element createelement()
  {
    elementImpl element = new elementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public type createtype()
  {
    typeImpl type = new typeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public simple_type createsimple_type()
  {
    simple_typeImpl simple_type = new simple_typeImpl();
    return simple_type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public scalar_type createscalar_type()
  {
    scalar_typeImpl scalar_type = new scalar_typeImpl();
    return scalar_type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public subrange_type createsubrange_type()
  {
    subrange_typeImpl subrange_type = new subrange_typeImpl();
    return subrange_type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public type_identifier createtype_identifier()
  {
    type_identifierImpl type_identifier = new type_identifierImpl();
    return type_identifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public string_type createstring_type()
  {
    string_typeImpl string_type = new string_typeImpl();
    return string_type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public unsigned_constant createunsigned_constant()
  {
    unsigned_constantImpl unsigned_constant = new unsigned_constantImpl();
    return unsigned_constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public unsigned_number createunsigned_number()
  {
    unsigned_numberImpl unsigned_number = new unsigned_numberImpl();
    return unsigned_number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public constant_chr createconstant_chr()
  {
    constant_chrImpl constant_chr = new constant_chrImpl();
    return constant_chr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public procedure_statement createprocedure_statement()
  {
    procedure_statementImpl procedure_statement = new procedure_statementImpl();
    return procedure_statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public parameter_list createparameter_list()
  {
    parameter_listImpl parameter_list = new parameter_listImpl();
    return parameter_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public actual_parameter createactual_parameter()
  {
    actual_parameterImpl actual_parameter = new actual_parameterImpl();
    return actual_parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public procedure_and_function_declaration_part createprocedure_and_function_declaration_part()
  {
    procedure_and_function_declaration_partImpl procedure_and_function_declaration_part = new procedure_and_function_declaration_partImpl();
    return procedure_and_function_declaration_part;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public procedure_or_function_declaration createprocedure_or_function_declaration()
  {
    procedure_or_function_declarationImpl procedure_or_function_declaration = new procedure_or_function_declarationImpl();
    return procedure_or_function_declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public procedure_declaration createprocedure_declaration()
  {
    procedure_declarationImpl procedure_declaration = new procedure_declarationImpl();
    return procedure_declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public type_definition createtype_definition()
  {
    type_definitionImpl type_definition = new type_definitionImpl();
    return type_definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public procedure_type createprocedure_type()
  {
    procedure_typeImpl procedure_type = new procedure_typeImpl();
    return procedure_type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public function_declaration createfunction_declaration()
  {
    function_declarationImpl function_declaration = new function_declarationImpl();
    return function_declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public function_type createfunction_type()
  {
    function_typeImpl function_type = new function_typeImpl();
    return function_type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public formal_parameter_list createformal_parameter_list()
  {
    formal_parameter_listImpl formal_parameter_list = new formal_parameter_listImpl();
    return formal_parameter_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public formal_parameter_section createformal_parameter_section()
  {
    formal_parameter_sectionImpl formal_parameter_section = new formal_parameter_sectionImpl();
    return formal_parameter_section;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public parameter_group createparameter_group()
  {
    parameter_groupImpl parameter_group = new parameter_groupImpl();
    return parameter_group;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public result_type createresult_type()
  {
    result_typeImpl result_type = new result_typeImpl();
    return result_type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PascalPackage getPascalPackage()
  {
    return (PascalPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PascalPackage getPackage()
  {
    return PascalPackage.eINSTANCE;
  }

} //PascalFactoryImpl
