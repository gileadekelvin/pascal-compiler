/**
 * generated by Xtext 2.15.0
 */
package org.xtext.compiler.pascal.pascal.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.compiler.pascal.pascal.PascalPackage;
import org.xtext.compiler.pascal.pascal.compound_statement;
import org.xtext.compiler.pascal.pascal.conditional_statement;
import org.xtext.compiler.pascal.pascal.structured_statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>structured statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.compiler.pascal.pascal.impl.structured_statementImpl#getCompound_stat <em>Compound stat</em>}</li>
 *   <li>{@link org.xtext.compiler.pascal.pascal.impl.structured_statementImpl#getConditional_stat <em>Conditional stat</em>}</li>
 * </ul>
 *
 * @generated
 */
public class structured_statementImpl extends MinimalEObjectImpl.Container implements structured_statement
{
  /**
   * The cached value of the '{@link #getCompound_stat() <em>Compound stat</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompound_stat()
   * @generated
   * @ordered
   */
  protected compound_statement compound_stat;

  /**
   * The cached value of the '{@link #getConditional_stat() <em>Conditional stat</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditional_stat()
   * @generated
   * @ordered
   */
  protected conditional_statement conditional_stat;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected structured_statementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.STRUCTURED_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public compound_statement getCompound_stat()
  {
    return compound_stat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCompound_stat(compound_statement newCompound_stat, NotificationChain msgs)
  {
    compound_statement oldCompound_stat = compound_stat;
    compound_stat = newCompound_stat;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STAT, oldCompound_stat, newCompound_stat);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCompound_stat(compound_statement newCompound_stat)
  {
    if (newCompound_stat != compound_stat)
    {
      NotificationChain msgs = null;
      if (compound_stat != null)
        msgs = ((InternalEObject)compound_stat).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STAT, null, msgs);
      if (newCompound_stat != null)
        msgs = ((InternalEObject)newCompound_stat).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STAT, null, msgs);
      msgs = basicSetCompound_stat(newCompound_stat, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STAT, newCompound_stat, newCompound_stat));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public conditional_statement getConditional_stat()
  {
    return conditional_stat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConditional_stat(conditional_statement newConditional_stat, NotificationChain msgs)
  {
    conditional_statement oldConditional_stat = conditional_stat;
    conditional_stat = newConditional_stat;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STAT, oldConditional_stat, newConditional_stat);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConditional_stat(conditional_statement newConditional_stat)
  {
    if (newConditional_stat != conditional_stat)
    {
      NotificationChain msgs = null;
      if (conditional_stat != null)
        msgs = ((InternalEObject)conditional_stat).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STAT, null, msgs);
      if (newConditional_stat != null)
        msgs = ((InternalEObject)newConditional_stat).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STAT, null, msgs);
      msgs = basicSetConditional_stat(newConditional_stat, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STAT, newConditional_stat, newConditional_stat));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STAT:
        return basicSetCompound_stat(null, msgs);
      case PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STAT:
        return basicSetConditional_stat(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STAT:
        return getCompound_stat();
      case PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STAT:
        return getConditional_stat();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STAT:
        setCompound_stat((compound_statement)newValue);
        return;
      case PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STAT:
        setConditional_stat((conditional_statement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STAT:
        setCompound_stat((compound_statement)null);
        return;
      case PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STAT:
        setConditional_stat((conditional_statement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STAT:
        return compound_stat != null;
      case PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STAT:
        return conditional_stat != null;
    }
    return super.eIsSet(featureID);
  }

} //structured_statementImpl
