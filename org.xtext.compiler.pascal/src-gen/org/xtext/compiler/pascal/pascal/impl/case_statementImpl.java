/**
 * generated by Xtext 2.15.0
 */
package org.xtext.compiler.pascal.pascal.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.compiler.pascal.pascal.PascalPackage;
import org.xtext.compiler.pascal.pascal.case_list_element;
import org.xtext.compiler.pascal.pascal.case_statement;
import org.xtext.compiler.pascal.pascal.expression;
import org.xtext.compiler.pascal.pascal.statements;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>case statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.compiler.pascal.pascal.impl.case_statementImpl#getExp <em>Exp</em>}</li>
 *   <li>{@link org.xtext.compiler.pascal.pascal.impl.case_statementImpl#getCase_list <em>Case list</em>}</li>
 *   <li>{@link org.xtext.compiler.pascal.pascal.impl.case_statementImpl#getCase_statements <em>Case statements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class case_statementImpl extends MinimalEObjectImpl.Container implements case_statement
{
  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected expression exp;

  /**
   * The cached value of the '{@link #getCase_list() <em>Case list</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCase_list()
   * @generated
   * @ordered
   */
  protected EList<case_list_element> case_list;

  /**
   * The cached value of the '{@link #getCase_statements() <em>Case statements</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCase_statements()
   * @generated
   * @ordered
   */
  protected statements case_statements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected case_statementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.CASE_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expression getExp()
  {
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExp(expression newExp, NotificationChain msgs)
  {
    expression oldExp = exp;
    exp = newExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_STATEMENT__EXP, oldExp, newExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExp(expression newExp)
  {
    if (newExp != exp)
    {
      NotificationChain msgs = null;
      if (exp != null)
        msgs = ((InternalEObject)exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_STATEMENT__EXP, null, msgs);
      if (newExp != null)
        msgs = ((InternalEObject)newExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_STATEMENT__EXP, null, msgs);
      msgs = basicSetExp(newExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_STATEMENT__EXP, newExp, newExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<case_list_element> getCase_list()
  {
    if (case_list == null)
    {
      case_list = new EObjectContainmentEList<case_list_element>(case_list_element.class, this, PascalPackage.CASE_STATEMENT__CASE_LIST);
    }
    return case_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public statements getCase_statements()
  {
    return case_statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCase_statements(statements newCase_statements, NotificationChain msgs)
  {
    statements oldCase_statements = case_statements;
    case_statements = newCase_statements;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_STATEMENT__CASE_STATEMENTS, oldCase_statements, newCase_statements);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCase_statements(statements newCase_statements)
  {
    if (newCase_statements != case_statements)
    {
      NotificationChain msgs = null;
      if (case_statements != null)
        msgs = ((InternalEObject)case_statements).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_STATEMENT__CASE_STATEMENTS, null, msgs);
      if (newCase_statements != null)
        msgs = ((InternalEObject)newCase_statements).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_STATEMENT__CASE_STATEMENTS, null, msgs);
      msgs = basicSetCase_statements(newCase_statements, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_STATEMENT__CASE_STATEMENTS, newCase_statements, newCase_statements));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_STATEMENT__EXP:
        return basicSetExp(null, msgs);
      case PascalPackage.CASE_STATEMENT__CASE_LIST:
        return ((InternalEList<?>)getCase_list()).basicRemove(otherEnd, msgs);
      case PascalPackage.CASE_STATEMENT__CASE_STATEMENTS:
        return basicSetCase_statements(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_STATEMENT__EXP:
        return getExp();
      case PascalPackage.CASE_STATEMENT__CASE_LIST:
        return getCase_list();
      case PascalPackage.CASE_STATEMENT__CASE_STATEMENTS:
        return getCase_statements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_STATEMENT__EXP:
        setExp((expression)newValue);
        return;
      case PascalPackage.CASE_STATEMENT__CASE_LIST:
        getCase_list().clear();
        getCase_list().addAll((Collection<? extends case_list_element>)newValue);
        return;
      case PascalPackage.CASE_STATEMENT__CASE_STATEMENTS:
        setCase_statements((statements)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_STATEMENT__EXP:
        setExp((expression)null);
        return;
      case PascalPackage.CASE_STATEMENT__CASE_LIST:
        getCase_list().clear();
        return;
      case PascalPackage.CASE_STATEMENT__CASE_STATEMENTS:
        setCase_statements((statements)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_STATEMENT__EXP:
        return exp != null;
      case PascalPackage.CASE_STATEMENT__CASE_LIST:
        return case_list != null && !case_list.isEmpty();
      case PascalPackage.CASE_STATEMENT__CASE_STATEMENTS:
        return case_statements != null;
    }
    return super.eIsSet(featureID);
  }

} //case_statementImpl
