/**
 * generated by Xtext 2.15.0
 */
package org.xtext.compiler.pascal.pascal.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.compiler.pascal.pascal.PascalPackage;
import org.xtext.compiler.pascal.pascal.case_list_element;
import org.xtext.compiler.pascal.pascal.const_list;
import org.xtext.compiler.pascal.pascal.statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>case list element</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.compiler.pascal.pascal.impl.case_list_elementImpl#getConsts <em>Consts</em>}</li>
 *   <li>{@link org.xtext.compiler.pascal.pascal.impl.case_list_elementImpl#getCase_statement <em>Case statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class case_list_elementImpl extends MinimalEObjectImpl.Container implements case_list_element
{
  /**
   * The cached value of the '{@link #getConsts() <em>Consts</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConsts()
   * @generated
   * @ordered
   */
  protected const_list consts;

  /**
   * The cached value of the '{@link #getCase_statement() <em>Case statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCase_statement()
   * @generated
   * @ordered
   */
  protected statement case_statement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected case_list_elementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.CASE_LIST_ELEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public const_list getConsts()
  {
    return consts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConsts(const_list newConsts, NotificationChain msgs)
  {
    const_list oldConsts = consts;
    consts = newConsts;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_LIST_ELEMENT__CONSTS, oldConsts, newConsts);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConsts(const_list newConsts)
  {
    if (newConsts != consts)
    {
      NotificationChain msgs = null;
      if (consts != null)
        msgs = ((InternalEObject)consts).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_LIST_ELEMENT__CONSTS, null, msgs);
      if (newConsts != null)
        msgs = ((InternalEObject)newConsts).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_LIST_ELEMENT__CONSTS, null, msgs);
      msgs = basicSetConsts(newConsts, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_LIST_ELEMENT__CONSTS, newConsts, newConsts));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public statement getCase_statement()
  {
    return case_statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCase_statement(statement newCase_statement, NotificationChain msgs)
  {
    statement oldCase_statement = case_statement;
    case_statement = newCase_statement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_LIST_ELEMENT__CASE_STATEMENT, oldCase_statement, newCase_statement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCase_statement(statement newCase_statement)
  {
    if (newCase_statement != case_statement)
    {
      NotificationChain msgs = null;
      if (case_statement != null)
        msgs = ((InternalEObject)case_statement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_LIST_ELEMENT__CASE_STATEMENT, null, msgs);
      if (newCase_statement != null)
        msgs = ((InternalEObject)newCase_statement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_LIST_ELEMENT__CASE_STATEMENT, null, msgs);
      msgs = basicSetCase_statement(newCase_statement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_LIST_ELEMENT__CASE_STATEMENT, newCase_statement, newCase_statement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_LIST_ELEMENT__CONSTS:
        return basicSetConsts(null, msgs);
      case PascalPackage.CASE_LIST_ELEMENT__CASE_STATEMENT:
        return basicSetCase_statement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_LIST_ELEMENT__CONSTS:
        return getConsts();
      case PascalPackage.CASE_LIST_ELEMENT__CASE_STATEMENT:
        return getCase_statement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_LIST_ELEMENT__CONSTS:
        setConsts((const_list)newValue);
        return;
      case PascalPackage.CASE_LIST_ELEMENT__CASE_STATEMENT:
        setCase_statement((statement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_LIST_ELEMENT__CONSTS:
        setConsts((const_list)null);
        return;
      case PascalPackage.CASE_LIST_ELEMENT__CASE_STATEMENT:
        setCase_statement((statement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_LIST_ELEMENT__CONSTS:
        return consts != null;
      case PascalPackage.CASE_LIST_ELEMENT__CASE_STATEMENT:
        return case_statement != null;
    }
    return super.eIsSet(featureID);
  }

} //case_list_elementImpl
