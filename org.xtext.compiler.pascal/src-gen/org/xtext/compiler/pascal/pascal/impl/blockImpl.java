/**
 * generated by Xtext 2.15.0
 */
package org.xtext.compiler.pascal.pascal.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.compiler.pascal.pascal.PascalPackage;
import org.xtext.compiler.pascal.pascal.block;
import org.xtext.compiler.pascal.pascal.compound_statement;
import org.xtext.compiler.pascal.pascal.constant_definition_part;
import org.xtext.compiler.pascal.pascal.procedure_and_function_declaration_part;
import org.xtext.compiler.pascal.pascal.type_definition_part;
import org.xtext.compiler.pascal.pascal.variable_declaration_part;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>block</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.compiler.pascal.pascal.impl.blockImpl#getConstantpart <em>Constantpart</em>}</li>
 *   <li>{@link org.xtext.compiler.pascal.pascal.impl.blockImpl#getType_part <em>Type part</em>}</li>
 *   <li>{@link org.xtext.compiler.pascal.pascal.impl.blockImpl#getVariablepart <em>Variablepart</em>}</li>
 *   <li>{@link org.xtext.compiler.pascal.pascal.impl.blockImpl#getProcedure_function_part <em>Procedure function part</em>}</li>
 *   <li>{@link org.xtext.compiler.pascal.pascal.impl.blockImpl#getStatement <em>Statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class blockImpl extends MinimalEObjectImpl.Container implements block
{
  /**
   * The cached value of the '{@link #getConstantpart() <em>Constantpart</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstantpart()
   * @generated
   * @ordered
   */
  protected EList<constant_definition_part> constantpart;

  /**
   * The cached value of the '{@link #getType_part() <em>Type part</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType_part()
   * @generated
   * @ordered
   */
  protected EList<type_definition_part> type_part;

  /**
   * The cached value of the '{@link #getVariablepart() <em>Variablepart</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariablepart()
   * @generated
   * @ordered
   */
  protected EList<variable_declaration_part> variablepart;

  /**
   * The cached value of the '{@link #getProcedure_function_part() <em>Procedure function part</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcedure_function_part()
   * @generated
   * @ordered
   */
  protected EList<procedure_and_function_declaration_part> procedure_function_part;

  /**
   * The cached value of the '{@link #getStatement() <em>Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected compound_statement statement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected blockImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.BLOCK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<constant_definition_part> getConstantpart()
  {
    if (constantpart == null)
    {
      constantpart = new EObjectContainmentEList<constant_definition_part>(constant_definition_part.class, this, PascalPackage.BLOCK__CONSTANTPART);
    }
    return constantpart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<type_definition_part> getType_part()
  {
    if (type_part == null)
    {
      type_part = new EObjectContainmentEList<type_definition_part>(type_definition_part.class, this, PascalPackage.BLOCK__TYPE_PART);
    }
    return type_part;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<variable_declaration_part> getVariablepart()
  {
    if (variablepart == null)
    {
      variablepart = new EObjectContainmentEList<variable_declaration_part>(variable_declaration_part.class, this, PascalPackage.BLOCK__VARIABLEPART);
    }
    return variablepart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<procedure_and_function_declaration_part> getProcedure_function_part()
  {
    if (procedure_function_part == null)
    {
      procedure_function_part = new EObjectContainmentEList<procedure_and_function_declaration_part>(procedure_and_function_declaration_part.class, this, PascalPackage.BLOCK__PROCEDURE_FUNCTION_PART);
    }
    return procedure_function_part;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public compound_statement getStatement()
  {
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatement(compound_statement newStatement, NotificationChain msgs)
  {
    compound_statement oldStatement = statement;
    statement = newStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.BLOCK__STATEMENT, oldStatement, newStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStatement(compound_statement newStatement)
  {
    if (newStatement != statement)
    {
      NotificationChain msgs = null;
      if (statement != null)
        msgs = ((InternalEObject)statement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.BLOCK__STATEMENT, null, msgs);
      if (newStatement != null)
        msgs = ((InternalEObject)newStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.BLOCK__STATEMENT, null, msgs);
      msgs = basicSetStatement(newStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.BLOCK__STATEMENT, newStatement, newStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.BLOCK__CONSTANTPART:
        return ((InternalEList<?>)getConstantpart()).basicRemove(otherEnd, msgs);
      case PascalPackage.BLOCK__TYPE_PART:
        return ((InternalEList<?>)getType_part()).basicRemove(otherEnd, msgs);
      case PascalPackage.BLOCK__VARIABLEPART:
        return ((InternalEList<?>)getVariablepart()).basicRemove(otherEnd, msgs);
      case PascalPackage.BLOCK__PROCEDURE_FUNCTION_PART:
        return ((InternalEList<?>)getProcedure_function_part()).basicRemove(otherEnd, msgs);
      case PascalPackage.BLOCK__STATEMENT:
        return basicSetStatement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.BLOCK__CONSTANTPART:
        return getConstantpart();
      case PascalPackage.BLOCK__TYPE_PART:
        return getType_part();
      case PascalPackage.BLOCK__VARIABLEPART:
        return getVariablepart();
      case PascalPackage.BLOCK__PROCEDURE_FUNCTION_PART:
        return getProcedure_function_part();
      case PascalPackage.BLOCK__STATEMENT:
        return getStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.BLOCK__CONSTANTPART:
        getConstantpart().clear();
        getConstantpart().addAll((Collection<? extends constant_definition_part>)newValue);
        return;
      case PascalPackage.BLOCK__TYPE_PART:
        getType_part().clear();
        getType_part().addAll((Collection<? extends type_definition_part>)newValue);
        return;
      case PascalPackage.BLOCK__VARIABLEPART:
        getVariablepart().clear();
        getVariablepart().addAll((Collection<? extends variable_declaration_part>)newValue);
        return;
      case PascalPackage.BLOCK__PROCEDURE_FUNCTION_PART:
        getProcedure_function_part().clear();
        getProcedure_function_part().addAll((Collection<? extends procedure_and_function_declaration_part>)newValue);
        return;
      case PascalPackage.BLOCK__STATEMENT:
        setStatement((compound_statement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.BLOCK__CONSTANTPART:
        getConstantpart().clear();
        return;
      case PascalPackage.BLOCK__TYPE_PART:
        getType_part().clear();
        return;
      case PascalPackage.BLOCK__VARIABLEPART:
        getVariablepart().clear();
        return;
      case PascalPackage.BLOCK__PROCEDURE_FUNCTION_PART:
        getProcedure_function_part().clear();
        return;
      case PascalPackage.BLOCK__STATEMENT:
        setStatement((compound_statement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.BLOCK__CONSTANTPART:
        return constantpart != null && !constantpart.isEmpty();
      case PascalPackage.BLOCK__TYPE_PART:
        return type_part != null && !type_part.isEmpty();
      case PascalPackage.BLOCK__VARIABLEPART:
        return variablepart != null && !variablepart.isEmpty();
      case PascalPackage.BLOCK__PROCEDURE_FUNCTION_PART:
        return procedure_function_part != null && !procedure_function_part.isEmpty();
      case PascalPackage.BLOCK__STATEMENT:
        return statement != null;
    }
    return super.eIsSet(featureID);
  }

} //blockImpl
