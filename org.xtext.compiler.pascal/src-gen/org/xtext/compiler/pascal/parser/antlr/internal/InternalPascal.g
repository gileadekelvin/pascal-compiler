/*
 * generated by Xtext 2.15.0
 */
grammar InternalPascal;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.compiler.pascal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.compiler.pascal.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.compiler.pascal.services.PascalGrammarAccess;

}

@parser::members {

 	private PascalGrammarAccess grammarAccess;

    public InternalPascalParser(TokenStream input, PascalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "pascal";
   	}

   	@Override
   	protected PascalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulepascal
entryRulepascal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPascalRule()); }
	iv_rulepascal=rulepascal
	{ $current=$iv_rulepascal.current; }
	EOF;

// Rule pascal
rulepascal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPascalAccess().getProgramProgramParserRuleCall_0());
			}
			lv_program_0_0=ruleprogram
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPascalRule());
				}
				add(
					$current,
					"program",
					lv_program_0_0,
					"org.xtext.compiler.pascal.Pascal.program");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleprogram
entryRuleprogram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleprogram=ruleprogram
	{ $current=$iv_ruleprogram.current; }
	EOF;

// Rule program
ruleprogram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getHeadingProgram_heading_blockParserRuleCall_0_0());
				}
				lv_heading_0_0=ruleprogram_heading_block
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"heading",
						lv_heading_0_0,
						"org.xtext.compiler.pascal.Pascal.program_heading_block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getBlockBlockParserRuleCall_1_0());
				}
				lv_block_1_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"block",
						lv_block_1_0,
						"org.xtext.compiler.pascal.Pascal.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleprogram_heading_block
entryRuleprogram_heading_block returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgram_heading_blockRule()); }
	iv_ruleprogram_heading_block=ruleprogram_heading_block
	{ $current=$iv_ruleprogram_heading_block.current; }
	EOF;

// Rule program_heading_block
ruleprogram_heading_block returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='program'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgram_heading_blockAccess().getProgramKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProgram_heading_blockAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgram_heading_blockRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getProgram_heading_blockAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgram_heading_blockAccess().getIdentifiersIdentifier_listParserRuleCall_2_1_0());
					}
					lv_identifiers_3_0=ruleidentifier_list
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgram_heading_blockRule());
						}
						set(
							$current,
							"identifiers",
							lv_identifiers_3_0,
							"org.xtext.compiler.pascal.Pascal.identifier_list");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getProgram_heading_blockAccess().getRightParenthesisKeyword_2_2());
			}
		)?
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getProgram_heading_blockAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleidentifier_list
entryRuleidentifier_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifier_listRule()); }
	iv_ruleidentifier_list=ruleidentifier_list
	{ $current=$iv_ruleidentifier_list.current; }
	EOF;

// Rule identifier_list
ruleidentifier_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_names_0_0=RULE_ID
				{
					newLeafNode(lv_names_0_0, grammarAccess.getIdentifier_listAccess().getNamesIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIdentifier_listRule());
					}
					addWithLastConsumed(
						$current,
						"names",
						lv_names_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getIdentifier_listAccess().getCommaKeyword_1_0());
			}
			(
				(
					lv_names_2_0=RULE_ID
					{
						newLeafNode(lv_names_2_0, grammarAccess.getIdentifier_listAccess().getNamesIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIdentifier_listRule());
						}
						addWithLastConsumed(
							$current,
							"names",
							lv_names_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleblock
entryRuleblock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleblock=ruleblock
	{ $current=$iv_ruleblock.current; }
	EOF;

// Rule block
ruleblock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getConstantpartConstant_definition_partParserRuleCall_0_0_0());
					}
					lv_constantpart_0_0=ruleconstant_definition_part
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"constantpart",
							lv_constantpart_0_0,
							"org.xtext.compiler.pascal.Pascal.constant_definition_part");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getVariablepartVariable_declaration_partParserRuleCall_0_1_0());
					}
					lv_variablepart_1_0=rulevariable_declaration_part
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"variablepart",
							lv_variablepart_1_0,
							"org.xtext.compiler.pascal.Pascal.variable_declaration_part");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getProcedure_function_partProcedure_and_function_declaration_partParserRuleCall_0_2_0());
					}
					lv_procedure_function_part_2_0=ruleprocedure_and_function_declaration_part
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"procedure_function_part",
							lv_procedure_function_part_2_0,
							"org.xtext.compiler.pascal.Pascal.procedure_and_function_declaration_part");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getStatementCompound_statementParserRuleCall_1_0());
				}
				lv_statement_3_0=rulecompound_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"statement",
						lv_statement_3_0,
						"org.xtext.compiler.pascal.Pascal.compound_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleconstant_definition_part
entryRuleconstant_definition_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstant_definition_partRule()); }
	iv_ruleconstant_definition_part=ruleconstant_definition_part
	{ $current=$iv_ruleconstant_definition_part.current; }
	EOF;

// Rule constant_definition_part
ruleconstant_definition_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='const'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstant_definition_partAccess().getConstKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstant_definition_partAccess().getConstantsConstant_definitionParserRuleCall_1_0_0());
					}
					lv_constants_1_0=ruleconstant_definition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstant_definition_partRule());
						}
						add(
							$current,
							"constants",
							lv_constants_1_0,
							"org.xtext.compiler.pascal.Pascal.constant_definition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getConstant_definition_partAccess().getSemicolonKeyword_1_1());
			}
		)+
	)
;

// Entry rule entryRuleconstant_definition
entryRuleconstant_definition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstant_definitionRule()); }
	iv_ruleconstant_definition=ruleconstant_definition
	{ $current=$iv_ruleconstant_definition.current; }
	EOF;

// Rule constant_definition
ruleconstant_definition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getConstant_definitionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstant_definitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		this_EQUAL_1=RULE_EQUAL
		{
			newLeafNode(this_EQUAL_1, grammarAccess.getConstant_definitionAccess().getEQUALTerminalRuleCall_1());
		}
		{
			newCompositeNode(grammarAccess.getConstant_definitionAccess().getConstantParserRuleCall_2());
		}
		this_constant_2=ruleconstant
		{
			$current = $this_constant_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleconstant
entryRuleconstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleconstant=ruleconstant
	{ $current=$iv_ruleconstant.current; }
	EOF;

// Rule constant
ruleconstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstantAccess().getUnsigned_numberParserRuleCall_0());
		}
		this_unsigned_number_0=ruleunsigned_number
		{
			$current = $this_unsigned_number_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getConstantAccess().getSignParserRuleCall_1_0());
			}
			rulesign
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getConstantAccess().getUnsigned_numberParserRuleCall_1_1());
			}
			this_unsigned_number_2=ruleunsigned_number
			{
				$current = $this_unsigned_number_2.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				lv_names_3_0=RULE_ID
				{
					newLeafNode(lv_names_3_0, grammarAccess.getConstantAccess().getNamesIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					addWithLastConsumed(
						$current,
						"names",
						lv_names_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getConstantAccess().getSignParserRuleCall_3_0());
			}
			rulesign
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					lv_names_5_0=RULE_ID
					{
						newLeafNode(lv_names_5_0, grammarAccess.getConstantAccess().getNamesIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantRule());
						}
						addWithLastConsumed(
							$current,
							"names",
							lv_names_5_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				lv_string_6_0=RULE_STRING
				{
					newLeafNode(lv_string_6_0, grammarAccess.getConstantAccess().getStringSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					addWithLastConsumed(
						$current,
						"string",
						lv_string_6_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getConstantAccess().getConstant_chrParserRuleCall_5());
		}
		this_constant_chr_7=ruleconstant_chr
		{
			$current = $this_constant_chr_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulevariable_declaration_part
entryRulevariable_declaration_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariable_declaration_partRule()); }
	iv_rulevariable_declaration_part=rulevariable_declaration_part
	{ $current=$iv_rulevariable_declaration_part.current; }
	EOF;

// Rule variable_declaration_part
rulevariable_declaration_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_VAR_0=RULE_VAR
		{
			newLeafNode(this_VAR_0, grammarAccess.getVariable_declaration_partAccess().getVARTerminalRuleCall_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariable_declaration_partAccess().getVariableVariable_declarationParserRuleCall_1_0());
				}
				lv_variable_1_0=rulevariable_declaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariable_declaration_partRule());
					}
					add(
						$current,
						"variable",
						lv_variable_1_0,
						"org.xtext.compiler.pascal.Pascal.variable_declaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getVariable_declaration_partAccess().getSemicolonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariable_declaration_partAccess().getVariableVariable_declarationParserRuleCall_2_1_0());
					}
					lv_variable_3_0=rulevariable_declaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariable_declaration_partRule());
						}
						add(
							$current,
							"variable",
							lv_variable_3_0,
							"org.xtext.compiler.pascal.Pascal.variable_declaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getVariable_declaration_partAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulevariable_declaration
entryRulevariable_declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariable_declarationRule()); }
	iv_rulevariable_declaration=rulevariable_declaration
	{ $current=$iv_rulevariable_declaration.current; }
	EOF;

// Rule variable_declaration
rulevariable_declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariable_declarationAccess().getIdentifier_listParserRuleCall_0());
		}
		this_identifier_list_0=ruleidentifier_list
		{
			$current = $this_identifier_list_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariable_declarationAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariable_declarationAccess().getTypesTypeParserRuleCall_2_0());
				}
				lv_types_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariable_declarationRule());
					}
					add(
						$current,
						"types",
						lv_types_2_0,
						"org.xtext.compiler.pascal.Pascal.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulecompound_statement
entryRulecompound_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompound_statementRule()); }
	iv_rulecompound_statement=rulecompound_statement
	{ $current=$iv_rulecompound_statement.current; }
	EOF;

// Rule compound_statement
rulecompound_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='begin'
		{
			newLeafNode(otherlv_0, grammarAccess.getCompound_statementAccess().getBeginKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompound_statementAccess().getSequenceStatementsParserRuleCall_1_0());
				}
				lv_sequence_1_0=rulestatements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompound_statementRule());
					}
					set(
						$current,
						"sequence",
						lv_sequence_1_0,
						"org.xtext.compiler.pascal.Pascal.statements");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='end'
		{
			newLeafNode(otherlv_2, grammarAccess.getCompound_statementAccess().getEndKeyword_2());
		}
	)
;

// Entry rule entryRulestatements
entryRulestatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementsRule()); }
	iv_rulestatements=rulestatements
	{ $current=$iv_rulestatements.current; }
	EOF;

// Rule statements
rulestatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementsAccess().getStatementsStatementParserRuleCall_0_0());
				}
				lv_statements_0_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementsRule());
					}
					add(
						$current,
						"statements",
						lv_statements_0_0,
						"org.xtext.compiler.pascal.Pascal.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatementsAccess().getSemicolonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementsAccess().getStatementsStatementParserRuleCall_1_1_0());
					}
					lv_statements_2_0=rulestatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementsRule());
						}
						add(
							$current,
							"statements",
							lv_statements_2_0,
							"org.xtext.compiler.pascal.Pascal.statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_rulestatement=rulestatement
	{ $current=$iv_rulestatement.current; }
	EOF;

// Rule statement
rulestatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getLabelLabelParserRuleCall_0_0_0());
					}
					lv_label_0_0=rulelabel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"label",
							lv_label_0_0,
							"org.xtext.compiler.pascal.Pascal.label");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getColonKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getStatementUnlabelled_statementParserRuleCall_0_2_0());
					}
					lv_statement_2_0=ruleunlabelled_statement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						add(
							$current,
							"statement",
							lv_statement_2_0,
							"org.xtext.compiler.pascal.Pascal.unlabelled_statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStatementAccess().getStatementAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getStatementUnlabelled_statementParserRuleCall_1_1_0());
					}
					lv_statement_4_0=ruleunlabelled_statement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						add(
							$current,
							"statement",
							lv_statement_4_0,
							"org.xtext.compiler.pascal.Pascal.unlabelled_statement");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleunlabelled_statement
entryRuleunlabelled_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnlabelled_statementRule()); }
	iv_ruleunlabelled_statement=ruleunlabelled_statement
	{ $current=$iv_ruleunlabelled_statement.current; }
	EOF;

// Rule unlabelled_statement
ruleunlabelled_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnlabelled_statementAccess().getSimpleSimple_statementParserRuleCall_0_0());
				}
				lv_simple_0_0=rulesimple_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnlabelled_statementRule());
					}
					set(
						$current,
						"simple",
						lv_simple_0_0,
						"org.xtext.compiler.pascal.Pascal.simple_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getUnlabelled_statementAccess().getStructuredStructured_statementParserRuleCall_1_0());
				}
				lv_structured_1_0=rulestructured_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnlabelled_statementRule());
					}
					set(
						$current,
						"structured",
						lv_structured_1_0,
						"org.xtext.compiler.pascal.Pascal.structured_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulelabel
entryRulelabel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	iv_rulelabel=rulelabel
	{ $current=$iv_rulelabel.current; }
	EOF;

// Rule label
rulelabel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLabelAccess().getNumberUnsigned_integerParserRuleCall_0());
			}
			lv_number_0_0=ruleunsigned_integer
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLabelRule());
				}
				set(
					$current,
					"number",
					lv_number_0_0,
					"org.xtext.compiler.pascal.Pascal.unsigned_integer");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulesimple_statement
entryRulesimple_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimple_statementRule()); }
	iv_rulesimple_statement=rulesimple_statement
	{ $current=$iv_rulesimple_statement.current; }
	EOF;

// Rule simple_statement
rulesimple_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_statementAccess().getAssignmentAssignment_statementParserRuleCall_0_0());
				}
				lv_assignment_0_0=ruleassignment_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_statementRule());
					}
					set(
						$current,
						"assignment",
						lv_assignment_0_0,
						"org.xtext.compiler.pascal.Pascal.assignment_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_statementAccess().getProcedureProcedure_statementParserRuleCall_1_0());
				}
				lv_procedure_1_0=ruleprocedure_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_statementRule());
					}
					set(
						$current,
						"procedure",
						lv_procedure_1_0,
						"org.xtext.compiler.pascal.Pascal.procedure_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_statementAccess().getGotoGoto_statementParserRuleCall_2_0());
				}
				lv_goto_2_0=rulegoto_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_statementRule());
					}
					set(
						$current,
						"goto",
						lv_goto_2_0,
						"org.xtext.compiler.pascal.Pascal.goto_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleassignment_statement
entryRuleassignment_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignment_statementRule()); }
	iv_ruleassignment_statement=ruleassignment_statement
	{ $current=$iv_ruleassignment_statement.current; }
	EOF;

// Rule assignment_statement
ruleassignment_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignment_statementAccess().getVariableVariableParserRuleCall_0_0());
				}
				lv_variable_0_0=rulevariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignment_statementRule());
					}
					set(
						$current,
						"variable",
						lv_variable_0_0,
						"org.xtext.compiler.pascal.Pascal.variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_ASSIGN_1=RULE_ASSIGN
		{
			newLeafNode(this_ASSIGN_1, grammarAccess.getAssignment_statementAccess().getASSIGNTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignment_statementAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignment_statementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.xtext.compiler.pascal.Pascal.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevariable
entryRulevariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_rulevariable=rulevariable
	{ $current=$iv_rulevariable.current; }
	EOF;

// Rule variable
rulevariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='@'
				{
					newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getCommercialAtKeyword_0_0_0());
				}
				(
					(
						lv_names_1_0=RULE_ID
						{
							newLeafNode(lv_names_1_0, grammarAccess.getVariableAccess().getNamesIDTerminalRuleCall_0_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVariableRule());
							}
							addWithLastConsumed(
								$current,
								"names",
								lv_names_1_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)
			    |
			(
				(
					lv_names_2_0=RULE_ID
					{
						newLeafNode(lv_names_2_0, grammarAccess.getVariableAccess().getNamesIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						addWithLastConsumed(
							$current,
							"names",
							lv_names_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		(
			(
				otherlv_3='['
				{
					newLeafNode(otherlv_3, grammarAccess.getVariableAccess().getLeftSquareBracketKeyword_1_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_1_0_1_0());
						}
						lv_expression_4_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVariableRule());
							}
							add(
								$current,
								"expression",
								lv_expression_4_0,
								"org.xtext.compiler.pascal.Pascal.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_5=','
					{
						newLeafNode(otherlv_5, grammarAccess.getVariableAccess().getCommaKeyword_1_0_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_1_0_2_1_0());
							}
							lv_expression_6_0=ruleexpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVariableRule());
								}
								add(
									$current,
									"expression",
									lv_expression_6_0,
									"org.xtext.compiler.pascal.Pascal.expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_7=']'
				{
					newLeafNode(otherlv_7, grammarAccess.getVariableAccess().getRightSquareBracketKeyword_1_0_3());
				}
			)
			    |
			(
				otherlv_8='(.'
				{
					newLeafNode(otherlv_8, grammarAccess.getVariableAccess().getLeftParenthesisFullStopKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_1_1_1_0());
						}
						lv_expression_9_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVariableRule());
							}
							add(
								$current,
								"expression",
								lv_expression_9_0,
								"org.xtext.compiler.pascal.Pascal.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_10=','
					{
						newLeafNode(otherlv_10, grammarAccess.getVariableAccess().getCommaKeyword_1_1_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_1_1_2_1_0());
							}
							lv_expression_11_0=ruleexpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVariableRule());
								}
								add(
									$current,
									"expression",
									lv_expression_11_0,
									"org.xtext.compiler.pascal.Pascal.expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_12='.)'
				{
					newLeafNode(otherlv_12, grammarAccess.getVariableAccess().getFullStopRightParenthesisKeyword_1_1_3());
				}
			)
			    |
			(
				otherlv_13='.'
				{
					newLeafNode(otherlv_13, grammarAccess.getVariableAccess().getFullStopKeyword_1_2_0());
				}
				(
					(
						lv_names_14_0=RULE_ID
						{
							newLeafNode(lv_names_14_0, grammarAccess.getVariableAccess().getNamesIDTerminalRuleCall_1_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVariableRule());
							}
							addWithLastConsumed(
								$current,
								"names",
								lv_names_14_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)
			    |
			otherlv_15='^'
			{
				newLeafNode(otherlv_15, grammarAccess.getVariableAccess().getCircumflexAccentKeyword_1_3());
			}
		)*
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getExpressionsSimple_expressionParserRuleCall_0_0());
				}
				lv_expressions_0_0=rulesimple_expression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_0_0,
						"org.xtext.compiler.pascal.Pascal.simple_expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getOperatorsRelational_operatorParserRuleCall_1_0_0());
					}
					lv_operators_1_0=rulerelational_operator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						add(
							$current,
							"operators",
							lv_operators_1_0,
							"org.xtext.compiler.pascal.Pascal.relational_operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getExpressionsExpressionParserRuleCall_1_1_0());
					}
					lv_expressions_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_2_0,
							"org.xtext.compiler.pascal.Pascal.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulesimple_expression
entryRulesimple_expression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimple_expressionRule()); }
	iv_rulesimple_expression=rulesimple_expression
	{ $current=$iv_rulesimple_expression.current; }
	EOF;

// Rule simple_expression
rulesimple_expression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_expressionAccess().getTermsTermParserRuleCall_0_0());
				}
				lv_terms_0_0=ruleterm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_expressionRule());
					}
					add(
						$current,
						"terms",
						lv_terms_0_0,
						"org.xtext.compiler.pascal.Pascal.term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSimple_expressionAccess().getOperatorsAdditive_operatorParserRuleCall_1_0_0());
					}
					lv_operators_1_0=ruleadditive_operator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimple_expressionRule());
						}
						add(
							$current,
							"operators",
							lv_operators_1_0,
							"org.xtext.compiler.pascal.Pascal.additive_operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSimple_expressionAccess().getExpressionSimple_expressionParserRuleCall_1_1_0());
					}
					lv_expression_2_0=rulesimple_expression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimple_expressionRule());
						}
						add(
							$current,
							"expression",
							lv_expression_2_0,
							"org.xtext.compiler.pascal.Pascal.simple_expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleterm
entryRuleterm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleterm=ruleterm
	{ $current=$iv_ruleterm.current; }
	EOF;

// Rule term
ruleterm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getFactorsSigned_factorParserRuleCall_0_0());
				}
				lv_factors_0_0=rulesigned_factor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermRule());
					}
					add(
						$current,
						"factors",
						lv_factors_0_0,
						"org.xtext.compiler.pascal.Pascal.signed_factor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getOperatorsMultiplicative_operatorParserRuleCall_1_0_0());
					}
					lv_operators_1_0=rulemultiplicative_operator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						add(
							$current,
							"operators",
							lv_operators_1_0,
							"org.xtext.compiler.pascal.Pascal.multiplicative_operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getTermsTermParserRuleCall_1_1_0());
					}
					lv_terms_2_0=ruleterm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						add(
							$current,
							"terms",
							lv_terms_2_0,
							"org.xtext.compiler.pascal.Pascal.term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulesigned_factor
entryRulesigned_factor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSigned_factorRule()); }
	iv_rulesigned_factor=rulesigned_factor
	{ $current=$iv_rulesigned_factor.current; }
	EOF;

// Rule signed_factor
rulesigned_factor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_operators_0_0=RULE_PLUS
					{
						newLeafNode(lv_operators_0_0, grammarAccess.getSigned_factorAccess().getOperatorsPLUSTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSigned_factorRule());
						}
						addWithLastConsumed(
							$current,
							"operators",
							lv_operators_0_0,
							"org.xtext.compiler.pascal.Pascal.PLUS");
					}
				)
			)
			    |
			(
				(
					lv_operators_1_0=RULE_MINUS
					{
						newLeafNode(lv_operators_1_0, grammarAccess.getSigned_factorAccess().getOperatorsMINUSTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSigned_factorRule());
						}
						addWithLastConsumed(
							$current,
							"operators",
							lv_operators_1_0,
							"org.xtext.compiler.pascal.Pascal.MINUS");
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSigned_factorAccess().getFactorsFactorParserRuleCall_1_0());
				}
				lv_factors_2_0=rulefactor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSigned_factorRule());
					}
					add(
						$current,
						"factors",
						lv_factors_2_0,
						"org.xtext.compiler.pascal.Pascal.factor");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefactor
entryRulefactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_rulefactor=rulefactor
	{ $current=$iv_rulefactor.current; }
	EOF;

// Rule factor
rulefactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getVariableVariableParserRuleCall_0_0());
				}
				lv_variable_0_0=rulevariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"variable",
						lv_variable_0_0,
						"org.xtext.compiler.pascal.Pascal.variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getExpressionExpressionParserRuleCall_1_1_0());
					}
					lv_expression_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"expression",
							lv_expression_2_0,
							"org.xtext.compiler.pascal.Pascal.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getFactorAccess().getRightParenthesisKeyword_1_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getFactorAccess().getFunction_designatorParserRuleCall_2());
		}
		this_function_designator_4=rulefunction_designator
		{
			$current = $this_function_designator_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getConstantUnsigned_constantParserRuleCall_3_0());
				}
				lv_constant_5_0=ruleunsigned_constant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"constant",
						lv_constant_5_0,
						"org.xtext.compiler.pascal.Pascal.unsigned_constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getSetSetParserRuleCall_4_0());
				}
				lv_set_6_0=ruleset
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"set",
						lv_set_6_0,
						"org.xtext.compiler.pascal.Pascal.set");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			this_NOT_7=RULE_NOT
			{
				newLeafNode(this_NOT_7, grammarAccess.getFactorAccess().getNOTTerminalRuleCall_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getFactorFactorParserRuleCall_5_1_0());
					}
					lv_factor_8_0=rulefactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"factor",
							lv_factor_8_0,
							"org.xtext.compiler.pascal.Pascal.factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getBooleanBoolParserRuleCall_6_0());
				}
				lv_boolean_9_0=rulebool
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					add(
						$current,
						"boolean",
						lv_boolean_9_0,
						"org.xtext.compiler.pascal.Pascal.bool");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleset
entryRuleset returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetRule()); }
	iv_ruleset=ruleset
	{ $current=$iv_ruleset.current; }
	EOF;

// Rule set
ruleset returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='['
			{
				newLeafNode(otherlv_0, grammarAccess.getSetAccess().getLeftSquareBracketKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSetAccess().getElementsElementListParserRuleCall_0_1_0());
					}
					lv_elements_1_0=ruleelementList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetRule());
						}
						add(
							$current,
							"elements",
							lv_elements_1_0,
							"org.xtext.compiler.pascal.Pascal.elementList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=']'
			{
				newLeafNode(otherlv_2, grammarAccess.getSetAccess().getRightSquareBracketKeyword_0_2());
			}
		)
		    |
		(
			otherlv_3='(.'
			{
				newLeafNode(otherlv_3, grammarAccess.getSetAccess().getLeftParenthesisFullStopKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSetAccess().getElementsElementListParserRuleCall_1_1_0());
					}
					lv_elements_4_0=ruleelementList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetRule());
						}
						add(
							$current,
							"elements",
							lv_elements_4_0,
							"org.xtext.compiler.pascal.Pascal.elementList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5='.)'
			{
				newLeafNode(otherlv_5, grammarAccess.getSetAccess().getFullStopRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleelementList
entryRuleelementList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementListRule()); }
	iv_ruleelementList=ruleelementList
	{ $current=$iv_ruleelementList.current; }
	EOF;

// Rule elementList
ruleelementList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getElementListAccess().getElementsElementParserRuleCall_0_0());
				}
				lv_elements_0_0=ruleelement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementListRule());
					}
					add(
						$current,
						"elements",
						lv_elements_0_0,
						"org.xtext.compiler.pascal.Pascal.element");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getElementListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getElementListAccess().getElementsElementParserRuleCall_1_1_0());
					}
					lv_elements_2_0=ruleelement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementListRule());
						}
						add(
							$current,
							"elements",
							lv_elements_2_0,
							"org.xtext.compiler.pascal.Pascal.element");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleelement
entryRuleelement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleelement=ruleelement
	{ $current=$iv_ruleelement.current; }
	EOF;

// Rule element
ruleelement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAccess().getExpressionsExpressionParserRuleCall_0_0());
				}
				lv_expressions_0_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_0_0,
						"org.xtext.compiler.pascal.Pascal.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_dotdot_1_0=RULE_DOTDOT
					{
						newLeafNode(lv_dotdot_1_0, grammarAccess.getElementAccess().getDotdotDOTDOTTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getElementRule());
						}
						addWithLastConsumed(
							$current,
							"dotdot",
							lv_dotdot_1_0,
							"org.xtext.compiler.pascal.Pascal.DOTDOT");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getElementAccess().getExpressionsExpressionParserRuleCall_1_1_0());
					}
					lv_expressions_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_2_0,
							"org.xtext.compiler.pascal.Pascal.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuletype
entryRuletype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruletype=ruletype
	{ $current=$iv_ruletype.current; }
	EOF;

// Rule type
ruletype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTypeAccess().getTypeSimple_typeParserRuleCall_0());
			}
			lv_type_0_0=rulesimple_type
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getTypeRule());
				}
				add(
					$current,
					"type",
					lv_type_0_0,
					"org.xtext.compiler.pascal.Pascal.simple_type");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulesimple_type
entryRulesimple_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimple_typeRule()); }
	iv_rulesimple_type=rulesimple_type
	{ $current=$iv_rulesimple_type.current; }
	EOF;

// Rule simple_type
rulesimple_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_typeAccess().getTypesScalar_typeParserRuleCall_0_0());
				}
				lv_types_0_0=rulescalar_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_typeRule());
					}
					add(
						$current,
						"types",
						lv_types_0_0,
						"org.xtext.compiler.pascal.Pascal.scalar_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_typeAccess().getTypesSubrange_typeParserRuleCall_1_0());
				}
				lv_types_1_0=rulesubrange_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_typeRule());
					}
					add(
						$current,
						"types",
						lv_types_1_0,
						"org.xtext.compiler.pascal.Pascal.subrange_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_typeAccess().getTypesType_identifierParserRuleCall_2_0());
				}
				lv_types_2_0=ruletype_identifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_typeRule());
					}
					add(
						$current,
						"types",
						lv_types_2_0,
						"org.xtext.compiler.pascal.Pascal.type_identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_typeAccess().getTypesString_typeParserRuleCall_3_0());
				}
				lv_types_3_0=rulestring_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_typeRule());
					}
					add(
						$current,
						"types",
						lv_types_3_0,
						"org.xtext.compiler.pascal.Pascal.string_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulescalar_type
entryRulescalar_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScalar_typeRule()); }
	iv_rulescalar_type=rulescalar_type
	{ $current=$iv_rulescalar_type.current; }
	EOF;

// Rule scalar_type
rulescalar_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getScalar_typeAccess().getLeftParenthesisKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getScalar_typeAccess().getIdentifier_listParserRuleCall_1());
		}
		this_identifier_list_1=ruleidentifier_list
		{
			$current = $this_identifier_list_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getScalar_typeAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRulesubrange_type
entryRulesubrange_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubrange_typeRule()); }
	iv_rulesubrange_type=rulesubrange_type
	{ $current=$iv_rulesubrange_type.current; }
	EOF;

// Rule subrange_type
rulesubrange_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSubrange_typeAccess().getConstantsConstantParserRuleCall_0_0());
				}
				lv_constants_0_0=ruleconstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubrange_typeRule());
					}
					add(
						$current,
						"constants",
						lv_constants_0_0,
						"org.xtext.compiler.pascal.Pascal.constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_DOTDOT_1=RULE_DOTDOT
		{
			newLeafNode(this_DOTDOT_1, grammarAccess.getSubrange_typeAccess().getDOTDOTTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubrange_typeAccess().getConstantsConstantParserRuleCall_2_0());
				}
				lv_constants_2_0=ruleconstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubrange_typeRule());
					}
					add(
						$current,
						"constants",
						lv_constants_2_0,
						"org.xtext.compiler.pascal.Pascal.constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletype_identifier
entryRuletype_identifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getType_identifierRule()); }
	iv_ruletype_identifier=ruletype_identifier
	{ $current=$iv_ruletype_identifier.current; }
	EOF;

// Rule type_identifier
ruletype_identifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_names_0_0=RULE_ID
				{
					newLeafNode(lv_names_0_0, grammarAccess.getType_identifierAccess().getNamesIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getType_identifierRule());
					}
					addWithLastConsumed(
						$current,
						"names",
						lv_names_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		(
			(
				(
					lv_type_1_0='CHAR'
					{
						newLeafNode(lv_type_1_0, grammarAccess.getType_identifierAccess().getTypeCHARKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getType_identifierRule());
						}
						addWithLastConsumed($current, "type", lv_type_1_0, "CHAR");
					}
				)
			)
			    |
			(
				(
					lv_type_2_0='boolean'
					{
						newLeafNode(lv_type_2_0, grammarAccess.getType_identifierAccess().getTypeBooleanKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getType_identifierRule());
						}
						addWithLastConsumed($current, "type", lv_type_2_0, "boolean");
					}
				)
			)
			    |
			(
				(
					lv_type_3_0='integer'
					{
						newLeafNode(lv_type_3_0, grammarAccess.getType_identifierAccess().getTypeIntegerKeyword_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getType_identifierRule());
						}
						addWithLastConsumed($current, "type", lv_type_3_0, "integer");
					}
				)
			)
			    |
			(
				(
					lv_type_4_0='real'
					{
						newLeafNode(lv_type_4_0, grammarAccess.getType_identifierAccess().getTypeRealKeyword_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getType_identifierRule());
						}
						addWithLastConsumed($current, "type", lv_type_4_0, "real");
					}
				)
			)
			    |
			(
				(
					lv_type_5_0='string'
					{
						newLeafNode(lv_type_5_0, grammarAccess.getType_identifierAccess().getTypeStringKeyword_1_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getType_identifierRule());
						}
						addWithLastConsumed($current, "type", lv_type_5_0, "string");
					}
				)
			)
		)
	)
;

// Entry rule entryRulestring_type
entryRulestring_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getString_typeRule()); }
	iv_rulestring_type=rulestring_type
	{ $current=$iv_rulestring_type.current; }
	EOF;

// Rule string_type
rulestring_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='string'
		{
			newLeafNode(otherlv_0, grammarAccess.getString_typeAccess().getStringKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getString_typeAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				(
					lv_names_2_0=RULE_ID
					{
						newLeafNode(lv_names_2_0, grammarAccess.getString_typeAccess().getNamesIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getString_typeRule());
						}
						addWithLastConsumed(
							$current,
							"names",
							lv_names_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getString_typeAccess().getNumberUnsigned_numberParserRuleCall_2_1_0());
					}
					lv_number_3_0=ruleunsigned_number
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getString_typeRule());
						}
						add(
							$current,
							"number",
							lv_number_3_0,
							"org.xtext.compiler.pascal.Pascal.unsigned_number");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getString_typeAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleunsigned_constant
entryRuleunsigned_constant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnsigned_constantRule()); }
	iv_ruleunsigned_constant=ruleunsigned_constant
	{ $current=$iv_ruleunsigned_constant.current; }
	EOF;

// Rule unsigned_constant
ruleunsigned_constant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnsigned_constantAccess().getNumberUnsigned_numberParserRuleCall_0_0());
				}
				lv_number_0_0=ruleunsigned_number
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnsigned_constantRule());
					}
					add(
						$current,
						"number",
						lv_number_0_0,
						"org.xtext.compiler.pascal.Pascal.unsigned_number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getUnsigned_constantAccess().getCharConstant_chrParserRuleCall_1_0());
				}
				lv_char_1_0=ruleconstant_chr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnsigned_constantRule());
					}
					add(
						$current,
						"char",
						lv_char_1_0,
						"org.xtext.compiler.pascal.Pascal.constant_chr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_string_2_0=RULE_STRING
				{
					newLeafNode(lv_string_2_0, grammarAccess.getUnsigned_constantAccess().getStringSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnsigned_constantRule());
					}
					addWithLastConsumed(
						$current,
						"string",
						lv_string_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				lv_nil_3_0=RULE_NIL
				{
					newLeafNode(lv_nil_3_0, grammarAccess.getUnsigned_constantAccess().getNilNILTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnsigned_constantRule());
					}
					addWithLastConsumed(
						$current,
						"nil",
						lv_nil_3_0,
						"org.xtext.compiler.pascal.Pascal.NIL");
				}
			)
		)
	)
;

// Entry rule entryRuleunsigned_number
entryRuleunsigned_number returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnsigned_numberRule()); }
	iv_ruleunsigned_number=ruleunsigned_number
	{ $current=$iv_ruleunsigned_number.current; }
	EOF;

// Rule unsigned_number
ruleunsigned_number returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnsigned_numberAccess().getNumbersUnsigned_integerParserRuleCall_0_0());
				}
				lv_numbers_0_0=ruleunsigned_integer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnsigned_numberRule());
					}
					add(
						$current,
						"numbers",
						lv_numbers_0_0,
						"org.xtext.compiler.pascal.Pascal.unsigned_integer");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getUnsigned_numberAccess().getNumbersUnsigned_realParserRuleCall_1_0());
				}
				lv_numbers_1_0=ruleunsigned_real
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnsigned_numberRule());
					}
					add(
						$current,
						"numbers",
						lv_numbers_1_0,
						"org.xtext.compiler.pascal.Pascal.unsigned_real");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleconstant_chr
entryRuleconstant_chr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstant_chrRule()); }
	iv_ruleconstant_chr=ruleconstant_chr
	{ $current=$iv_ruleconstant_chr.current; }
	EOF;

// Rule constant_chr
ruleconstant_chr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='chr'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstant_chrAccess().getChrKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getConstant_chrAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstant_chrAccess().getNumbersUnsigned_integerParserRuleCall_2_0());
				}
				lv_numbers_2_0=ruleunsigned_integer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstant_chrRule());
					}
					add(
						$current,
						"numbers",
						lv_numbers_2_0,
						"org.xtext.compiler.pascal.Pascal.unsigned_integer");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getConstant_chrAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleprocedure_statement
entryRuleprocedure_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedure_statementRule()); }
	iv_ruleprocedure_statement=ruleprocedure_statement
	{ $current=$iv_ruleprocedure_statement.current; }
	EOF;

// Rule procedure_statement
ruleprocedure_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_names_0_0=RULE_ID
				{
					newLeafNode(lv_names_0_0, grammarAccess.getProcedure_statementAccess().getNamesIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcedure_statementRule());
					}
					addWithLastConsumed(
						$current,
						"names",
						lv_names_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getProcedure_statementAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProcedure_statementAccess().getTypesParameter_listParserRuleCall_1_1_0());
					}
					lv_types_2_0=ruleparameter_list
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcedure_statementRule());
						}
						add(
							$current,
							"types",
							lv_types_2_0,
							"org.xtext.compiler.pascal.Pascal.parameter_list");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getProcedure_statementAccess().getRightParenthesisKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleparameter_list
entryRuleparameter_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameter_listRule()); }
	iv_ruleparameter_list=ruleparameter_list
	{ $current=$iv_ruleparameter_list.current; }
	EOF;

// Rule parameter_list
ruleparameter_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameter_listAccess().getActual_parameterParserRuleCall_0());
		}
		this_actual_parameter_0=ruleactual_parameter
		{
			$current = $this_actual_parameter_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getParameter_listAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameter_listAccess().getTypesActual_parameterParserRuleCall_1_1_0());
					}
					lv_types_2_0=ruleactual_parameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameter_listRule());
						}
						add(
							$current,
							"types",
							lv_types_2_0,
							"org.xtext.compiler.pascal.Pascal.actual_parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleactual_parameter
entryRuleactual_parameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActual_parameterRule()); }
	iv_ruleactual_parameter=ruleactual_parameter
	{ $current=$iv_ruleactual_parameter.current; }
	EOF;

// Rule actual_parameter
ruleactual_parameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getActual_parameterAccess().getExpressionParserRuleCall());
	}
	this_expression_0=ruleexpression
	{
		$current = $this_expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulegoto_statement
entryRulegoto_statement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGoto_statementRule()); }
	iv_rulegoto_statement=rulegoto_statement
	{ $current=$iv_rulegoto_statement.current.getText(); }
	EOF;

// Rule goto_statement
rulegoto_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='goto'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getGoto_statementAccess().getGotoKeyword());
	}
;

// Entry rule entryRulestructured_statement
entryRulestructured_statement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStructured_statementRule()); }
	iv_rulestructured_statement=rulestructured_statement
	{ $current=$iv_rulestructured_statement.current.getText(); }
	EOF;

// Rule structured_statement
rulestructured_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='structured'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getStructured_statementAccess().getStructuredKeyword());
	}
;

// Entry rule entryRuleunsigned_integer
entryRuleunsigned_integer returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnsigned_integerRule()); }
	iv_ruleunsigned_integer=ruleunsigned_integer
	{ $current=$iv_ruleunsigned_integer.current.getText(); }
	EOF;

// Rule unsigned_integer
ruleunsigned_integer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_NUM_INT_0=RULE_NUM_INT
	{
		$current.merge(this_NUM_INT_0);
	}
	{
		newLeafNode(this_NUM_INT_0, grammarAccess.getUnsigned_integerAccess().getNUM_INTTerminalRuleCall());
	}
;

// Entry rule entryRuleunsigned_real
entryRuleunsigned_real returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnsigned_realRule()); }
	iv_ruleunsigned_real=ruleunsigned_real
	{ $current=$iv_ruleunsigned_real.current.getText(); }
	EOF;

// Rule unsigned_real
ruleunsigned_real returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_NUM_REAL_0=RULE_NUM_REAL
	{
		$current.merge(this_NUM_REAL_0);
	}
	{
		newLeafNode(this_NUM_REAL_0, grammarAccess.getUnsigned_realAccess().getNUM_REALTerminalRuleCall());
	}
;

// Entry rule entryRuleadditive_operator
entryRuleadditive_operator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAdditive_operatorRule()); }
	iv_ruleadditive_operator=ruleadditive_operator
	{ $current=$iv_ruleadditive_operator.current.getText(); }
	EOF;

// Rule additive_operator
ruleadditive_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_PLUS_0=RULE_PLUS
		{
			$current.merge(this_PLUS_0);
		}
		{
			newLeafNode(this_PLUS_0, grammarAccess.getAdditive_operatorAccess().getPLUSTerminalRuleCall_0());
		}
		    |
		this_MINUS_1=RULE_MINUS
		{
			$current.merge(this_MINUS_1);
		}
		{
			newLeafNode(this_MINUS_1, grammarAccess.getAdditive_operatorAccess().getMINUSTerminalRuleCall_1());
		}
		    |
		this_OR_2=RULE_OR
		{
			$current.merge(this_OR_2);
		}
		{
			newLeafNode(this_OR_2, grammarAccess.getAdditive_operatorAccess().getORTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRulemultiplicative_operator
entryRulemultiplicative_operator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicative_operatorRule()); }
	iv_rulemultiplicative_operator=rulemultiplicative_operator
	{ $current=$iv_rulemultiplicative_operator.current.getText(); }
	EOF;

// Rule multiplicative_operator
rulemultiplicative_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STAR_0=RULE_STAR
		{
			$current.merge(this_STAR_0);
		}
		{
			newLeafNode(this_STAR_0, grammarAccess.getMultiplicative_operatorAccess().getSTARTerminalRuleCall_0());
		}
		    |
		this_SLASH_1=RULE_SLASH
		{
			$current.merge(this_SLASH_1);
		}
		{
			newLeafNode(this_SLASH_1, grammarAccess.getMultiplicative_operatorAccess().getSLASHTerminalRuleCall_1());
		}
		    |
		this_DIV_2=RULE_DIV
		{
			$current.merge(this_DIV_2);
		}
		{
			newLeafNode(this_DIV_2, grammarAccess.getMultiplicative_operatorAccess().getDIVTerminalRuleCall_2());
		}
		    |
		this_MOD_3=RULE_MOD
		{
			$current.merge(this_MOD_3);
		}
		{
			newLeafNode(this_MOD_3, grammarAccess.getMultiplicative_operatorAccess().getMODTerminalRuleCall_3());
		}
		    |
		this_AND_4=RULE_AND
		{
			$current.merge(this_AND_4);
		}
		{
			newLeafNode(this_AND_4, grammarAccess.getMultiplicative_operatorAccess().getANDTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRulerelational_operator
entryRulerelational_operator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRelational_operatorRule()); }
	iv_rulerelational_operator=rulerelational_operator
	{ $current=$iv_rulerelational_operator.current.getText(); }
	EOF;

// Rule relational_operator
rulerelational_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_EQUAL_0=RULE_EQUAL
		{
			$current.merge(this_EQUAL_0);
		}
		{
			newLeafNode(this_EQUAL_0, grammarAccess.getRelational_operatorAccess().getEQUALTerminalRuleCall_0());
		}
		    |
		this_NOT_EQUAL_1=RULE_NOT_EQUAL
		{
			$current.merge(this_NOT_EQUAL_1);
		}
		{
			newLeafNode(this_NOT_EQUAL_1, grammarAccess.getRelational_operatorAccess().getNOT_EQUALTerminalRuleCall_1());
		}
		    |
		this_LT_2=RULE_LT
		{
			$current.merge(this_LT_2);
		}
		{
			newLeafNode(this_LT_2, grammarAccess.getRelational_operatorAccess().getLTTerminalRuleCall_2());
		}
		    |
		this_LE_3=RULE_LE
		{
			$current.merge(this_LE_3);
		}
		{
			newLeafNode(this_LE_3, grammarAccess.getRelational_operatorAccess().getLETerminalRuleCall_3());
		}
		    |
		this_GE_4=RULE_GE
		{
			$current.merge(this_GE_4);
		}
		{
			newLeafNode(this_GE_4, grammarAccess.getRelational_operatorAccess().getGETerminalRuleCall_4());
		}
		    |
		this_GT_5=RULE_GT
		{
			$current.merge(this_GT_5);
		}
		{
			newLeafNode(this_GT_5, grammarAccess.getRelational_operatorAccess().getGTTerminalRuleCall_5());
		}
		    |
		this_IN_6=RULE_IN
		{
			$current.merge(this_IN_6);
		}
		{
			newLeafNode(this_IN_6, grammarAccess.getRelational_operatorAccess().getINTerminalRuleCall_6());
		}
	)
;

// Entry rule entryRuleprocedure_and_function_declaration_part
entryRuleprocedure_and_function_declaration_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedure_and_function_declaration_partRule()); }
	iv_ruleprocedure_and_function_declaration_part=ruleprocedure_and_function_declaration_part
	{ $current=$iv_ruleprocedure_and_function_declaration_part.current; }
	EOF;

// Rule procedure_and_function_declaration_part
ruleprocedure_and_function_declaration_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProcedure_and_function_declaration_partAccess().getProcedure_or_function_declarationParserRuleCall_0());
		}
		this_procedure_or_function_declaration_0=ruleprocedure_or_function_declaration
		{
			$current = $this_procedure_or_function_declaration_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcedure_and_function_declaration_partAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleprocedure_or_function_declaration
entryRuleprocedure_or_function_declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedure_or_function_declarationRule()); }
	iv_ruleprocedure_or_function_declaration=ruleprocedure_or_function_declaration
	{ $current=$iv_ruleprocedure_or_function_declaration.current; }
	EOF;

// Rule procedure_or_function_declaration
ruleprocedure_or_function_declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProcedure_or_function_declarationAccess().getProcedure_declarationParserRuleCall_0());
		}
		this_procedure_declaration_0=ruleprocedure_declaration
		{
			$current = $this_procedure_declaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProcedure_or_function_declarationAccess().getFunction_declarationParserRuleCall_1());
		}
		this_function_declaration_1=rulefunction_declaration
		{
			$current = $this_function_declaration_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleprocedure_declaration
entryRuleprocedure_declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedure_declarationRule()); }
	iv_ruleprocedure_declaration=ruleprocedure_declaration
	{ $current=$iv_ruleprocedure_declaration.current; }
	EOF;

// Rule procedure_declaration
ruleprocedure_declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_PROCEDURE_0=RULE_PROCEDURE
		{
			newLeafNode(this_PROCEDURE_0, grammarAccess.getProcedure_declarationAccess().getPROCEDURETerminalRuleCall_0());
		}
		(
			(
				lv_names_1_0=RULE_ID
				{
					newLeafNode(lv_names_1_0, grammarAccess.getProcedure_declarationAccess().getNamesIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcedure_declarationRule());
					}
					addWithLastConsumed(
						$current,
						"names",
						lv_names_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedure_declarationAccess().getTypesFormal_parameter_listParserRuleCall_2_0());
				}
				lv_types_2_0=ruleformal_parameter_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedure_declarationRule());
					}
					add(
						$current,
						"types",
						lv_types_2_0,
						"org.xtext.compiler.pascal.Pascal.formal_parameter_list");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getProcedure_declarationAccess().getSemicolonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedure_declarationAccess().getBlockBlockParserRuleCall_4_0());
				}
				lv_block_4_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedure_declarationRule());
					}
					set(
						$current,
						"block",
						lv_block_4_0,
						"org.xtext.compiler.pascal.Pascal.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleprocedure_type
entryRuleprocedure_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedure_typeRule()); }
	iv_ruleprocedure_type=ruleprocedure_type
	{ $current=$iv_ruleprocedure_type.current; }
	EOF;

// Rule procedure_type
ruleprocedure_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProcedure_typeAccess().getProcedure_typeAction_0(),
					$current);
			}
		)
		this_PROCEDURE_1=RULE_PROCEDURE
		{
			newLeafNode(this_PROCEDURE_1, grammarAccess.getProcedure_typeAccess().getPROCEDURETerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedure_typeAccess().getTypesFormal_parameter_listParserRuleCall_2_0());
				}
				lv_types_2_0=ruleformal_parameter_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedure_typeRule());
					}
					add(
						$current,
						"types",
						lv_types_2_0,
						"org.xtext.compiler.pascal.Pascal.formal_parameter_list");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulefunction_declaration
entryRulefunction_declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunction_declarationRule()); }
	iv_rulefunction_declaration=rulefunction_declaration
	{ $current=$iv_rulefunction_declaration.current; }
	EOF;

// Rule function_declaration
rulefunction_declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_FUNCTION_0=RULE_FUNCTION
		{
			newLeafNode(this_FUNCTION_0, grammarAccess.getFunction_declarationAccess().getFUNCTIONTerminalRuleCall_0());
		}
		(
			(
				lv_names_1_0=RULE_ID
				{
					newLeafNode(lv_names_1_0, grammarAccess.getFunction_declarationAccess().getNamesIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunction_declarationRule());
					}
					addWithLastConsumed(
						$current,
						"names",
						lv_names_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_declarationAccess().getTypesFormal_parameter_listParserRuleCall_2_0());
				}
				lv_types_2_0=ruleformal_parameter_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_declarationRule());
					}
					add(
						$current,
						"types",
						lv_types_2_0,
						"org.xtext.compiler.pascal.Pascal.formal_parameter_list");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunction_declarationAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_declarationAccess().getTypesResult_typeParserRuleCall_4_0());
				}
				lv_types_4_0=ruleresult_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_declarationRule());
					}
					add(
						$current,
						"types",
						lv_types_4_0,
						"org.xtext.compiler.pascal.Pascal.result_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunction_declarationAccess().getSemicolonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_declarationAccess().getBlockBlockParserRuleCall_6_0());
				}
				lv_block_6_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_declarationRule());
					}
					set(
						$current,
						"block",
						lv_block_6_0,
						"org.xtext.compiler.pascal.Pascal.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefunction_type
entryRulefunction_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunction_typeRule()); }
	iv_rulefunction_type=rulefunction_type
	{ $current=$iv_rulefunction_type.current; }
	EOF;

// Rule function_type
rulefunction_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_FUNCTION_0=RULE_FUNCTION
		{
			newLeafNode(this_FUNCTION_0, grammarAccess.getFunction_typeAccess().getFUNCTIONTerminalRuleCall_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_typeAccess().getTypesFormal_parameter_listParserRuleCall_1_0());
				}
				lv_types_1_0=ruleformal_parameter_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_typeRule());
					}
					add(
						$current,
						"types",
						lv_types_1_0,
						"org.xtext.compiler.pascal.Pascal.formal_parameter_list");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getFunction_typeAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_typeAccess().getTypesResult_typeParserRuleCall_3_0());
				}
				lv_types_3_0=ruleresult_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_typeRule());
					}
					add(
						$current,
						"types",
						lv_types_3_0,
						"org.xtext.compiler.pascal.Pascal.result_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefunction_designator
entryRulefunction_designator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunction_designatorRule()); }
	iv_rulefunction_designator=rulefunction_designator
	{ $current=$iv_rulefunction_designator.current; }
	EOF;

// Rule function_designator
rulefunction_designator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_names_0_0=RULE_ID
				{
					newLeafNode(lv_names_0_0, grammarAccess.getFunction_designatorAccess().getNamesIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunction_designatorRule());
					}
					addWithLastConsumed(
						$current,
						"names",
						lv_names_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunction_designatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_designatorAccess().getTypesParameter_listParserRuleCall_2_0());
				}
				lv_types_2_0=ruleparameter_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_designatorRule());
					}
					add(
						$current,
						"types",
						lv_types_2_0,
						"org.xtext.compiler.pascal.Pascal.parameter_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunction_designatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleformal_parameter_list
entryRuleformal_parameter_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormal_parameter_listRule()); }
	iv_ruleformal_parameter_list=ruleformal_parameter_list
	{ $current=$iv_ruleformal_parameter_list.current; }
	EOF;

// Rule formal_parameter_list
ruleformal_parameter_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFormal_parameter_listAccess().getLeftParenthesisKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getFormal_parameter_listAccess().getFormal_parameter_sectionParserRuleCall_1());
		}
		this_formal_parameter_section_1=ruleformal_parameter_section
		{
			$current = $this_formal_parameter_section_1.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getFormal_parameter_listAccess().getSemicolonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormal_parameter_listAccess().getTypesFormal_parameter_sectionParserRuleCall_2_1_0());
					}
					lv_types_3_0=ruleformal_parameter_section
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormal_parameter_listRule());
						}
						add(
							$current,
							"types",
							lv_types_3_0,
							"org.xtext.compiler.pascal.Pascal.formal_parameter_section");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFormal_parameter_listAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleformal_parameter_section
entryRuleformal_parameter_section returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormal_parameter_sectionRule()); }
	iv_ruleformal_parameter_section=ruleformal_parameter_section
	{ $current=$iv_ruleformal_parameter_section.current; }
	EOF;

// Rule formal_parameter_section
ruleformal_parameter_section returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFormal_parameter_sectionAccess().getParameter_groupParserRuleCall_0());
		}
		this_parameter_group_0=ruleparameter_group
		{
			$current = $this_parameter_group_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			this_VAR_1=RULE_VAR
			{
				newLeafNode(this_VAR_1, grammarAccess.getFormal_parameter_sectionAccess().getVARTerminalRuleCall_1_0());
			}
			{
				newCompositeNode(grammarAccess.getFormal_parameter_sectionAccess().getParameter_groupParserRuleCall_1_1());
			}
			this_parameter_group_2=ruleparameter_group
			{
				$current = $this_parameter_group_2.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			this_FUNCTION_3=RULE_FUNCTION
			{
				newLeafNode(this_FUNCTION_3, grammarAccess.getFormal_parameter_sectionAccess().getFUNCTIONTerminalRuleCall_2_0());
			}
			{
				newCompositeNode(grammarAccess.getFormal_parameter_sectionAccess().getParameter_groupParserRuleCall_2_1());
			}
			this_parameter_group_4=ruleparameter_group
			{
				$current = $this_parameter_group_4.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			this_PROCEDURE_5=RULE_PROCEDURE
			{
				newLeafNode(this_PROCEDURE_5, grammarAccess.getFormal_parameter_sectionAccess().getPROCEDURETerminalRuleCall_3_0());
			}
			{
				newCompositeNode(grammarAccess.getFormal_parameter_sectionAccess().getParameter_groupParserRuleCall_3_1());
			}
			this_parameter_group_6=ruleparameter_group
			{
				$current = $this_parameter_group_6.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleparameter_group
entryRuleparameter_group returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameter_groupRule()); }
	iv_ruleparameter_group=ruleparameter_group
	{ $current=$iv_ruleparameter_group.current; }
	EOF;

// Rule parameter_group
ruleparameter_group returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameter_groupAccess().getIdentifier_listParserRuleCall_0());
		}
		this_identifier_list_0=ruleidentifier_list
		{
			$current = $this_identifier_list_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getParameter_groupAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameter_groupAccess().getTypesType_identifierParserRuleCall_2_0());
				}
				lv_types_2_0=ruletype_identifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameter_groupRule());
					}
					add(
						$current,
						"types",
						lv_types_2_0,
						"org.xtext.compiler.pascal.Pascal.type_identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleresult_type
entryRuleresult_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResult_typeRule()); }
	iv_ruleresult_type=ruleresult_type
	{ $current=$iv_ruleresult_type.current; }
	EOF;

// Rule result_type
ruleresult_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getResult_typeAccess().getType_identifierParserRuleCall());
	}
	this_type_identifier_0=ruletype_identifier
	{
		$current = $this_type_identifier_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulebool
entryRulebool returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBoolRule()); }
	iv_rulebool=rulebool
	{ $current=$iv_rulebool.current.getText(); }
	EOF;

// Rule bool
rulebool returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_TRUE_0=RULE_TRUE
		{
			$current.merge(this_TRUE_0);
		}
		{
			newLeafNode(this_TRUE_0, grammarAccess.getBoolAccess().getTRUETerminalRuleCall_0());
		}
		    |
		this_FALSE_1=RULE_FALSE
		{
			$current.merge(this_FALSE_1);
		}
		{
			newLeafNode(this_FALSE_1, grammarAccess.getBoolAccess().getFALSETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulesign
entryRulesign returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignRule()); }
	iv_rulesign=rulesign
	{ $current=$iv_rulesign.current.getText(); }
	EOF;

// Rule sign
rulesign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_PLUS_0=RULE_PLUS
		{
			$current.merge(this_PLUS_0);
		}
		{
			newLeafNode(this_PLUS_0, grammarAccess.getSignAccess().getPLUSTerminalRuleCall_0());
		}
		    |
		this_MINUS_1=RULE_MINUS
		{
			$current.merge(this_MINUS_1);
		}
		{
			newLeafNode(this_MINUS_1, grammarAccess.getSignAccess().getMINUSTerminalRuleCall_1());
		}
	)
;

RULE_VAR : ('V'|'v') ('A'|'a') ('R'|'r');

RULE_NIL : ('N'|'n') ('I'|'i') ('L'|'l');

RULE_DOTDOT : '..';

RULE_NOT : ('N'|'n') ('O'|'o') ('T'|'t');

RULE_TRUE : ('T'|'t') ('R'|'r') ('U'|'u') ('e'|'E');

RULE_FALSE : ('F'|'f') ('A'|'a') ('L'|'l') ('S'|'s') ('E'|'e');

RULE_STAR : '*';

RULE_SLASH : '/';

RULE_DIV : ('D'|'d') ('I'|'i') ('V'|'v');

RULE_MOD : ('M'|'m') ('O'|'o') ('D'|'d');

RULE_PLUS : '+';

RULE_MINUS : '-';

RULE_AND : ('A'|'a') ('N'|'n') ('D'|'d');

RULE_OR : ('O'|'o') ('R'|'r');

RULE_ASSIGN : ':=';

RULE_NUM_INT : ('0'..'9')+;

RULE_NUM_REAL : ('0'..'9')+ (('.' ('0'..'9')+ RULE_EXPONENT?)?|RULE_EXPONENT);

fragment RULE_EXPONENT : 'e' (RULE_PLUS|RULE_MINUS)? ('0'..'9')+;

RULE_EQUAL : '=';

RULE_NOT_EQUAL : '<>';

RULE_LT : '<';

RULE_LE : '<=';

RULE_GE : '>=';

RULE_GT : '>';

RULE_IN : ('I'|'i') ('N'|'n');

RULE_PROCEDURE : ('P'|'p') ('R'|'r') ('O'|'o') ('C'|'c') ('E'|'e') ('D'|'d') ('U'|'u') ('R'|'r') ('E'|'e');

RULE_FUNCTION : ('F'|'f') ('U'|'u') ('N'|'n') ('C'|'c') ('T'|'t') ('I'|'i') ('O'|'o') ('N'|'n');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
